# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  release:
    # Deploy when stable or pre-releases are published.
    types: [published]
  push:
    # Deploy when push on the "deployment" branch.  Use with caution!
    branches:
      - deployment

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: planscape_dev
  ECS_SERVICE: PlanscapeDevService
  ECS_CLUSTER: PlanscapeDevCluster
  ECS_TASK_DEFINITION: src/deployment/task_definition.json
  EC2_LOAD_BALANCER: planscapedevload-1541713932.us-west-1.elb.amazonaws.com
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set image tags
        id: set-image-tags
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "frontend_image=$ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG" >> $GITHUB_ENV
          echo "backend_image=$ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG" >> $GITHUB_ENV
          echo "r_image=$ECR_REGISTRY/$ECR_REPOSITORY:r-$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build, tag, and push frontend
        id: build-frontend
        run: |
          cd src/interface
          sed -i "s/localhost/${{ env.EC2_LOAD_BALANCER }}/" src/environments/environment.prod.ts
          docker build -t planscape-frontend . 
          docker tag planscape-frontend:latest ${{ env.frontend_image }}
          docker push ${{ env.frontend_image }}

      - name: Build, tag, and push backend
        id: build-backend
        run: |
          cd src/planscape
          docker build -t planscape-backend .
          docker tag planscape-backend:latest ${{ env.backend_image }}
          docker push ${{ env.backend_image }}
        
      - name: Build, tag, and push r
        id: build-r
        run: |
          cd src/planscape_r
          docker build -t planscape-r .
          docker tag planscape-r:latest ${{ env.r_image }}
          docker push ${{ env.r_image }}

      - name: Render backend
        id: render-backend-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: backend
          image: ${{ env.backend_image }}
          environment-variables: |
            LOG_LEVEL=info
            ENVIRONMENT=prod

      - name: Modify Amazon ECS task definition with frontend container
        id: render-frontend-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-backend-container.outputs.task-definition }}
          container-name: frontend
          image: ${{ env.frontend_image }}

      - name: Modify Amazon ECS task definition with r container
        id: render-r-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-frontend-container.outputs.task-definition }}
          container-name: r
          image: ${{ env.r_image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-r-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
