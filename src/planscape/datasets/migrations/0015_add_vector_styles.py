# Generated by Django 4.x on 2025‑05‑05
from __future__ import annotations

import hashlib
import json
from uuid import uuid4

from django.conf import settings
from django.db import migrations


STYLES: dict[str, dict[str, str]] = {
    "steel-blue": {
        "fill-color": "#778899",
        "fill-outline-color": "#778899",
    },
    "brick-red": {
        "fill-color": "#B06565",
        "fill-outline-color": "#B06565",
    },
    "soft-gray": {
        "fill-color": "#D3D3D3",
        "fill-outline-color": "#898989",
    },
    "soft-blue": {
        "fill-color": "#A6CEE3",
        "fill-outline-color": "#A6CEE3",
    },
    "lilac-purple": {
        "fill-color": "#CAB2D6",
        "fill-outline-color": "#CAB2D6",
    },
    "grapefruit": {
        "fill-color": "#FA8072",
        "fill-outline-color": "#FA8072",
    },
    "soft-yellow": {
        "fill-color": "#FFEDA0",
        "fill-outline-color": "#898989",
    },
    "lime-green": {
        "fill-color": "#B2DF8A",
        "fill-outline-color": "#B2DF8A",
    },
    "yolk-yellow": {
        "fill-color": "#F5DEB3",
        "fill-outline-color": "#898989",
    },
    "light-blush": {
        "fill-color": "#F0D3F7",
        "fill-outline-color": "#898989",
    },
    "light-orange": {
        "fill-color": "#FDBF6F",
        "fill-outline-color": "#FDBF6F",
    },
    "ocean-blue": {
        "fill-color": "#4682B4",
        "fill-outline-color": "#4682B4",
    },
    "brown": {
        "fill-color": "#BC8F8F",
        "fill-outline-color": "#BC8F8F",
    },
    "grass-green": {
        "fill-color": "#9ACD32",
        "fill-outline-color": "#9ACD32",
    },
    "sky-blue": {
        "fill-color": "#87CEFA",
        "fill-outline-color": "#87CEFA",
    },
}


def _hash(data: dict) -> str:
    """Deterministic hash for the JSON payload."""
    return hashlib.sha256(json.dumps(data, sort_keys=True).encode()).hexdigest()


def add_styles(apps, schema_editor):
    Style = apps.get_model("styles", "Style")               # ← change app label if needed
    User = apps.get_model("auth", "User")
    Organization = apps.get_model("organizations", "Organization")

    user = User.objects.get(email=settings.DEFAULT_ADMIN_EMAIL)
    org = Organization.objects.get(name=settings.DEFAULT_ORGANIZATION_NAME)

    existing = {
        (s.name, s.type)
        for s in Style.objects.filter(
            organization=org, name__in=STYLES.keys()
        ).only("name", "type")
    }

    objs = []
    for name, data in STYLES.items():
        # unique on (organization, name, type); skip if already present
        if (name, "VECTOR") in existing:
            continue

        objs.append(
            Style(
                uuid=uuid4(),
                name=name,
                organization=org,
                created_by=user,
                type="VECTOR",           # DataLayerType.VECTOR
                data=data,
                data_hash=_hash(data),
            )
        )

    if objs:
        Style.objects.bulk_create(objs)


def remove_styles(apps, schema_editor):
    Style = apps.get_model("styles", "Style")
    Organization = apps.get_model("organizations", "Organization")

    org = Organization.objects.get(name=settings.DEFAULT_ORGANIZATION_NAME)
    Style.objects.filter(organization=org, name__in=STYLES.keys()).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("styles", "0014_remove_category_deleted_at"),  # ← update to your latest migration
    ]

    operations = [
        migrations.RunPython(add_styles, remove_styles),
    ]
