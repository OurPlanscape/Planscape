# Generated by Django 4.2.21 on 2025-10-16 15:44

from django.db import migrations


def rebin_and_copy_geometry(apps, schema_editor):
    TreatmentGoal = apps.get_model("planning", "TreatmentGoal")

    REF_TG_NAMES = [
        "Reduce Destructive Wildfire Risk",
        "Reduce Destructive Wildfire Risk to High-Density Housing",
        "Reduce High-Severity Fire in the Wildland-Urban Interface (WUI)",
    ]

    TARGETS = {
        "Meet Timber Production Targets": (
            "CARBON_BIOMASS",
            "TREEMAP_FVS_2020",
        ),
        "Reduce Large Tree Mortality from Wildfire": (
            "CARBON_BIOMASS",
            "TREEMAP_FVS_2020",
        ),
        "Reduce Probability of Crown Fire": (
            "FIRE_DYNAMICS",
            "PYROLOGIX",
        ),
    }

    ref_tg = (
        TreatmentGoal.objects.filter(
            name__in=REF_TG_NAMES, active=True, geometry__isnull=False
        )
        .order_by("id")
        .first()
    )
    ref_geom = getattr(ref_tg, "geometry", None)

    for name, (category, group) in TARGETS.items():
        tg = TreatmentGoal.objects.filter(name=name).first()
        if not tg:
            continue

        tg.category = category
        tg.group = group
        tg.active = True

        update_fields = ["category", "group", "active", "updated_at"]

        if tg.geometry is None and ref_geom is not None:
            tg.geometry = ref_geom
            update_fields.append("geometry")

        tg.save(update_fields=update_fields)


def noop(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("planning", "0060_add_new_conus_bins_treemap_pyrologix"),
        ("datasets", "0020_auto_20250829_1648"),
    ]

    operations = [
        migrations.RunPython(rebin_and_copy_geometry, noop),
    ]
