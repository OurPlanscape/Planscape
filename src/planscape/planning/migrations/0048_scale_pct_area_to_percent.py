# Generated by Django 4.2.21 on 2025-08-29 14:50

from django.db import migrations


def scale_pct_area_to_percent(apps, schema_editor):
    ScenarioResult = apps.get_model("planning", "ScenarioResult")
    ProjectArea = apps.get_model("planning", "ProjectArea")

    SCENARIO_BATCH_SIZE = 200
    PROJECT_AREA_BATCH_SIZE = 500

    def scale_fraction_to_percent(value):
        try:
            num = float(value)
        except (TypeError, ValueError):
            return None
        if num <= 1.000001:
            return round(num * 100.0, 2)
        return None

    for scenario_result in (
        ScenarioResult.objects.only("id", "result")
        .order_by("id")
        .iterator(chunk_size=SCENARIO_BATCH_SIZE)
    ):
        result_json = scenario_result.result or {}
        features = result_json.get("features") or []

        changed_any_feature = False
        for feature in features:
            props = feature.get("properties") or {}
            current = props.get("pct_area")
            scaled = scale_fraction_to_percent(current)
            if scaled is not None:
                props["pct_area"] = scaled
                feature["properties"] = props
                changed_any_feature = True

        if changed_any_feature:
            scenario_result.result = result_json
            scenario_result.save(update_fields=["result"])

    for project_area in (
        ProjectArea.objects.only("id", "data")
        .order_by("id")
        .iterator(chunk_size=PROJECT_AREA_BATCH_SIZE)
    ):
        data = project_area.data or {}
        current = data.get("pct_area")
        scaled = scale_fraction_to_percent(current)
        if scaled is not None:
            data["pct_area"] = scaled
            project_area.data = data
            project_area.save(update_fields=["data"])


class Migration(migrations.Migration):
    dependencies = [
        ("planning", "0047_add_wildfire_treatment_goals"),
    ]
    operations = [
        migrations.RunPython(
            scale_pct_area_to_percent, migrations.RunPython.noop, atomic=False
        ),
    ]
