# Generated by Django 4.2.21 on 2025-10-14 12:35

from django.db import migrations


def add_conus_treatment_goals(apps, schema_editor):
    TreatmentGoal = apps.get_model("planning", "TreatmentGoal")
    TGUD = apps.get_model("planning", "TreatmentGoalUsesDataLayer")
    DataLayer = apps.get_model("datasets", "DataLayer")
    User = apps.get_model("auth", "User")

    admin_user = User.objects.filter(username="admin").first()
    if not admin_user:
        admin_user = User.objects.create(
            username="admin",
            email="admin@planscape.org",
            first_name="Admin",
            last_name="Planscape",
            is_staff=True,
            is_superuser=True,
        )

    def get_layer_by_name(name: str):
        return DataLayer.objects.filter(name__exact=name).first()

    GOALS = [
        # 1) Meet Timber Production Targets (TreeMap – FVS 2020)
        {
            "name": "Meet Timber Production Targets",
            "category": "FIRE_DYNAMICS",
            "group": "WILDFIRE_RISK_TO_COMMUTIES",
            "description": (
                "Identify and prioritize treatment areas where total live tree volume is highest. "
                "This scenario emphasizes stands with greater timber volume to support meeting harvest objectives.\n\n"
                "This scenario uses Total Live Tree Volume from the TreeMap-FVS 2020 dataset as its priority objective."
            ),
            "layers": [
                ("PRIORITY", "Total Live Tree Volume", None),
                ("THRESHOLD", "Total Live Tree Volume", "value > 77.84"),
            ],
        },
        # 2) Reduce Large Tree Mortality from Wildfire (TreeMap – FVS 2020)
        {
            "name": "Reduce Large Tree Mortality from Wildfire",
            "category": "FIRE_DYNAMICS",
            "group": "WILDFIRE_RISK_TO_COMMUTIES",
            "description": (
                "Identify and prioritize treatment areas where live tree volume is at higher risk of being "
                "killed by wildfire. This scenario emphasizes stands with higher tree volume to help reduce the loss of "
                "large trees and associated forest structure.\n\n"
                "This scenario uses Expected Annual Total Volume Killed from the TreeMap-FVS 2020 dataset as its priority objective."
            ),
            "layers": [
                ("PRIORITY", "Expected Annual Total Volume Killed", None),
                ("THRESHOLD", "Total Live Tree Volume", "value > 77.84"),
            ],
        },
        # 3) Reduce Probability of Crown Fire (Pyrologix)
        {
            "name": "Reduce Probability of Crown Fire",
            "category": "FIRE_DYNAMICS",
            "group": "WILDFIRE_RISK_TO_COMMUTIES",
            "description": (
                "Identify and prioritize treatment areas with high potential for destructive crown fire—"
                "where wildfire is most likely to spread rapidly through forest canopies—and where suppression would "
                "be particularly difficult.\n\n"
                "This scenario uses Crown Fire Probability from the Pyrologix dataset as its priority objective."
            ),
            "layers": [
                ("PRIORITY", "Crown Fire Probability", None),
            ],
        },
    ]

    for spec in GOALS:
        tg_defaults = {
            "description": spec["description"],
            "category": spec["category"],
            "group": spec["group"],
            "active": True,
            "created_by_id": admin_user.id,
        }

        tg, _ = TreatmentGoal.objects.get_or_create(
            name=spec["name"], defaults=tg_defaults
        )

        for field_name, value in tg_defaults.items():
            setattr(tg, field_name, value)
        tg.save(update_fields=list(tg_defaults.keys()))

        for usage_type, layer_name, threshold in spec["layers"]:
            datalayer = get_layer_by_name(layer_name)
            if not datalayer:
                continue

            TGUD.objects.update_or_create(
                treatment_goal=tg,
                datalayer=datalayer,
                usage_type=usage_type,
                defaults={"threshold": threshold},
            )


class Migration(migrations.Migration):

    dependencies = [
        ("planning", "0058_alter_scenario_result_status_and_more"),
        ("datasets", "0020_auto_20250829_1648"),
    ]

    operations = [
        migrations.RunPython(add_conus_treatment_goals, migrations.RunPython.noop),
    ]
