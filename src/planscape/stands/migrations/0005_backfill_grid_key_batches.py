# Generated by Django 4.2.21 on 2025-08-22 10:02

from django.db import migrations

CHUNK = 5000

SQL_UPDATE_BATCH = f"""
WITH batch AS (
  SELECT id
  FROM public.stands_stand
  WHERE grid_key IS NULL
  ORDER BY id
  LIMIT {CHUNK}
)
UPDATE public.stands_stand s
SET grid_key =
    UPPER(size) || ':' ||
    ROUND(ST_X(ST_Transform(ST_PointOnSurface(geometry), 5070))::numeric, 3)::text || ':' ||
    ROUND(ST_Y(ST_Transform(ST_PointOnSurface(geometry), 5070))::numeric, 3)::text
FROM batch
WHERE s.id = batch.id;
"""

SQL_COUNT_MISSING = """
SELECT COUNT(*) FROM public.stands_stand WHERE grid_key IS NULL;
"""


def forwards(apps, schema_editor):
    with schema_editor.connection.cursor() as cur:
        try:
            cur.execute("SET statement_timeout TO 0;")
        except Exception:
            pass

        cur.execute(SQL_COUNT_MISSING)
        remaining = cur.fetchone()[0] or 0
        print(f"[grid_key backfill] starting, missing={remaining}")

        i = 0
        while True:
            cur.execute(SQL_UPDATE_BATCH)
            updated = cur.rowcount or 0
            if updated == 0:
                break
            i += 1
            if i % 5 == 0 or updated < CHUNK:
                cur.execute(SQL_COUNT_MISSING)
                remaining = cur.fetchone()[0] or 0
                print(
                    f"[grid_key backfill] batches={i}, last_batch={updated}, remaining={remaining}"
                )

        cur.execute(SQL_COUNT_MISSING)
        remaining = cur.fetchone()[0] or 0
        print(f"[grid_key backfill] done, remaining={remaining}")


def backwards(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    atomic = False
    dependencies = [("stands", "0004_grid_key_unique_index")]
    operations = [
        migrations.RunPython(forwards, backwards),
    ]
