{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-967d68fb72a4a9f4470e94c8643421289f18849ff3207b31624817d0b4cdc527eb7c5c9e67a192cf02dd763e881588aa598f4f9fa629e6baa9c4bc4749bb3aa6",
            "file": "src/styleguide/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[sg-button], a[sg-button]",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hasError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe optional icon used in the button.\nIf blank the button will not have an icon\n",
                    "description": "<p>The optional icon used in the button.\nIf blank the button will not have an icon</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'ghost'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe variant used for the button.\n\n",
                    "description": "<p>The variant used for the button.</p>\n",
                    "line": 25,
                    "type": "ButtonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.ghost-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.has-error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.negative-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.positive-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.primary-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.text-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\nexport type ButtonVariant =\n  | 'primary'\n  | 'ghost'\n  | 'text'\n  | 'negative'\n  | 'positive';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'button[sg-button], a[sg-button]',\n  standalone: true,\n  imports: [CommonModule, MatIconModule],\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n  /**\n   * The variant used for the button.\n   *\n   */\n  @Input() variant: ButtonVariant = 'ghost';\n  /**\n   * The optional icon used in the button.\n   * If blank the button will not have an icon\n   */\n  @Input() icon: string = '';\n\n  @Input() hasError = false;\n\n  @HostBinding('class.ghost-button')\n  get isVariantGhost() {\n    return this.variant === 'ghost';\n  }\n\n  @HostBinding('class.primary-button')\n  get isVariantPrimary() {\n    return this.variant === 'primary';\n  }\n\n  @HostBinding('class.negative-button')\n  get isVariantNegative() {\n    return this.variant === 'negative';\n  }\n\n  @HostBinding('class.text-button')\n  get isVariantText() {\n    return this.variant === 'text';\n  }\n\n  @HostBinding('class.positive-button')\n  get isVariantPositive() {\n    return this.variant === 'positive';\n  }\n\n  @HostBinding('class.has-error')\n  get itHasError() {\n    return this.hasError;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"colors\";\n@import \"mixins\";\n\n\n:host {\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 20px;\n  border-radius: 4px;\n  padding: 12px 12px;\n  cursor: pointer;\n  gap: 8px;\n  text-decoration: none;\n  height: 40px;\n  border: 1px solid transparent;\n  background-color: transparent;\n\n  &.primary-button {\n    color: $color-white;\n    background-color: $color-standard-blue;\n    border-color: $color-standard-blue;\n\n    &:active, &:hover {\n      background-color: $color-main-blue;\n      border-color: $color-main-blue;\n    }\n\n    &:disabled {\n      color: $color-text-gray;\n      border-color: $color-soft-gray;\n      background-color: $color-soft-gray;\n    }\n  }\n\n  &.ghost-button {\n    color: $color-standard-blue;\n    border-color: $color-standard-blue;\n    background-color: $color-white;\n\n\n    &:active, &:hover {\n      color: $color-white;\n      background-color: $color-main-blue;\n      border-color: $color-main-blue;\n    }\n\n\n    &:disabled {\n      color: $color-text-gray;\n      border-color: $color-soft-gray;\n      background-color: $color-soft-gray;\n    }\n  }\n\n  &.negative-button {\n    border-color: $color-error;\n    background-color: $color-error;\n    color: $color-white;\n\n    &:active, &:hover {\n      background: #B40000;\n    }\n\n    &:disabled {\n      color: $color-text-gray;\n      background-color: $color-soft-gray;\n      border-color: $color-soft-gray;\n    }\n  }\n\n  &.text-button {\n    background-color: transparent;\n    border: none;\n    color: $color-standard-blue;\n\n    &:active, &:hover {\n      background-color: $color-soft-gray;\n    }\n\n    &:disabled {\n      color: $color-text-gray;\n    }\n  }\n\n  &.positive-button {\n    border-color: $color-brand-teal;\n    background-color: $color-brand-teal;\n    color: $color-white;\n\n    &:active, &:hover {\n      background: $color-brand-green;\n    }\n\n    &:disabled {\n      color: $color-text-gray;\n      background-color: $color-soft-gray;\n      border-color: $color-soft-gray;\n    }\n  }\n\n\n  &.has-error:not(:disabled) {\n    background-color: white;\n    color: $color-error;\n    border-color: $color-error;\n  }\n\n}\n\n\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isVariantGhost": {
                    "name": "isVariantGhost",
                    "getSignature": {
                        "name": "isVariantGhost",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                },
                "isVariantPrimary": {
                    "name": "isVariantPrimary",
                    "getSignature": {
                        "name": "isVariantPrimary",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                },
                "isVariantNegative": {
                    "name": "isVariantNegative",
                    "getSignature": {
                        "name": "isVariantNegative",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                },
                "isVariantText": {
                    "name": "isVariantText",
                    "getSignature": {
                        "name": "isVariantText",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                },
                "isVariantPositive": {
                    "name": "isVariantPositive",
                    "getSignature": {
                        "name": "isVariantPositive",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                },
                "itHasError": {
                    "name": "itHasError",
                    "getSignature": {
                        "name": "itHasError",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            },
            "templateData": "<mat-icon *ngIf=\"icon\">{{ icon }}</mat-icon>\n<ng-content></ng-content>\n"
        },
        {
            "name": "ScenarioCardComponent",
            "id": "component-ScenarioCardComponent-4fc5eb1620e5893452368dda0022fda5b958182aae3737978cc6a48d5a6e9b2d63d56afdf18f5557d171d2c5938e0bdfc03037ece26bf1debcdb50ad4b7484cd",
            "file": "src/styleguide/scenario-card/scenario-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sg-scenario-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./scenario-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "scenario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe status\n",
                    "description": "<p>The status</p>\n",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgSwitch"
                }
            ],
            "description": "<p>Scenario Card for displaying scenario data in a results list</p>\n",
            "rawdescription": "\n\nScenario Card for displaying scenario data in a results list\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { NgIf, NgSwitch } from '@angular/common';\n\n/**\n * Scenario Card for displaying scenario data in a results list\n */\n@Component({\n  selector: 'sg-scenario-card',\n  standalone: true,\n  imports: [NgIf, NgSwitch],\n  templateUrl: './scenario-card.component.html',\n  styleUrl: './scenario-card.component.scss',\n})\nexport class ScenarioCardComponent {\n  /**\n   * The status\n   */\n  @Input() scenario: any;\n}\n",
            "styleUrl": "./scenario-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-container class=\"scenario-content\">\n  <div class=\"title-row\">\n    <div class=\"name-header\">{{ scenario.name }}</div>\n  </div>\n\n  <div class=\"detail-row\">\n    <div class=\"detail-column\">\n      <div class=\"detail-header\">Creator</div>\n      <div class=\"detail-info\">{{ scenario.creator }}</div>\n    </div>\n    <div class=\"detail-column\">\n      <div class=\"detail-header\">Areas</div>\n      <div class=\"detail-info\">{{ scenario.area_count }}</div>\n    </div>\n    <div class=\"detail-column\">\n      <div class=\"detail-header\">Est Budget</div>\n      <div class=\"detail-info\">{{ scenario.est_budget }}</div>\n    </div>\n    <div class=\"detail-column\">\n      <div class=\"detail-header\">Treatment Plans</div>\n      <div class=\"detail-info\">{{ scenario.treatment_plans_count }}</div>\n    </div>\n    <div class=\"detail-column\">\n      <div class=\"detail-header\">Created</div>\n      <div class=\"detail-info\">{{ scenario.created_at }}</div>\n    </div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "StatusChipComponent",
            "id": "component-StatusChipComponent-2b86b4ec02ea586989a688f308c425033d867782f2d7a548a8d410071345f96b04847a74cd077844dc90b6a480f8169359da251fc8236e2f9d2e067b91b4ca13",
            "file": "src/styleguide/status-chip/status-chip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sg-status-chip",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./status-chip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional label\n",
                    "description": "<p>Optional label</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "status",
                    "defaultValue": "'inProgress'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe status\n",
                    "description": "<p>The status</p>\n",
                    "line": 21,
                    "type": "StatusChipStatus",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.failed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.in-progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.running",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgSwitch"
                }
            ],
            "description": "<p>Status chip to display status inline.\nTakes optional label or displays the status styled accordingly.</p>\n",
            "rawdescription": "\n\nStatus chip to display status inline.\nTakes optional label or displays the status styled accordingly.\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\nimport { NgIf, NgSwitch } from '@angular/common';\n\nexport type StatusChipStatus = 'inProgress' | 'success' | 'failed' | 'running';\n\n/**\n * Status chip to display status inline.\n * Takes optional label or displays the status styled accordingly.\n */\n@Component({\n  selector: 'sg-status-chip',\n  standalone: true,\n  imports: [NgIf, NgSwitch],\n  templateUrl: './status-chip.component.html',\n  styleUrl: './status-chip.component.scss',\n})\nexport class StatusChipComponent {\n  /**\n   * The status\n   */\n  @Input() status: StatusChipStatus = 'inProgress';\n  /**\n   * Optional label\n   */\n  @Input() label? = '';\n\n  /**\n   * @ignore\n   */\n  readonly defaultTextByStatus: Record<StatusChipStatus, string> = {\n    inProgress: 'In Progress',\n    success: 'Success',\n    failed: 'Failed',\n    running: 'Running',\n  };\n\n  @HostBinding('class.in-progress')\n  get isInProgress() {\n    return this.status === 'inProgress';\n  }\n\n  @HostBinding('class.success')\n  get isSuccess() {\n    return this.status === 'success';\n  }\n\n  @HostBinding('class.failed')\n  get isFailed() {\n    return this.status === 'failed';\n  }\n\n  @HostBinding('class.running')\n  get isRunning() {\n    return this.status === 'running';\n  }\n}\n",
            "styleUrl": "./status-chip.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isInProgress": {
                    "name": "isInProgress",
                    "getSignature": {
                        "name": "isInProgress",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "isSuccess": {
                    "name": "isSuccess",
                    "getSignature": {
                        "name": "isSuccess",
                        "type": "",
                        "returnType": "",
                        "line": 43
                    }
                },
                "isFailed": {
                    "name": "isFailed",
                    "getSignature": {
                        "name": "isFailed",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                },
                "isRunning": {
                    "name": "isRunning",
                    "getSignature": {
                        "name": "isRunning",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"label; else defaultByStatus\">\n  {{ label }}\n</ng-container>\n<ng-template #defaultByStatus>{{ defaultTextByStatus[status] }}</ng-template>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"ghost\" | \"text\" | \"negative\" | \"positive\"",
                "file": "src/styleguide/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "StatusChipStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"inProgress\" | \"success\" | \"failed\" | \"running\"",
                "file": "src/styleguide/status-chip/status-chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {},
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/styleguide/button/button.component.ts": [
                {
                    "name": "ButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"ghost\" | \"text\" | \"negative\" | \"positive\"",
                    "file": "src/styleguide/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/styleguide/status-chip/status-chip.component.ts": [
                {
                    "name": "StatusChipStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"inProgress\" | \"success\" | \"failed\" | \"running\"",
                    "file": "src/styleguide/status-chip/status-chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 54,
        "status": "good",
        "files": [
            {
                "filePath": "src/styleguide/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 20,
                "coverageCount": "2/10",
                "status": "low"
            },
            {
                "filePath": "src/styleguide/scenario-card/scenario-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioCardComponent",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "src/styleguide/status-chip/status-chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusChipComponent",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            }
        ]
    }
}