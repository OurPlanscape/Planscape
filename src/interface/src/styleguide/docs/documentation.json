{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "InputDirective",
            "id": "directive-InputDirective-5d7c263d73f0b06d6975210e477166588c25ccd3785c8f25bb67a8ab7a2a9882c36279c47090405fcf7e00375dbb4c43198bc79b148017a523e55609f80cd18f",
            "file": "src/styleguide/input/input.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: 'input[sgInput]',\n  standalone: true,\n})\nexport class InputDirective {\n  private el: ElementRef<HTMLInputElement>;\n\n  constructor(private elementRef: ElementRef<HTMLInputElement>) {\n    this.el = this.elementRef;\n  }\n\n  focus() {\n    this.el.nativeElement.focus();\n  }\n}\n",
            "selector": "input[sgInput]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLInputElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLInputElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "BannerComponent",
            "id": "component-BannerComponent-d0e44b52540be5814c69cff3c82e41e23e2eb9aee40484da6c38da11983cecac4d221c45abc972b94d9ad305665742ef3d45153a9f25573e14b202d00bc75c4c",
            "file": "src/styleguide/banner/banner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sg-banner",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./banner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "dismissible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the banner shows an icon to dismiss\n",
                    "description": "<p>If the banner shows an icon to dismiss</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe type of banner\n",
                    "description": "<p>the type of banner</p>\n",
                    "line": 24,
                    "type": "BannerType",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dismiss",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe emitter of the dismiss action\n",
                    "description": "<p>the emitter of the dismiss action</p>\n",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.warning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n} from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { NgIf } from '@angular/common';\n\nexport type BannerType = 'info' | 'warning' | 'error' | 'success';\n\n@Component({\n  selector: 'sg-banner',\n  standalone: true,\n  imports: [MatIconModule, NgIf],\n  templateUrl: './banner.component.html',\n  styleUrl: './banner.component.scss',\n})\nexport class BannerComponent {\n  /**\n   * the type of banner\n   */\n  @Input() type: BannerType = 'info';\n\n  /**\n   * If the banner shows an icon to dismiss\n   */\n  @Input() dismissible = false;\n\n  /**\n   * the emitter of the dismiss action\n   */\n  @Output() dismiss = new EventEmitter();\n\n  /**\n   * @ignore\n   */\n  readonly icon: Record<BannerType, string> = {\n    info: 'info_filled',\n    warning: 'warning_filled',\n    error: 'error_filled',\n    success: 'error_filled',\n  };\n\n  @HostBinding('class.info')\n  get isPrimary() {\n    return this.type === 'info';\n  }\n\n  @HostBinding('class.warning')\n  get isWarning() {\n    return this.type === 'warning';\n  }\n\n  @HostBinding('class.error')\n  get isError() {\n    return this.type === 'error';\n  }\n\n  @HostBinding('class.success')\n  get isSuccess() {\n    return this.type === 'success';\n  }\n}\n",
            "styleUrl": "./banner.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isPrimary": {
                    "name": "isPrimary",
                    "getSignature": {
                        "name": "isPrimary",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                },
                "isWarning": {
                    "name": "isWarning",
                    "getSignature": {
                        "name": "isWarning",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                },
                "isError": {
                    "name": "isError",
                    "getSignature": {
                        "name": "isError",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                },
                "isSuccess": {
                    "name": "isSuccess",
                    "getSignature": {
                        "name": "isSuccess",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                }
            },
            "templateData": "<mat-icon>{{ icon[type] }}</mat-icon>\n<ng-content></ng-content>\n<mat-icon *ngIf=\"dismissible\" class=\"close\" (click)=\"dismiss.emit()\"\n  >close\n</mat-icon>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-967d68fb72a4a9f4470e94c8643421289f18849ff3207b31624817d0b4cdc527eb7c5c9e67a192cf02dd763e881588aa598f4f9fa629e6baa9c4bc4749bb3aa6",
            "file": "src/styleguide/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[sg-button], a[sg-button]",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hasError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe optional icon used in the button.\nIf blank the button will not have an icon\n",
                    "description": "<p>The optional icon used in the button.\nIf blank the button will not have an icon</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'ghost'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe variant used for the button.\n\n",
                    "description": "<p>The variant used for the button.</p>\n",
                    "line": 25,
                    "type": "ButtonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.ghost-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.has-error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.negative-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.positive-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.primary-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.text-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\nexport type ButtonVariant =\n  | 'primary'\n  | 'ghost'\n  | 'text'\n  | 'negative'\n  | 'positive';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'button[sg-button], a[sg-button]',\n  standalone: true,\n  imports: [CommonModule, MatIconModule],\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n  /**\n   * The variant used for the button.\n   *\n   */\n  @Input() variant: ButtonVariant = 'ghost';\n  /**\n   * The optional icon used in the button.\n   * If blank the button will not have an icon\n   */\n  @Input() icon: string = '';\n\n  @Input() hasError = false;\n\n  @HostBinding('class.ghost-button')\n  get isVariantGhost() {\n    return this.variant === 'ghost';\n  }\n\n  @HostBinding('class.primary-button')\n  get isVariantPrimary() {\n    return this.variant === 'primary';\n  }\n\n  @HostBinding('class.negative-button')\n  get isVariantNegative() {\n    return this.variant === 'negative';\n  }\n\n  @HostBinding('class.text-button')\n  get isVariantText() {\n    return this.variant === 'text';\n  }\n\n  @HostBinding('class.positive-button')\n  get isVariantPositive() {\n    return this.variant === 'positive';\n  }\n\n  @HostBinding('class.has-error')\n  get itHasError() {\n    return this.hasError;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"colors\";\n@import \"mixins\";\n\n\n:host {\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 20px;\n  border-radius: 4px;\n  padding: 12px 12px;\n  cursor: pointer;\n  gap: 8px;\n  text-decoration: none;\n  height: 40px;\n  border: 1px solid transparent;\n  background-color: transparent;\n\n  &.primary-button {\n    color: $color-white;\n    background-color: $color-standard-blue;\n    border-color: $color-standard-blue;\n\n    &:active, &:hover {\n      background-color: $color-main-blue;\n      border-color: $color-main-blue;\n    }\n\n    &:disabled {\n      color: $color-text-gray;\n      border-color: $color-soft-gray;\n      background-color: $color-soft-gray;\n    }\n  }\n\n  &.ghost-button {\n    color: $color-standard-blue;\n    border-color: $color-standard-blue;\n    background-color: $color-white;\n\n\n    &:active, &:hover {\n      color: $color-white;\n      background-color: $color-main-blue;\n      border-color: $color-main-blue;\n    }\n\n\n    &:disabled {\n      color: $color-text-gray;\n      border-color: $color-soft-gray;\n      background-color: $color-soft-gray;\n    }\n  }\n\n  &.negative-button {\n    border-color: $color-error;\n    background-color: $color-error;\n    color: $color-white;\n\n    &:active, &:hover {\n      background: #B40000;\n    }\n\n    &:disabled {\n      color: $color-text-gray;\n      background-color: $color-soft-gray;\n      border-color: $color-soft-gray;\n    }\n  }\n\n  &.text-button {\n    background-color: transparent;\n    border: none;\n    color: $color-standard-blue;\n\n    &:active, &:hover {\n      background-color: $color-soft-gray;\n    }\n\n    &:disabled {\n      color: $color-text-gray;\n    }\n  }\n\n  &.positive-button {\n    border-color: $color-brand-teal;\n    background-color: $color-brand-teal;\n    color: $color-white;\n\n    &:active, &:hover {\n      background: $color-brand-green;\n    }\n\n    &:disabled {\n      color: $color-text-gray;\n      background-color: $color-soft-gray;\n      border-color: $color-soft-gray;\n    }\n  }\n\n\n  &.has-error:not(:disabled) {\n    background-color: white;\n    color: $color-error;\n    border-color: $color-error;\n  }\n\n}\n\n\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isVariantGhost": {
                    "name": "isVariantGhost",
                    "getSignature": {
                        "name": "isVariantGhost",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                },
                "isVariantPrimary": {
                    "name": "isVariantPrimary",
                    "getSignature": {
                        "name": "isVariantPrimary",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                },
                "isVariantNegative": {
                    "name": "isVariantNegative",
                    "getSignature": {
                        "name": "isVariantNegative",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                },
                "isVariantText": {
                    "name": "isVariantText",
                    "getSignature": {
                        "name": "isVariantText",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                },
                "isVariantPositive": {
                    "name": "isVariantPositive",
                    "getSignature": {
                        "name": "isVariantPositive",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                },
                "itHasError": {
                    "name": "itHasError",
                    "getSignature": {
                        "name": "itHasError",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            },
            "templateData": "<mat-icon *ngIf=\"icon\">{{ icon }}</mat-icon>\n<ng-content></ng-content>\n"
        },
        {
            "name": "InputFieldComponent",
            "id": "component-InputFieldComponent-e29e547ffed6840182a65acf65903bf70bc435eaef0ec5acf7183c68c6167ca48743905c195d1a0e7f4c294f8ec33d432ba7e75d47637f900b13ea2abdcd93ec",
            "file": "src/styleguide/input/input-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sg-input-field",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-field.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the input field is disabled. Affects the styles of the whole component.\n",
                    "description": "<p>Determines if the input field is disabled. Affects the styles of the whole component.</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the input field has errors. Affects the styles of the whole component.\n",
                    "description": "<p>Determines if the input field has errors. Affects the styles of the whole component.</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "highlighted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the input field is highlighted. Affects the styles of the whole component.\n",
                    "description": "<p>Determines if the input field is highlighted. Affects the styles of the whole component.</p>\n",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "leadingIcon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon displayed on the left side of the input field.\nUses `mat-icon` library internally\nIf not provided the icon is hidden.\n",
                    "description": "<p>Icon displayed on the left side of the input field.\nUses <code>mat-icon</code> library internally\nIf not provided the icon is hidden.</p>\n",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showSupportMessage",
                    "defaultValue": "'always'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nwhen to show support message\n",
                    "description": "<p>when to show support message</p>\n",
                    "line": 79,
                    "type": "ShowSupportMessage",
                    "decorators": []
                },
                {
                    "name": "suffix",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText to be shown on the right side of the input field.\n",
                    "description": "<p>Text to be shown on the right side of the input field.</p>\n",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "supportMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe help/error message to be displayed below the input field.\n",
                    "description": "<p>The help/error message to be displayed below the input field.</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "trailingIcon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon displayed on the right side of the input field.\nUses `mat-icon` library internally\nIf not provided the icon is hidden.\n",
                    "description": "<p>Icon displayed on the right side of the input field.\nUses <code>mat-icon</code> library internally\nIf not provided the icon is hidden.</p>\n",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputDirective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputDirective",
                    "optional": true,
                    "description": "<p>Reference to the projected sgInput input element</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nReference to the projected sgInput input element\n",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "InputDirective, {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.highlighted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "InputDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Wrapper component for input fields.\nExpects an input[sgInput] element via content projection</p>\n<p>Usage:\n<sg-input-field>\n  &lt;input sgInput ...&gt;\n</sg-input-field></p>\n",
            "rawdescription": "\n\nWrapper component for input fields.\nExpects an input[sgInput] element via content projection\n\nUsage:\n<sg-input-field>\n  <input sgInput ...>\n</sg-input-field>\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\nimport { InputDirective } from './input.directive';\n\nexport type ShowSupportMessage = 'always' | 'on-error' | false;\n\n/**\n * Wrapper component for input fields.\n * Expects an input[sgInput] element via content projection\n *\n * Usage:\n * <sg-input-field>\n *   <input sgInput ...>\n * </sg-input-field>\n */\n@Component({\n  selector: 'sg-input-field',\n  standalone: true,\n  imports: [MatIconModule, CommonModule, InputDirective],\n  templateUrl: './input-field.component.html',\n  styleUrl: './input-field.component.scss',\n})\nexport class InputFieldComponent implements AfterContentInit {\n  /**\n   * Reference to the projected sgInput input element\n   */\n  @ContentChild(InputDirective, { static: false })\n  inputDirective?: InputDirective;\n\n  /**\n   * The help/error message to be displayed below the input field.\n   */\n  @Input() supportMessage = '';\n\n  /**\n   * Icon displayed on the left side of the input field.\n   * Uses `mat-icon` library internally\n   * If not provided the icon is hidden.\n   */\n  @Input() leadingIcon = '';\n\n  /**\n   * Icon displayed on the right side of the input field.\n   * Uses `mat-icon` library internally\n   * If not provided the icon is hidden.\n   */\n  @Input() trailingIcon = '';\n\n  /**\n   * Determines if the input field is disabled. Affects the styles of the whole component.\n   */\n  @Input() disabled = false;\n\n  /**\n   * Determines if the input field has errors. Affects the styles of the whole component.\n   */\n  @Input() error = false;\n\n  /**\n   * Determines if the input field is highlighted. Affects the styles of the whole component.\n   */\n  @Input() highlighted = false;\n\n  /**\n   * Text to be shown on the right side of the input field.\n   */\n  @Input() suffix = '';\n\n  /**\n   * when to show support message\n   */\n  @Input() showSupportMessage: ShowSupportMessage = 'always';\n\n  @HostBinding('class.error')\n  get hasError() {\n    return this.error;\n  }\n\n  @HostBinding('class.disabled')\n  get isDisabled() {\n    return this.disabled;\n  }\n\n  @HostBinding('class.highlighted')\n  get isHighlighted() {\n    return this.highlighted;\n  }\n\n  /**\n   * @ignore\n   * This checks that when using this component we have an input with sgInput via ngContent\n   */\n  ngAfterContentInit() {\n    if (!this.inputDirective) {\n      throw new Error(\n        'The projected content must include an <input> element with the sgInput directive.'\n      );\n    }\n  }\n\n  get displaysSupportMessage() {\n    return (\n      this.showSupportMessage === 'always' ||\n      (this.showSupportMessage === 'on-error' && this.error)\n    );\n  }\n\n  /**\n   * @ignore\n   */\n  focusInput(): void {\n    this.inputDirective?.focus();\n  }\n}\n",
            "styleUrl": "./input-field.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterContentInit"
            ],
            "accessors": {
                "hasError": {
                    "name": "hasError",
                    "getSignature": {
                        "name": "hasError",
                        "type": "",
                        "returnType": "",
                        "line": 82
                    }
                },
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 87
                    }
                },
                "isHighlighted": {
                    "name": "isHighlighted",
                    "getSignature": {
                        "name": "isHighlighted",
                        "type": "",
                        "returnType": "",
                        "line": 92
                    }
                },
                "displaysSupportMessage": {
                    "name": "displaysSupportMessage",
                    "getSignature": {
                        "name": "displaysSupportMessage",
                        "type": "",
                        "returnType": "",
                        "line": 108
                    }
                }
            },
            "templateData": "<div class=\"input-wrapper\" (click)=\"focusInput()\">\n  <mat-icon *ngIf=\"leadingIcon\">{{ leadingIcon }}</mat-icon>\n  <ng-content></ng-content>\n  <span *ngIf=\"suffix && !trailingIcon\" class=\"suffix\">{{ suffix }}</span>\n  <mat-icon *ngIf=\"trailingIcon\">{{ trailingIcon }}</mat-icon>\n</div>\n<div class=\"support-msg\" *ngIf=\"displaysSupportMessage\">\n  {{ supportMessage }}\n</div>\n"
        },
        {
            "name": "StatusChipComponent",
            "id": "component-StatusChipComponent-2b86b4ec02ea586989a688f308c425033d867782f2d7a548a8d410071345f96b04847a74cd077844dc90b6a480f8169359da251fc8236e2f9d2e067b91b4ca13",
            "file": "src/styleguide/status-chip/status-chip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sg-status-chip",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./status-chip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional label\n",
                    "description": "<p>Optional label</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "status",
                    "defaultValue": "'inProgress'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe status\n",
                    "description": "<p>The status</p>\n",
                    "line": 21,
                    "type": "StatusChipStatus",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.failed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.in-progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.running",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgSwitch"
                }
            ],
            "description": "<p>Status chip to display status inline.\nTakes optional label or displays the status styled accordingly.</p>\n",
            "rawdescription": "\n\nStatus chip to display status inline.\nTakes optional label or displays the status styled accordingly.\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\nimport { NgIf, NgSwitch } from '@angular/common';\n\nexport type StatusChipStatus = 'inProgress' | 'success' | 'failed' | 'running';\n\n/**\n * Status chip to display status inline.\n * Takes optional label or displays the status styled accordingly.\n */\n@Component({\n  selector: 'sg-status-chip',\n  standalone: true,\n  imports: [NgIf, NgSwitch],\n  templateUrl: './status-chip.component.html',\n  styleUrl: './status-chip.component.scss',\n})\nexport class StatusChipComponent {\n  /**\n   * The status\n   */\n  @Input() status: StatusChipStatus = 'inProgress';\n  /**\n   * Optional label\n   */\n  @Input() label? = '';\n\n  /**\n   * @ignore\n   */\n  readonly defaultTextByStatus: Record<StatusChipStatus, string> = {\n    inProgress: 'In Progress',\n    success: 'Success',\n    failed: 'Failed',\n    running: 'Running',\n  };\n\n  @HostBinding('class.in-progress')\n  get isInProgress() {\n    return this.status === 'inProgress';\n  }\n\n  @HostBinding('class.success')\n  get isSuccess() {\n    return this.status === 'success';\n  }\n\n  @HostBinding('class.failed')\n  get isFailed() {\n    return this.status === 'failed';\n  }\n\n  @HostBinding('class.running')\n  get isRunning() {\n    return this.status === 'running';\n  }\n}\n",
            "styleUrl": "./status-chip.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isInProgress": {
                    "name": "isInProgress",
                    "getSignature": {
                        "name": "isInProgress",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "isSuccess": {
                    "name": "isSuccess",
                    "getSignature": {
                        "name": "isSuccess",
                        "type": "",
                        "returnType": "",
                        "line": 43
                    }
                },
                "isFailed": {
                    "name": "isFailed",
                    "getSignature": {
                        "name": "isFailed",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                },
                "isRunning": {
                    "name": "isRunning",
                    "getSignature": {
                        "name": "isRunning",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"label; else defaultByStatus\">\n  {{ label }}\n</ng-container>\n<ng-template #defaultByStatus>{{ defaultTextByStatus[status] }}</ng-template>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [],
        "functions": [],
        "typealiases": [
            {
                "name": "BannerType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"info\" | \"warning\" | \"error\" | \"success\"",
                "file": "src/styleguide/banner/banner.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"ghost\" | \"text\" | \"negative\" | \"positive\"",
                "file": "src/styleguide/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ShowSupportMessage",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"always\" | \"on-error\" | ",
                "file": "src/styleguide/input/input-field.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "StatusChipStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"inProgress\" | \"success\" | \"failed\" | \"running\"",
                "file": "src/styleguide/status-chip/status-chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {},
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/styleguide/banner/banner.component.ts": [
                {
                    "name": "BannerType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"info\" | \"warning\" | \"error\" | \"success\"",
                    "file": "src/styleguide/banner/banner.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/styleguide/button/button.component.ts": [
                {
                    "name": "ButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"ghost\" | \"text\" | \"negative\" | \"positive\"",
                    "file": "src/styleguide/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/styleguide/input/input-field.component.ts": [
                {
                    "name": "ShowSupportMessage",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"always\" | \"on-error\" | ",
                    "file": "src/styleguide/input/input-field.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/styleguide/status-chip/status-chip.component.ts": [
                {
                    "name": "StatusChipStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"inProgress\" | \"success\" | \"failed\" | \"running\"",
                    "file": "src/styleguide/status-chip/status-chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 35,
        "status": "medium",
        "files": [
            {
                "filePath": "src/styleguide/banner/banner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BannerComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/styleguide/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 20,
                "coverageCount": "2/10",
                "status": "low"
            },
            {
                "filePath": "src/styleguide/input/input-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputFieldComponent",
                "coveragePercent": 76,
                "coverageCount": "10/13",
                "status": "very-good"
            },
            {
                "filePath": "src/styleguide/input/input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "InputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/styleguide/status-chip/status-chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusChipComponent",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            }
        ]
    }
}