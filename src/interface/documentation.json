{
    "pipes": [
        {
            "name": "CurrencyInKPipe",
            "id": "pipe-CurrencyInKPipe-a519323b77517f2f422f908a8197134ef420e478ec30f34a835d22dc1efeec84a61df5ba303bd85f880ed732127b10e478492ed392ca2127a98007b61d3487d7",
            "file": "src/app/pipes/currency-in-k.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Todo, should this return 1M or 1,000K ?\nUpdate tests and name accordingly</p>\n",
            "rawdescription": "\n\nTodo, should this return 1M or 1,000K ?\nUpdate tests and name accordingly\n",
            "properties": [
                {
                    "name": "currencyPipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrencyPipe",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "denominator",
                    "defaultValue": "'K'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "digits",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0-2'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "digits",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0-2'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "currencyInK",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { CurrencyPipe } from '@angular/common';\n\n/**\n * Todo, should this return 1M or 1,000K ?\n * Update tests and name accordingly\n */\n@Pipe({\n  name: 'currencyInK',\n})\nexport class CurrencyInKPipe implements PipeTransform {\n  readonly denominator = 'K';\n  constructor(public currencyPipe: CurrencyPipe) {}\n\n  transform(value: number, digits = '1.0-2'): string | null {\n    if (!value) {\n      return '$0';\n    }\n    return (\n      this.currencyPipe.transform(value / 1000, 'USD', 'symbol', digits) +\n      this.denominator\n    );\n  }\n}\n"
        },
        {
            "name": "StringifyMapConfigPipe",
            "id": "pipe-StringifyMapConfigPipe-bd9e9d69da6c94d6c950624d9f1348fbd027f5b8e3afa4cf45b37b62896a2e7d2645520ac4dccc9b09e36e8659d2992a2de9aa5016f1691d18482bdea04cee58",
            "file": "src/app/stringify-map-config.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "mapConfig",
                            "type": "MapConfig | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mapConfig",
                            "type": "MapConfig | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": false,
            "ngname": "stringifyMapConfig",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { MapConfig } from './types';\n\n/*\n *  Transforms a MapConfig object into a human-readable string\n *  for display at the bottom of a Leaflet map.\n */\n@Pipe({\n  name: 'stringifyMapConfig',\n  pure: false,\n})\nexport class StringifyMapConfigPipe implements PipeTransform {\n  transform(mapConfig: MapConfig | undefined): string {\n    if (!mapConfig) {\n      return '';\n    }\n\n    let str: string = '';\n    let labels: string[] = [];\n\n    if (\n      !!mapConfig.dataLayerConfig.display_name &&\n      mapConfig.dataLayerConfig.display_name.length > 0 &&\n      mapConfig.dataLayerConfig.display_name != 'None'\n    ) {\n      let dataLabel = mapConfig.dataLayerConfig.display_name;\n      if (mapConfig.dataLayerConfig.normalized) {\n        dataLabel = dataLabel.concat(' (Normalized)');\n      }\n      labels.push(dataLabel);\n    }\n    if (mapConfig.showExistingProjectsLayer) {\n      labels.push('Existing Projects');\n    }\n    if (\n      !!mapConfig.boundaryLayerConfig.boundary_name &&\n      mapConfig.boundaryLayerConfig.boundary_name.length > 0\n    ) {\n      let boundaryLabel = mapConfig.boundaryLayerConfig.display_name\n        ? mapConfig.boundaryLayerConfig.display_name\n        : mapConfig.boundaryLayerConfig.boundary_name;\n      labels.push(boundaryLabel);\n    }\n    labels.forEach((label, index) => {\n      if (index > 0) {\n        str = str.concat(' | ');\n      }\n      str = str.concat(label);\n    });\n    return str;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "BackendProjectArea",
            "id": "interface-BackendProjectArea-99047d95c80b6fe19df0e845afca424adf15eb0a629d85388c1e01e4f938f2221e3929f362361eaba1bf1661d1a5a112fb43ab5325541246f22770290f8440e4",
            "file": "src/app/types/plan.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Region } from './region.types';\n\nexport interface Plan {\n  area_acres: number;\n  area_m2: number;\n  created_at: string;\n  creator: string;\n  geometry?: GeoJSON.GeoJSON;\n  id: number;\n  latest_updated?: string;\n  name: string;\n  notes?: string;\n  permissions: string[];\n  region_name: Region;\n  role: string;\n  scenario_count: number;\n  user: number;\n}\n\nexport type PreviewPlan = Omit<Plan, 'geometry' | 'area_m2'>;\n\nexport interface CreatePlanPayload {\n  geometry: GeoJSON.GeoJSON;\n  name: string;\n  region_name: Region;\n}\n\nexport interface BackendProjectArea {\n  id: number;\n  geometry: GeoJSON.GeoJSON;\n  properties?: {\n    estimated_area_treated?: number;\n    owner?: number;\n    project?: number;\n  };\n}\n",
            "properties": [
                {
                    "name": "geometry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GeoJSON.GeoJSON",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "properties",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoundaryConfig",
            "id": "interface-BoundaryConfig-a8c380f17d030be2614817d9a6996ef6e0c433977d57302bace0c5b7272bcca27c3ee7177c1f4daadf67130088a401cd20a6fda282152df3e379bbda503ac815",
            "file": "src/app/types/data.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NONE_COLORMAP } from './legend.types';\n\nexport interface BoundaryConfig {\n  display_name?: string;\n  boundary_name: string;\n  vector_name: string;\n  shape_name: string;\n  region_name?: string;\n}\n\nexport interface ConditionsConfig extends DataLayerConfig {\n  region_name?: string;\n  region_geoserver_name?: string;\n  pillars?: PillarConfig[];\n  raw_data?: boolean;\n  translated_data?: boolean;\n  future_data?: boolean;\n}\n\nexport interface ConditionsMetadata {\n  data_download_link?: string;\n  data_provider?: string;\n  data_year?: string;\n  reference_link?: string;\n  source?: string;\n  source_link?: string;\n  min_value?: number;\n  max_value?: number;\n}\n\nexport interface DataLayerConfig extends ConditionsMetadata {\n  display_name?: string;\n  legend_name?: string;\n  data_units?: string;\n  region_geoserver_name?: string;\n  filepath?: string;\n  normalized_data_download_path?: string;\n  layer?: string;\n  raw_layer?: string;\n  normalized_layer?: string;\n  colormap?: string;\n  normalized?: boolean;\n  opacity?: number;\n}\n\nexport interface ElementConfig extends DataLayerConfig {\n  display?: boolean;\n  element_name?: string;\n  metrics?: MetricConfig[];\n}\n\nexport interface MetricConfig extends DataLayerConfig {\n  metric_name: string;\n  data_units?: string;\n  raw_data_download_path?: string;\n}\n\nexport interface PillarConfig extends DataLayerConfig {\n  display?: boolean;\n  pillar_name?: string;\n  elements?: ElementConfig[];\n  future_layer?: string;\n  future_data_download_path?: string;\n}\n\nexport enum ConditionTreeType {\n  RAW = 'Raw',\n  TRANSLATED = 'Translated',\n  FUTURE = 'Future',\n}\n\nexport const NONE_BOUNDARY_CONFIG: BoundaryConfig = {\n  boundary_name: '',\n  display_name: 'None',\n  vector_name: '',\n  shape_name: 'None',\n};\n\nexport const NONE_DATA_LAYER_CONFIG: DataLayerConfig = {\n  display_name: 'None',\n  filepath: '',\n  layer: '',\n  colormap: NONE_COLORMAP,\n};\n\nexport enum FormMessageType {\n  SUCCESS,\n  ERROR,\n  ALERT,\n}\n",
            "properties": [
                {
                    "name": "boundary_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "region_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "shape_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "vector_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Breadcrumb",
            "id": "interface-Breadcrumb-e79bab0e5c81077230c768b8857ba55ed5bd97577ec68b33bcad886ea119b470a9121acd9230cba15a299511613fc84833ddc1184e739e87049e31e0230acde0",
            "file": "src/app/shared/nav-bar/nav-bar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { WINDOW } from '@services/window.service';\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\nimport { ShareExploreDialogComponent } from '../share-explore-dialog/share-explore-dialog.component';\nimport { SharePlanDialogComponent } from '../../home/share-plan-dialog/share-plan-dialog.component';\nimport { FeatureService } from '../../features/feature.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { map, of } from 'rxjs';\nimport { PlanStateService } from '@services';\nimport { canViewCollaborators } from '../../plan/permissions';\n\nexport interface Breadcrumb {\n  name: string;\n  path?: string;\n}\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.scss'],\n})\nexport class NavBarComponent {\n  @Input() breadcrumbs: Breadcrumb[] = [];\n  @Input() area: 'SCENARIOS' | 'EXPLORE' | 'SCENARIO' = 'EXPLORE';\n  @Output() goBack = new EventEmitter<void>();\n\n  hasSharePlanFeatureFlag =\n    this.featureService.isFeatureEnabled('show_share_modal');\n\n  canSharePlan$ =\n    this.route.snapshot?.params && this.route.snapshot?.params['id']\n      ? this.planStateService\n          .getPlan(this.route.snapshot.params['id'])\n          .pipe(map((plan) => canViewCollaborators(plan)))\n      : of(false);\n\n  constructor(\n    @Inject(WINDOW) private window: Window,\n    private dialog: MatDialog,\n    private featureService: FeatureService,\n    private route: ActivatedRoute,\n    private planStateService: PlanStateService\n  ) {}\n\n  print() {\n    this.window.print();\n  }\n\n  share() {\n    this.dialog.open(ShareExploreDialogComponent, { restoreFocus: false });\n  }\n\n  sharePlan() {\n    this.dialog.open(SharePlanDialogComponent, {\n      data: {\n        planningAreaName: '\"' + this.breadcrumbs[0].name + '\"',\n        planningAreaId: this.route.snapshot.params['id'],\n      },\n      restoreFocus: false,\n      panelClass: 'no-padding-dialog',\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ChartData",
            "id": "interface-ChartData-c9a502dc4ef031da26571025bde4cdb42fc4d75342f79c3802819b454b500231510aa54fcf95283cd04a0aea5435f00760c0f6b05afcdb6f8b0223a64198f7b8",
            "file": "src/app/plan/project-areas-metrics/chart-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ChartData {\n  label: string;\n  measurement: string;\n  key: string;\n  values: number[];\n  metric_layer: string;\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "measurement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "metric_layer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ColormapConfig",
            "id": "interface-ColormapConfig-e4aea37734c365289aa4c1ed22c227c198b44fa0e7cbbe8b87909c9c060d049ab08d9522c69bb4b36895a4a47a68de60f804daa53b9f1ca10e5707d9bc1fbd03",
            "file": "src/app/types/legend.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const DEFAULT_COLORMAP = 'turbo';\nexport const NONE_COLORMAP = 'none';\n\nexport interface ColormapConfig {\n  name?: string;\n  values?: ColormapValue[];\n}\n\nexport interface ColormapValue {\n  name?: string;\n  percentile?: number;\n  rgb?: string;\n}\n\nexport interface Legend {\n  colors?: string[];\n  labels?: string[];\n  minMaxValues?: number[];\n  secondaryLabels?: string[];\n}\n\n/** Convert a colormap to a legend object. */\nexport function colormapConfigToLegend(\n  colormap: ColormapConfig,\n  minMaxValues?: number[]\n): Legend | undefined {\n  const sortedValues = colormap.values?.sort((valueA, valueB) => {\n    if (valueA?.percentile != undefined && valueB?.percentile != undefined) {\n      return valueA.percentile - valueB.percentile;\n    }\n    return 0;\n  });\n  return {\n    colors: sortedValues?.map((value) => (!!value.rgb ? value.rgb : '')),\n    labels: sortedValues?.map((value) => (!!value.name ? value.name : '')),\n    minMaxValues: minMaxValues,\n  };\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColormapValue[]",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ColormapValue",
            "id": "interface-ColormapValue-e4aea37734c365289aa4c1ed22c227c198b44fa0e7cbbe8b87909c9c060d049ab08d9522c69bb4b36895a4a47a68de60f804daa53b9f1ca10e5707d9bc1fbd03",
            "file": "src/app/types/legend.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const DEFAULT_COLORMAP = 'turbo';\nexport const NONE_COLORMAP = 'none';\n\nexport interface ColormapConfig {\n  name?: string;\n  values?: ColormapValue[];\n}\n\nexport interface ColormapValue {\n  name?: string;\n  percentile?: number;\n  rgb?: string;\n}\n\nexport interface Legend {\n  colors?: string[];\n  labels?: string[];\n  minMaxValues?: number[];\n  secondaryLabels?: string[];\n}\n\n/** Convert a colormap to a legend object. */\nexport function colormapConfigToLegend(\n  colormap: ColormapConfig,\n  minMaxValues?: number[]\n): Legend | undefined {\n  const sortedValues = colormap.values?.sort((valueA, valueB) => {\n    if (valueA?.percentile != undefined && valueB?.percentile != undefined) {\n      return valueA.percentile - valueB.percentile;\n    }\n    return 0;\n  });\n  return {\n    colors: sortedValues?.map((value) => (!!value.rgb ? value.rgb : '')),\n    labels: sortedValues?.map((value) => (!!value.name ? value.name : '')),\n    minMaxValues: minMaxValues,\n  };\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "percentile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "rgb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConditionFlatNode",
            "id": "interface-ConditionFlatNode-047322082b7fee417a27bc8adbcf4414a76f5f96ce2fa571cfc250682ec9dd7960aa4d868533c220ea4b2174d412f11a315cf2ebbc2ce753301b9768b8bd7ad8",
            "file": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FlatTreeControl } from '@angular/cdk/tree';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n} from '@angular/material/tree';\nimport { filter, Observable, map } from 'rxjs';\nimport {\n  DataLayerConfig,\n  Map,\n  NONE_DATA_LAYER_CONFIG,\n  ConditionsConfig,\n  ConditionTreeType,\n} from 'src/app/types';\nimport { BackendConstants } from './../../../backend-constants';\n\nexport interface ConditionsNode extends DataLayerConfig {\n  children?: ConditionsNode[];\n  disableSelect?: boolean; // Node should not include a radio button\n  disableInfoCard?: boolean; // Node should not have an info button\n}\n\n/** Map Legend Display Strings */\nconst CURRENT_CONDITIONS_RAW_LEGEND = 'Current Condition (Raw)';\nconst CURRENT_CONDITIONS_NORMALIZED_LEGEND = 'Current Condition (Normalized)';\nconst FUTURE_CONDITIONS_LEGEND = 'Future Climate Stability (Normalized)';\n\ninterface ConditionFlatNode {\n  expandable: boolean;\n  level: number;\n  condition: ConditionsNode;\n  infoMenuOpen?: boolean;\n  styleDisabled?: boolean; // Node should be greyed out but still selectable\n  styleDescendantSelected?: boolean; // Node should have a dot indicator\n}\n\n@Component({\n  selector: 'app-condition-tree',\n  templateUrl: './condition-tree.component.html',\n  styleUrls: ['./condition-tree.component.scss'],\n})\nexport class ConditionTreeComponent implements OnInit {\n  @Input() conditionsConfig$!: Observable<ConditionsConfig | null>;\n  @Input() header: string = '';\n  @Input() dataType!: ConditionTreeType;\n  @Input() map!: Map;\n\n  @Output() changeConditionLayer = new EventEmitter<Map>();\n\n  private _transformer = (node: ConditionsNode, level: number) => {\n    return {\n      expandable: !!node!.children && node!.children.length > 0,\n      level: level,\n      condition: node,\n    };\n  };\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children\n  );\n\n  treeControl = new FlatTreeControl<ConditionFlatNode>(\n    (node) => node!.level,\n    (node) => node!.expandable\n  );\n  conditionDataSource = new MatTreeFlatDataSource(\n    this.treeControl,\n    this.treeFlattener\n  );\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.dataType == ConditionTreeType.RAW) {\n      this.conditionsConfig$\n        .pipe(\n          filter((config) => !!config),\n          map((config) => this.conditionsConfigToDataRaw(config!))\n        )\n        .subscribe((data) => {\n          this.conditionDataSource.data = data;\n          this.map.config.dataLayerConfig = this.findAndRevealNode(\n            this.map.config.dataLayerConfig\n          );\n        });\n    } else if (this.dataType == ConditionTreeType.TRANSLATED) {\n      this.conditionsConfig$\n        .pipe(\n          filter((config) => !!config),\n          map((config) => this.conditionsConfigToDataNormalized(config!))\n        )\n        .subscribe((data) => {\n          this.conditionDataSource.data = data;\n          this.map.config.dataLayerConfig = this.findAndRevealNode(\n            this.map.config.dataLayerConfig\n          );\n        });\n    } else if (this.dataType == ConditionTreeType.FUTURE) {\n      this.conditionsConfig$\n        .pipe(\n          filter((config) => !!config),\n          map((config) => this.conditionsConfigToDataFuture(config!))\n        )\n        .subscribe((data) => {\n          this.conditionDataSource.data = data;\n          this.map.config.dataLayerConfig = this.findAndRevealNode(\n            this.map.config.dataLayerConfig\n          );\n        });\n    }\n  }\n\n  /** Used to compute whether a node in the condition layer tree has children. */\n  hasChild = (_: number, node: ConditionFlatNode) => node.expandable;\n\n  onSelect(node: ConditionFlatNode): void {\n    this.unstyleAndDeselectAllNodes();\n    this.styleDescendantsDisabled(node);\n    this.styleAncestorsSelected(node);\n  }\n\n  /** Unstyles and deselects all nodes. */\n  unstyleAndDeselectAllNodes(): void {\n    this.treeControl.dataNodes.forEach((dataNode) => {\n      dataNode.styleDisabled = false;\n      dataNode.styleDescendantSelected = false;\n    });\n  }\n\n  /** Visually indicates that all the descendants of a condition layer node are\n   *  included in the current analysis by setting their style.\n   */\n  private styleDescendantsDisabled(node: ConditionFlatNode): void {\n    this.treeControl.getDescendants(node).forEach((descendant) => {\n      descendant.styleDisabled = true;\n    });\n  }\n\n  /** Find and style all the ancestors of a given node in the tree recursively. */\n  private styleAncestorsSelected(node: ConditionFlatNode): void {\n    const nodeLevel = node.level;\n    const nodeIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n    // Iterate over nodes in reverse order starting from the node preceding\n    // the given node.\n    for (let index = nodeIndex; index >= 0; index--) {\n      const currentNode = this.treeControl.dataNodes[index];\n      if (currentNode.level < nodeLevel) {\n        currentNode.styleDescendantSelected = true;\n        this.styleAncestorsSelected(currentNode);\n        break;\n      }\n    }\n  }\n\n  /** Find the node matching the given config in the condition tree (if any), and expand its ancestors\n   *  so it becomes visible.\n   */\n  private findAndRevealNode(config: DataLayerConfig): ConditionsNode {\n    if (!config.layer || config.layer === NONE_DATA_LAYER_CONFIG.layer)\n      return NONE_DATA_LAYER_CONFIG;\n    for (let node of this.treeControl.dataNodes) {\n      var node_layer = '';\n      if (node.condition.region_geoserver_name) {\n        node_layer =\n          node.condition.region_geoserver_name + node.condition.layer;\n      }\n      if (node_layer === node.condition.region_geoserver_name + config.layer) {\n        this.expandAncestors(node);\n        this.onSelect(node);\n        return node.condition;\n      }\n    }\n    return config;\n  }\n\n  /** Find and expand all the ancestors of a given node in the tree recursively. */\n  private expandAncestors(node: ConditionFlatNode): void {\n    const nodeLevel = node.level;\n    const nodeIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n    // Iterate over nodes in reverse order starting from the node preceding\n    // the given node.\n    for (let index = nodeIndex; index >= 0; index--) {\n      const currentNode = this.treeControl.dataNodes[index];\n      if (currentNode.level < nodeLevel) {\n        this.treeControl.expand(currentNode);\n        this.expandAncestors(currentNode);\n        break;\n      }\n    }\n  }\n\n  /** Raw data is selectable only at the metric level.\n   */\n  private conditionsConfigToDataRaw(\n    config: ConditionsConfig\n  ): ConditionsNode[] {\n    return config.pillars\n      ? config.pillars\n          ?.filter((pillar) => pillar.display)\n          .map((pillar): ConditionsNode => {\n            return {\n              ...pillar,\n              disableSelect: true,\n              disableInfoCard: true,\n              legend_name: CURRENT_CONDITIONS_RAW_LEGEND,\n              normalized: false,\n              children: pillar.elements\n                ?.filter((element) => element.display)\n                .map((element): ConditionsNode => {\n                  return {\n                    ...element,\n                    disableSelect: true,\n                    disableInfoCard: true,\n                    legend_name: CURRENT_CONDITIONS_RAW_LEGEND,\n                    normalized: false,\n                    children: element.metrics?.map((metric): ConditionsNode => {\n                      return {\n                        ...metric,\n                        layer: metric.raw_layer,\n                        region_geoserver_name: config.region_geoserver_name,\n                        legend_name: CURRENT_CONDITIONS_RAW_LEGEND,\n                        normalized: false,\n                        data_download_link: metric.raw_data_download_path\n                          ? BackendConstants.DOWNLOAD_END_POINT +\n                            '/' +\n                            metric.raw_data_download_path\n                          : metric.data_download_link,\n                      };\n                    }),\n                  };\n                }),\n            };\n          })\n      : [];\n  }\n\n  /** Normalized configs are selectable at every level (pillar, element, metric).\n   */\n  private conditionsConfigToDataNormalized(\n    config: ConditionsConfig\n  ): ConditionsNode[] {\n    return config.pillars\n      ? config.pillars\n          ?.filter((pillar) => pillar.display)\n          .map((pillar): ConditionsNode => {\n            return {\n              ...pillar,\n              layer: pillar.normalized_layer,\n              region_geoserver_name: config.region_geoserver_name,\n              data_download_link: pillar.normalized_data_download_path\n                ? BackendConstants.DOWNLOAD_END_POINT +\n                  '/' +\n                  pillar.normalized_data_download_path\n                : undefined,\n              legend_name: CURRENT_CONDITIONS_NORMALIZED_LEGEND,\n              normalized: true,\n              children: pillar.elements?.map((element): ConditionsNode => {\n                return {\n                  ...element,\n                  layer: element.normalized_layer,\n                  region_geoserver_name: config.region_geoserver_name,\n                  data_download_link: element.normalized_data_download_path\n                    ? BackendConstants.DOWNLOAD_END_POINT +\n                      '/' +\n                      element.normalized_data_download_path\n                    : undefined,\n                  legend_name: CURRENT_CONDITIONS_NORMALIZED_LEGEND,\n                  normalized: true,\n                  min_value: undefined,\n                  max_value: undefined,\n                  children: element.metrics?.map((metric): ConditionsNode => {\n                    return {\n                      ...metric,\n                      layer: metric.normalized_layer,\n                      region_geoserver_name: config.region_geoserver_name,\n                      data_download_link: metric.normalized_data_download_path\n                        ? BackendConstants.DOWNLOAD_END_POINT +\n                          '/' +\n                          metric.normalized_data_download_path\n                        : metric.data_download_link,\n                      legend_name: CURRENT_CONDITIONS_NORMALIZED_LEGEND,\n                      normalized: true,\n                      min_value: undefined,\n                      max_value: undefined,\n                    };\n                  }),\n                };\n              }),\n            };\n          })\n      : [];\n  }\n\n  /** Future configs are selectable and viewable only at the pillar level.\n   */\n  private conditionsConfigToDataFuture(\n    config: ConditionsConfig\n  ): ConditionsNode[] {\n    return config.pillars\n      ? config.pillars\n          ?.filter((pillar) => pillar.display)\n          .map((pillar): ConditionsNode => {\n            return {\n              ...pillar,\n              data_download_link: pillar.future_data_download_path\n                ? BackendConstants.DOWNLOAD_END_POINT +\n                  '/' +\n                  pillar.future_data_download_path\n                : pillar.data_download_link,\n              layer: pillar.future_layer,\n              region_geoserver_name: config.region_geoserver_name,\n              legend_name: FUTURE_CONDITIONS_LEGEND,\n              normalized: true,\n              children: [],\n            };\n          })\n      : [];\n  }\n}\n",
            "properties": [
                {
                    "name": "condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConditionsNode",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "expandable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "infoMenuOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "styleDescendantSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "styleDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConditionsConfig",
            "id": "interface-ConditionsConfig-a8c380f17d030be2614817d9a6996ef6e0c433977d57302bace0c5b7272bcca27c3ee7177c1f4daadf67130088a401cd20a6fda282152df3e379bbda503ac815",
            "file": "src/app/types/data.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NONE_COLORMAP } from './legend.types';\n\nexport interface BoundaryConfig {\n  display_name?: string;\n  boundary_name: string;\n  vector_name: string;\n  shape_name: string;\n  region_name?: string;\n}\n\nexport interface ConditionsConfig extends DataLayerConfig {\n  region_name?: string;\n  region_geoserver_name?: string;\n  pillars?: PillarConfig[];\n  raw_data?: boolean;\n  translated_data?: boolean;\n  future_data?: boolean;\n}\n\nexport interface ConditionsMetadata {\n  data_download_link?: string;\n  data_provider?: string;\n  data_year?: string;\n  reference_link?: string;\n  source?: string;\n  source_link?: string;\n  min_value?: number;\n  max_value?: number;\n}\n\nexport interface DataLayerConfig extends ConditionsMetadata {\n  display_name?: string;\n  legend_name?: string;\n  data_units?: string;\n  region_geoserver_name?: string;\n  filepath?: string;\n  normalized_data_download_path?: string;\n  layer?: string;\n  raw_layer?: string;\n  normalized_layer?: string;\n  colormap?: string;\n  normalized?: boolean;\n  opacity?: number;\n}\n\nexport interface ElementConfig extends DataLayerConfig {\n  display?: boolean;\n  element_name?: string;\n  metrics?: MetricConfig[];\n}\n\nexport interface MetricConfig extends DataLayerConfig {\n  metric_name: string;\n  data_units?: string;\n  raw_data_download_path?: string;\n}\n\nexport interface PillarConfig extends DataLayerConfig {\n  display?: boolean;\n  pillar_name?: string;\n  elements?: ElementConfig[];\n  future_layer?: string;\n  future_data_download_path?: string;\n}\n\nexport enum ConditionTreeType {\n  RAW = 'Raw',\n  TRANSLATED = 'Translated',\n  FUTURE = 'Future',\n}\n\nexport const NONE_BOUNDARY_CONFIG: BoundaryConfig = {\n  boundary_name: '',\n  display_name: 'None',\n  vector_name: '',\n  shape_name: 'None',\n};\n\nexport const NONE_DATA_LAYER_CONFIG: DataLayerConfig = {\n  display_name: 'None',\n  filepath: '',\n  layer: '',\n  colormap: NONE_COLORMAP,\n};\n\nexport enum FormMessageType {\n  SUCCESS,\n  ERROR,\n  ALERT,\n}\n",
            "properties": [
                {
                    "name": "future_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pillars",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PillarConfig[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "raw_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "region_geoserver_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "region_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "translated_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "DataLayerConfig"
            ]
        },
        {
            "name": "ConditionsMetadata",
            "id": "interface-ConditionsMetadata-a8c380f17d030be2614817d9a6996ef6e0c433977d57302bace0c5b7272bcca27c3ee7177c1f4daadf67130088a401cd20a6fda282152df3e379bbda503ac815",
            "file": "src/app/types/data.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NONE_COLORMAP } from './legend.types';\n\nexport interface BoundaryConfig {\n  display_name?: string;\n  boundary_name: string;\n  vector_name: string;\n  shape_name: string;\n  region_name?: string;\n}\n\nexport interface ConditionsConfig extends DataLayerConfig {\n  region_name?: string;\n  region_geoserver_name?: string;\n  pillars?: PillarConfig[];\n  raw_data?: boolean;\n  translated_data?: boolean;\n  future_data?: boolean;\n}\n\nexport interface ConditionsMetadata {\n  data_download_link?: string;\n  data_provider?: string;\n  data_year?: string;\n  reference_link?: string;\n  source?: string;\n  source_link?: string;\n  min_value?: number;\n  max_value?: number;\n}\n\nexport interface DataLayerConfig extends ConditionsMetadata {\n  display_name?: string;\n  legend_name?: string;\n  data_units?: string;\n  region_geoserver_name?: string;\n  filepath?: string;\n  normalized_data_download_path?: string;\n  layer?: string;\n  raw_layer?: string;\n  normalized_layer?: string;\n  colormap?: string;\n  normalized?: boolean;\n  opacity?: number;\n}\n\nexport interface ElementConfig extends DataLayerConfig {\n  display?: boolean;\n  element_name?: string;\n  metrics?: MetricConfig[];\n}\n\nexport interface MetricConfig extends DataLayerConfig {\n  metric_name: string;\n  data_units?: string;\n  raw_data_download_path?: string;\n}\n\nexport interface PillarConfig extends DataLayerConfig {\n  display?: boolean;\n  pillar_name?: string;\n  elements?: ElementConfig[];\n  future_layer?: string;\n  future_data_download_path?: string;\n}\n\nexport enum ConditionTreeType {\n  RAW = 'Raw',\n  TRANSLATED = 'Translated',\n  FUTURE = 'Future',\n}\n\nexport const NONE_BOUNDARY_CONFIG: BoundaryConfig = {\n  boundary_name: '',\n  display_name: 'None',\n  vector_name: '',\n  shape_name: 'None',\n};\n\nexport const NONE_DATA_LAYER_CONFIG: DataLayerConfig = {\n  display_name: 'None',\n  filepath: '',\n  layer: '',\n  colormap: NONE_COLORMAP,\n};\n\nexport enum FormMessageType {\n  SUCCESS,\n  ERROR,\n  ALERT,\n}\n",
            "properties": [
                {
                    "name": "data_download_link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "data_provider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "data_year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "max_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "min_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "reference_link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "source_link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConditionsNode",
            "id": "interface-ConditionsNode-047322082b7fee417a27bc8adbcf4414a76f5f96ce2fa571cfc250682ec9dd7960aa4d868533c220ea4b2174d412f11a315cf2ebbc2ce753301b9768b8bd7ad8",
            "file": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FlatTreeControl } from '@angular/cdk/tree';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n} from '@angular/material/tree';\nimport { filter, Observable, map } from 'rxjs';\nimport {\n  DataLayerConfig,\n  Map,\n  NONE_DATA_LAYER_CONFIG,\n  ConditionsConfig,\n  ConditionTreeType,\n} from 'src/app/types';\nimport { BackendConstants } from './../../../backend-constants';\n\nexport interface ConditionsNode extends DataLayerConfig {\n  children?: ConditionsNode[];\n  disableSelect?: boolean; // Node should not include a radio button\n  disableInfoCard?: boolean; // Node should not have an info button\n}\n\n/** Map Legend Display Strings */\nconst CURRENT_CONDITIONS_RAW_LEGEND = 'Current Condition (Raw)';\nconst CURRENT_CONDITIONS_NORMALIZED_LEGEND = 'Current Condition (Normalized)';\nconst FUTURE_CONDITIONS_LEGEND = 'Future Climate Stability (Normalized)';\n\ninterface ConditionFlatNode {\n  expandable: boolean;\n  level: number;\n  condition: ConditionsNode;\n  infoMenuOpen?: boolean;\n  styleDisabled?: boolean; // Node should be greyed out but still selectable\n  styleDescendantSelected?: boolean; // Node should have a dot indicator\n}\n\n@Component({\n  selector: 'app-condition-tree',\n  templateUrl: './condition-tree.component.html',\n  styleUrls: ['./condition-tree.component.scss'],\n})\nexport class ConditionTreeComponent implements OnInit {\n  @Input() conditionsConfig$!: Observable<ConditionsConfig | null>;\n  @Input() header: string = '';\n  @Input() dataType!: ConditionTreeType;\n  @Input() map!: Map;\n\n  @Output() changeConditionLayer = new EventEmitter<Map>();\n\n  private _transformer = (node: ConditionsNode, level: number) => {\n    return {\n      expandable: !!node!.children && node!.children.length > 0,\n      level: level,\n      condition: node,\n    };\n  };\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children\n  );\n\n  treeControl = new FlatTreeControl<ConditionFlatNode>(\n    (node) => node!.level,\n    (node) => node!.expandable\n  );\n  conditionDataSource = new MatTreeFlatDataSource(\n    this.treeControl,\n    this.treeFlattener\n  );\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.dataType == ConditionTreeType.RAW) {\n      this.conditionsConfig$\n        .pipe(\n          filter((config) => !!config),\n          map((config) => this.conditionsConfigToDataRaw(config!))\n        )\n        .subscribe((data) => {\n          this.conditionDataSource.data = data;\n          this.map.config.dataLayerConfig = this.findAndRevealNode(\n            this.map.config.dataLayerConfig\n          );\n        });\n    } else if (this.dataType == ConditionTreeType.TRANSLATED) {\n      this.conditionsConfig$\n        .pipe(\n          filter((config) => !!config),\n          map((config) => this.conditionsConfigToDataNormalized(config!))\n        )\n        .subscribe((data) => {\n          this.conditionDataSource.data = data;\n          this.map.config.dataLayerConfig = this.findAndRevealNode(\n            this.map.config.dataLayerConfig\n          );\n        });\n    } else if (this.dataType == ConditionTreeType.FUTURE) {\n      this.conditionsConfig$\n        .pipe(\n          filter((config) => !!config),\n          map((config) => this.conditionsConfigToDataFuture(config!))\n        )\n        .subscribe((data) => {\n          this.conditionDataSource.data = data;\n          this.map.config.dataLayerConfig = this.findAndRevealNode(\n            this.map.config.dataLayerConfig\n          );\n        });\n    }\n  }\n\n  /** Used to compute whether a node in the condition layer tree has children. */\n  hasChild = (_: number, node: ConditionFlatNode) => node.expandable;\n\n  onSelect(node: ConditionFlatNode): void {\n    this.unstyleAndDeselectAllNodes();\n    this.styleDescendantsDisabled(node);\n    this.styleAncestorsSelected(node);\n  }\n\n  /** Unstyles and deselects all nodes. */\n  unstyleAndDeselectAllNodes(): void {\n    this.treeControl.dataNodes.forEach((dataNode) => {\n      dataNode.styleDisabled = false;\n      dataNode.styleDescendantSelected = false;\n    });\n  }\n\n  /** Visually indicates that all the descendants of a condition layer node are\n   *  included in the current analysis by setting their style.\n   */\n  private styleDescendantsDisabled(node: ConditionFlatNode): void {\n    this.treeControl.getDescendants(node).forEach((descendant) => {\n      descendant.styleDisabled = true;\n    });\n  }\n\n  /** Find and style all the ancestors of a given node in the tree recursively. */\n  private styleAncestorsSelected(node: ConditionFlatNode): void {\n    const nodeLevel = node.level;\n    const nodeIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n    // Iterate over nodes in reverse order starting from the node preceding\n    // the given node.\n    for (let index = nodeIndex; index >= 0; index--) {\n      const currentNode = this.treeControl.dataNodes[index];\n      if (currentNode.level < nodeLevel) {\n        currentNode.styleDescendantSelected = true;\n        this.styleAncestorsSelected(currentNode);\n        break;\n      }\n    }\n  }\n\n  /** Find the node matching the given config in the condition tree (if any), and expand its ancestors\n   *  so it becomes visible.\n   */\n  private findAndRevealNode(config: DataLayerConfig): ConditionsNode {\n    if (!config.layer || config.layer === NONE_DATA_LAYER_CONFIG.layer)\n      return NONE_DATA_LAYER_CONFIG;\n    for (let node of this.treeControl.dataNodes) {\n      var node_layer = '';\n      if (node.condition.region_geoserver_name) {\n        node_layer =\n          node.condition.region_geoserver_name + node.condition.layer;\n      }\n      if (node_layer === node.condition.region_geoserver_name + config.layer) {\n        this.expandAncestors(node);\n        this.onSelect(node);\n        return node.condition;\n      }\n    }\n    return config;\n  }\n\n  /** Find and expand all the ancestors of a given node in the tree recursively. */\n  private expandAncestors(node: ConditionFlatNode): void {\n    const nodeLevel = node.level;\n    const nodeIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n    // Iterate over nodes in reverse order starting from the node preceding\n    // the given node.\n    for (let index = nodeIndex; index >= 0; index--) {\n      const currentNode = this.treeControl.dataNodes[index];\n      if (currentNode.level < nodeLevel) {\n        this.treeControl.expand(currentNode);\n        this.expandAncestors(currentNode);\n        break;\n      }\n    }\n  }\n\n  /** Raw data is selectable only at the metric level.\n   */\n  private conditionsConfigToDataRaw(\n    config: ConditionsConfig\n  ): ConditionsNode[] {\n    return config.pillars\n      ? config.pillars\n          ?.filter((pillar) => pillar.display)\n          .map((pillar): ConditionsNode => {\n            return {\n              ...pillar,\n              disableSelect: true,\n              disableInfoCard: true,\n              legend_name: CURRENT_CONDITIONS_RAW_LEGEND,\n              normalized: false,\n              children: pillar.elements\n                ?.filter((element) => element.display)\n                .map((element): ConditionsNode => {\n                  return {\n                    ...element,\n                    disableSelect: true,\n                    disableInfoCard: true,\n                    legend_name: CURRENT_CONDITIONS_RAW_LEGEND,\n                    normalized: false,\n                    children: element.metrics?.map((metric): ConditionsNode => {\n                      return {\n                        ...metric,\n                        layer: metric.raw_layer,\n                        region_geoserver_name: config.region_geoserver_name,\n                        legend_name: CURRENT_CONDITIONS_RAW_LEGEND,\n                        normalized: false,\n                        data_download_link: metric.raw_data_download_path\n                          ? BackendConstants.DOWNLOAD_END_POINT +\n                            '/' +\n                            metric.raw_data_download_path\n                          : metric.data_download_link,\n                      };\n                    }),\n                  };\n                }),\n            };\n          })\n      : [];\n  }\n\n  /** Normalized configs are selectable at every level (pillar, element, metric).\n   */\n  private conditionsConfigToDataNormalized(\n    config: ConditionsConfig\n  ): ConditionsNode[] {\n    return config.pillars\n      ? config.pillars\n          ?.filter((pillar) => pillar.display)\n          .map((pillar): ConditionsNode => {\n            return {\n              ...pillar,\n              layer: pillar.normalized_layer,\n              region_geoserver_name: config.region_geoserver_name,\n              data_download_link: pillar.normalized_data_download_path\n                ? BackendConstants.DOWNLOAD_END_POINT +\n                  '/' +\n                  pillar.normalized_data_download_path\n                : undefined,\n              legend_name: CURRENT_CONDITIONS_NORMALIZED_LEGEND,\n              normalized: true,\n              children: pillar.elements?.map((element): ConditionsNode => {\n                return {\n                  ...element,\n                  layer: element.normalized_layer,\n                  region_geoserver_name: config.region_geoserver_name,\n                  data_download_link: element.normalized_data_download_path\n                    ? BackendConstants.DOWNLOAD_END_POINT +\n                      '/' +\n                      element.normalized_data_download_path\n                    : undefined,\n                  legend_name: CURRENT_CONDITIONS_NORMALIZED_LEGEND,\n                  normalized: true,\n                  min_value: undefined,\n                  max_value: undefined,\n                  children: element.metrics?.map((metric): ConditionsNode => {\n                    return {\n                      ...metric,\n                      layer: metric.normalized_layer,\n                      region_geoserver_name: config.region_geoserver_name,\n                      data_download_link: metric.normalized_data_download_path\n                        ? BackendConstants.DOWNLOAD_END_POINT +\n                          '/' +\n                          metric.normalized_data_download_path\n                        : metric.data_download_link,\n                      legend_name: CURRENT_CONDITIONS_NORMALIZED_LEGEND,\n                      normalized: true,\n                      min_value: undefined,\n                      max_value: undefined,\n                    };\n                  }),\n                };\n              }),\n            };\n          })\n      : [];\n  }\n\n  /** Future configs are selectable and viewable only at the pillar level.\n   */\n  private conditionsConfigToDataFuture(\n    config: ConditionsConfig\n  ): ConditionsNode[] {\n    return config.pillars\n      ? config.pillars\n          ?.filter((pillar) => pillar.display)\n          .map((pillar): ConditionsNode => {\n            return {\n              ...pillar,\n              data_download_link: pillar.future_data_download_path\n                ? BackendConstants.DOWNLOAD_END_POINT +\n                  '/' +\n                  pillar.future_data_download_path\n                : pillar.data_download_link,\n              layer: pillar.future_layer,\n              region_geoserver_name: config.region_geoserver_name,\n              legend_name: FUTURE_CONDITIONS_LEGEND,\n              normalized: true,\n              children: [],\n            };\n          })\n      : [];\n  }\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConditionsNode[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "disableInfoCard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "disableSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "DataLayerConfig"
            ]
        },
        {
            "name": "CreatedLink",
            "id": "interface-CreatedLink-2cfd1c7cd05cf4ce77e593d76efe67cc80902b54412bd14eef59d152009e662230f6e399bb3320535f2675b50bbb42c5cbe215e71a498982ecf92f2877dc1806",
            "file": "src/app/services/share-map.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { BackendConstants } from '../backend-constants';\nimport { HttpClient } from '@angular/common/http';\nimport { WINDOW } from './window.service';\nimport { MapConfig, MapViewOptions, Region } from '../types';\n\ninterface ViewState {\n  mapViewOptions: MapViewOptions | null;\n  mapConfig: MapConfig[];\n  region: Region;\n}\n\ninterface CreatedLink {\n  created_at: string;\n  link_code: string;\n  updated_at: string;\n  user_id?: string;\n  view_state: ViewState;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShareMapService {\n  constructor(\n    private http: HttpClient,\n    @Inject(WINDOW) private readonly window: Window\n  ) {}\n\n  getSharedLink(mapData: ViewState): Observable<string> {\n    const origin = this.window.location.origin;\n    return this.createShareLink(mapData).pipe(\n      map((createdLink) => origin + '/map?link=' + createdLink.link_code)\n    );\n  }\n\n  createShareLink(mapData: ViewState): Observable<CreatedLink> {\n    return this.http.post<CreatedLink>(\n      BackendConstants.END_POINT + '/planning/create_link/',\n      {\n        view_state: mapData,\n      },\n      { withCredentials: true }\n    );\n  }\n\n  getMapDataFromLink(link: string) {\n    return this.loadSharedLink(link).pipe(map((data) => data.view_state));\n  }\n\n  loadSharedLink(link: string) {\n    return this.http.get<CreatedLink>(\n      BackendConstants.END_POINT.concat('/planning/shared_link/', link),\n      { withCredentials: true }\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "link_code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "updated_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "view_state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewState",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreatePlanPayload",
            "id": "interface-CreatePlanPayload-99047d95c80b6fe19df0e845afca424adf15eb0a629d85388c1e01e4f938f2221e3929f362361eaba1bf1661d1a5a112fb43ab5325541246f22770290f8440e4",
            "file": "src/app/types/plan.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Region } from './region.types';\n\nexport interface Plan {\n  area_acres: number;\n  area_m2: number;\n  created_at: string;\n  creator: string;\n  geometry?: GeoJSON.GeoJSON;\n  id: number;\n  latest_updated?: string;\n  name: string;\n  notes?: string;\n  permissions: string[];\n  region_name: Region;\n  role: string;\n  scenario_count: number;\n  user: number;\n}\n\nexport type PreviewPlan = Omit<Plan, 'geometry' | 'area_m2'>;\n\nexport interface CreatePlanPayload {\n  geometry: GeoJSON.GeoJSON;\n  name: string;\n  region_name: Region;\n}\n\nexport interface BackendProjectArea {\n  id: number;\n  geometry: GeoJSON.GeoJSON;\n  properties?: {\n    estimated_area_treated?: number;\n    owner?: number;\n    project?: number;\n  };\n}\n",
            "properties": [
                {
                    "name": "geometry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GeoJSON.GeoJSON",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "region_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Region",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DataLayerConfig",
            "id": "interface-DataLayerConfig-a8c380f17d030be2614817d9a6996ef6e0c433977d57302bace0c5b7272bcca27c3ee7177c1f4daadf67130088a401cd20a6fda282152df3e379bbda503ac815",
            "file": "src/app/types/data.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NONE_COLORMAP } from './legend.types';\n\nexport interface BoundaryConfig {\n  display_name?: string;\n  boundary_name: string;\n  vector_name: string;\n  shape_name: string;\n  region_name?: string;\n}\n\nexport interface ConditionsConfig extends DataLayerConfig {\n  region_name?: string;\n  region_geoserver_name?: string;\n  pillars?: PillarConfig[];\n  raw_data?: boolean;\n  translated_data?: boolean;\n  future_data?: boolean;\n}\n\nexport interface ConditionsMetadata {\n  data_download_link?: string;\n  data_provider?: string;\n  data_year?: string;\n  reference_link?: string;\n  source?: string;\n  source_link?: string;\n  min_value?: number;\n  max_value?: number;\n}\n\nexport interface DataLayerConfig extends ConditionsMetadata {\n  display_name?: string;\n  legend_name?: string;\n  data_units?: string;\n  region_geoserver_name?: string;\n  filepath?: string;\n  normalized_data_download_path?: string;\n  layer?: string;\n  raw_layer?: string;\n  normalized_layer?: string;\n  colormap?: string;\n  normalized?: boolean;\n  opacity?: number;\n}\n\nexport interface ElementConfig extends DataLayerConfig {\n  display?: boolean;\n  element_name?: string;\n  metrics?: MetricConfig[];\n}\n\nexport interface MetricConfig extends DataLayerConfig {\n  metric_name: string;\n  data_units?: string;\n  raw_data_download_path?: string;\n}\n\nexport interface PillarConfig extends DataLayerConfig {\n  display?: boolean;\n  pillar_name?: string;\n  elements?: ElementConfig[];\n  future_layer?: string;\n  future_data_download_path?: string;\n}\n\nexport enum ConditionTreeType {\n  RAW = 'Raw',\n  TRANSLATED = 'Translated',\n  FUTURE = 'Future',\n}\n\nexport const NONE_BOUNDARY_CONFIG: BoundaryConfig = {\n  boundary_name: '',\n  display_name: 'None',\n  vector_name: '',\n  shape_name: 'None',\n};\n\nexport const NONE_DATA_LAYER_CONFIG: DataLayerConfig = {\n  display_name: 'None',\n  filepath: '',\n  layer: '',\n  colormap: NONE_COLORMAP,\n};\n\nexport enum FormMessageType {\n  SUCCESS,\n  ERROR,\n  ALERT,\n}\n",
            "properties": [
                {
                    "name": "colormap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "data_units",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "filepath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "layer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "legend_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "normalized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "normalized_data_download_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "normalized_layer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "opacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "raw_layer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "region_geoserver_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "ConditionsMetadata"
            ]
        },
        {
            "name": "ElementConfig",
            "id": "interface-ElementConfig-a8c380f17d030be2614817d9a6996ef6e0c433977d57302bace0c5b7272bcca27c3ee7177c1f4daadf67130088a401cd20a6fda282152df3e379bbda503ac815",
            "file": "src/app/types/data.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NONE_COLORMAP } from './legend.types';\n\nexport interface BoundaryConfig {\n  display_name?: string;\n  boundary_name: string;\n  vector_name: string;\n  shape_name: string;\n  region_name?: string;\n}\n\nexport interface ConditionsConfig extends DataLayerConfig {\n  region_name?: string;\n  region_geoserver_name?: string;\n  pillars?: PillarConfig[];\n  raw_data?: boolean;\n  translated_data?: boolean;\n  future_data?: boolean;\n}\n\nexport interface ConditionsMetadata {\n  data_download_link?: string;\n  data_provider?: string;\n  data_year?: string;\n  reference_link?: string;\n  source?: string;\n  source_link?: string;\n  min_value?: number;\n  max_value?: number;\n}\n\nexport interface DataLayerConfig extends ConditionsMetadata {\n  display_name?: string;\n  legend_name?: string;\n  data_units?: string;\n  region_geoserver_name?: string;\n  filepath?: string;\n  normalized_data_download_path?: string;\n  layer?: string;\n  raw_layer?: string;\n  normalized_layer?: string;\n  colormap?: string;\n  normalized?: boolean;\n  opacity?: number;\n}\n\nexport interface ElementConfig extends DataLayerConfig {\n  display?: boolean;\n  element_name?: string;\n  metrics?: MetricConfig[];\n}\n\nexport interface MetricConfig extends DataLayerConfig {\n  metric_name: string;\n  data_units?: string;\n  raw_data_download_path?: string;\n}\n\nexport interface PillarConfig extends DataLayerConfig {\n  display?: boolean;\n  pillar_name?: string;\n  elements?: ElementConfig[];\n  future_layer?: string;\n  future_data_download_path?: string;\n}\n\nexport enum ConditionTreeType {\n  RAW = 'Raw',\n  TRANSLATED = 'Translated',\n  FUTURE = 'Future',\n}\n\nexport const NONE_BOUNDARY_CONFIG: BoundaryConfig = {\n  boundary_name: '',\n  display_name: 'None',\n  vector_name: '',\n  shape_name: 'None',\n};\n\nexport const NONE_DATA_LAYER_CONFIG: DataLayerConfig = {\n  display_name: 'None',\n  filepath: '',\n  layer: '',\n  colormap: NONE_COLORMAP,\n};\n\nexport enum FormMessageType {\n  SUCCESS,\n  ERROR,\n  ALERT,\n}\n",
            "properties": [
                {
                    "name": "display",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "element_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetricConfig[]",
                    "optional": true,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "DataLayerConfig"
            ]
        },
        {
            "name": "FeatureCollection",
            "id": "interface-FeatureCollection-bdce8719d3597b0d0b18bfe059ca8a18f88611dffe2f4310e7d4ba24a79d0d625b3b27a99b2a6d7307a633fd90f366b234824d8b09211e6c6d7c2ea93a41e623",
            "file": "src/app/types/scenario.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SCENARIO_STATUS = 'ACTIVE' | 'ARCHIVED';\n\nexport interface Scenario {\n  id?: string;\n  name: string;\n  notes?: string;\n  creator?: string;\n  planning_area: string;\n  configuration: ScenarioConfig;\n  scenario_result?: ScenarioResult;\n  status: SCENARIO_STATUS;\n  user?: number;\n}\n\n/**\n * TODO this type is used for the backend payload\n * as well as the frontend interface before saving the scenario.\n * This is bad, as the types are not the same.\n * For example, `treatment_question` only exists on the FE but does not exists on\n * the backend payload.\n * Similarly, `question_id` only exists on the backend payload, while on the FE side\n * this is part of `treatment_question`.\n */\nexport interface ScenarioConfig {\n  est_cost?: number;\n  max_budget?: number;\n  max_slope?: number;\n  max_treatment_area_ratio?: number;\n  min_distance_from_road?: number;\n  // TODO is this even being used??\n  project_areas?: ProjectArea[];\n  treatment_question?: TreatmentQuestionConfig | null;\n  excluded_areas?: string[];\n  stand_size?: string;\n  scenario_priorities?: string[];\n  question_id?: number;\n}\n\nexport interface ScenarioResult {\n  status: ScenarioResultStatus;\n  completed_at: string;\n  result: {\n    features: FeatureCollection[];\n    type: string;\n  };\n}\n\nexport type ScenarioResultStatus =\n  | 'LOADING' // when loading results\n  | 'NOT_STARTED' // Added by FE when the scenario is not created yet.\n  | 'PENDING' // Scenario created, in queue\n  | 'RUNNING' // Scenario created, being processed\n  | 'SUCCESS' // Run completed successfully\n  | 'FAILURE' // Run failed;\n  | 'PANIC' // Run failed; panic\n  | 'TIMED_OUT'; // Run failed; timed out\n\nexport interface TreatmentGoalConfig {\n  category_name?: string;\n  questions: TreatmentQuestionConfig[];\n}\n\n// TODO is this the right type?\nexport interface FeatureCollection extends GeoJSON.FeatureCollection {\n  properties: any;\n}\n\nexport interface TreatmentQuestionConfig {\n  id?: number;\n  global_thresholds?: string[];\n  long_question_text?: string;\n  scenario_output_fields_paths?: {\n    [key: string]: string[];\n  };\n  scenario_priorities?: string[];\n  short_question_text?: string;\n  stand_thresholds?: string[];\n  weights?: number[];\n\n  description?: string[];\n}\n\nexport interface ProjectArea {\n  id: string;\n  projectId?: string;\n  projectArea: GeoJSON.GeoJSON;\n  owner?: string;\n  estimatedAreaTreated?: number;\n  actualAcresTreated?: number;\n}\n\nexport interface PriorityRow {\n  selected?: boolean;\n  visible?: boolean; // Visible as raster data on map\n  expanded?: boolean; // Children in table are not hidden\n  hidden?: boolean; // Row hidden from table (independent of \"visible\" attribute)\n  disabled?: boolean; // Cannot be selected (because ancestor is selected)\n  conditionName: string;\n  displayName?: string;\n  filepath: string;\n  children: PriorityRow[];\n  level: number;\n}\n",
            "properties": [
                {
                    "name": "properties",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 65
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "GeoJSON.FeatureCollection"
            ]
        },
        {
            "name": "FeaturesConfig",
            "id": "interface-FeaturesConfig-95436022713c5302dec3a1c46b28d0a32b599c608dd44713533ae5fecae65171563099db8febe96dd70b08f759471ac9addc8be33d82fee8e91a3d117f15f696",
            "file": "src/app/features/features-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\n\nexport interface FeaturesConfig {\n  [key: string]: boolean;\n}\n\nexport const FEATURES_JSON = new InjectionToken<string>('features_json');\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-95436022713c5302dec3a1c46b28d0a32b599c608dd44713533ae5fecae65171563099db8febe96dd70b08f759471ac9addc8be33d82fee8e91a3d117f15f696",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "Invite",
            "id": "interface-Invite-6b8c4618f405cc9eff79b485ffe4ce6b2a80afa6604271bbf7250481e76ca4365191dfd4ec1c75ec5fd50c12ac9e69ac0c721cd733537bc4949b79feacc15707",
            "file": "src/app/types/invite.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Invite {\n  id: number;\n  inviter: number;\n  object_pk: number;\n  role: string;\n  email: string;\n  collaborator?: number;\n  collaborator_name?: string;\n}\n\nexport type INVITE_ROLE = 'Viewer' | 'Collaborator' | 'Owner';\n",
            "properties": [
                {
                    "name": "collaborator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "collaborator_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "inviter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "object_pk",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Legend",
            "id": "interface-Legend-e4aea37734c365289aa4c1ed22c227c198b44fa0e7cbbe8b87909c9c060d049ab08d9522c69bb4b36895a4a47a68de60f804daa53b9f1ca10e5707d9bc1fbd03",
            "file": "src/app/types/legend.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const DEFAULT_COLORMAP = 'turbo';\nexport const NONE_COLORMAP = 'none';\n\nexport interface ColormapConfig {\n  name?: string;\n  values?: ColormapValue[];\n}\n\nexport interface ColormapValue {\n  name?: string;\n  percentile?: number;\n  rgb?: string;\n}\n\nexport interface Legend {\n  colors?: string[];\n  labels?: string[];\n  minMaxValues?: number[];\n  secondaryLabels?: string[];\n}\n\n/** Convert a colormap to a legend object. */\nexport function colormapConfigToLegend(\n  colormap: ColormapConfig,\n  minMaxValues?: number[]\n): Legend | undefined {\n  const sortedValues = colormap.values?.sort((valueA, valueB) => {\n    if (valueA?.percentile != undefined && valueB?.percentile != undefined) {\n      return valueA.percentile - valueB.percentile;\n    }\n    return 0;\n  });\n  return {\n    colors: sortedValues?.map((value) => (!!value.rgb ? value.rgb : '')),\n    labels: sortedValues?.map((value) => (!!value.name ? value.name : '')),\n    minMaxValues: minMaxValues,\n  };\n}\n",
            "properties": [
                {
                    "name": "colors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "labels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "minMaxValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "secondaryLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LogoutResponse",
            "id": "interface-LogoutResponse-b7f15b1b913893a17014d7a3b7e7abdca29a81c1336174b7a9e45fbfeeab3e95c32634be4f211c0ce06000703786588450d3ff4c2f6d948dc4018cea5f234737",
            "file": "src/app/services/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport {\n  ActivatedRouteSnapshot,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SNACK_NOTICE_CONFIG } from '../../app/shared/constants';\nimport {\n  BehaviorSubject,\n  catchError,\n  concatMap,\n  map,\n  Observable,\n  of,\n  take,\n  tap,\n  throwError,\n} from 'rxjs';\n\nimport { BackendConstants } from '../backend-constants';\nimport { User } from '../types';\nimport { RedirectService } from './redirect.service';\n\ninterface LogoutResponse {\n  detail: string;\n}\n\nexport interface PasswordResetToken {\n  userId: string;\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  loggedInStatus$ = new BehaviorSubject<boolean | null>(null);\n  isLoggedIn$: Observable<boolean | null> = this.loggedInStatus$;\n  loggedInUser$ = new BehaviorSubject<User | null | undefined>(undefined);\n\n  private readonly API_ROOT = BackendConstants.END_POINT + '/dj-rest-auth/';\n\n  constructor(\n    private http: HttpClient,\n    private cookieService: CookieService,\n    private snackbar: MatSnackBar,\n    private redirectService: RedirectService\n  ) {}\n\n  currentUser() {\n    return this.loggedInUser$.value;\n  }\n\n  login(email: string, password: string) {\n    return this.http\n      .post(\n        this.API_ROOT.concat('login/'),\n        { email, password },\n        { withCredentials: true }\n      )\n      .pipe(\n        map((response) => {\n          const redirectUrl = this.redirectService.shouldRedirect(email);\n          // remove redirect\n          this.redirectService.removeRedirect();\n          return redirectUrl || 'home';\n        }),\n        tap((_) => {\n          this.loggedInStatus$.next(true);\n          this.getLoggedInUser()\n            .pipe(take(1))\n            .subscribe((user) => {\n              this.loggedInUser$.next(user);\n            });\n        })\n      );\n  }\n\n  signup(\n    email: string,\n    password1: string,\n    password2: string,\n    firstName: string,\n    lastName: string\n  ) {\n    return this.http\n      .post(this.API_ROOT.concat('registration/'), {\n        password1,\n        password2,\n        email,\n        first_name: firstName,\n        last_name: lastName,\n      })\n      .pipe(\n        tap(() => {\n          const redirect = this.redirectService.shouldRedirect(email);\n          if (redirect) {\n            // associate the redirect with the newly created user\n            this.redirectService.setRedirect(redirect, email);\n          }\n        })\n      );\n  }\n\n  resendValidationEmail(email: string) {\n    return this.http.post(this.API_ROOT.concat('registration/resend-email/'), {\n      email,\n    });\n  }\n\n  logout() {\n    return this.http\n      .get<LogoutResponse>(this.API_ROOT.concat('logout/'), {\n        withCredentials: true,\n      })\n      .pipe(\n        tap((response) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          this.snackbar.open(response.detail, 'Dismiss', SNACK_NOTICE_CONFIG);\n        })\n      );\n  }\n\n  validateAccount(token: string): Observable<boolean> {\n    return this.http\n      .post(this.API_ROOT.concat('registration/account-confirm-email/'), {\n        key: token,\n      })\n      .pipe(\n        map((_) => true),\n        catchError((error: Error) => {\n          return of(false);\n        })\n      );\n  }\n\n  private refreshToken() {\n    return this.http\n      .post(\n        this.API_ROOT.concat('token/refresh/'),\n        { refresh: this.cookieService.get('my-refresh-token') },\n        { withCredentials: true }\n      )\n      .pipe(\n        tap((response: any) => {\n          this.loggedInStatus$.next(!!response.access);\n        }),\n        catchError((err) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          return throwError(err);\n        })\n      );\n  }\n\n  /** Fetch the currently logged in user from the backend. */\n  refreshLoggedInUser(): Observable<User> {\n    // Must refresh the auth cookie to retrieve user\n    return this.refreshToken().pipe(\n      concatMap((_) => {\n        return this.getLoggedInUser();\n      })\n    );\n  }\n\n  private getLoggedInUser(): Observable<User> {\n    return this.http\n      .get(this.API_ROOT.concat('user/'), { withCredentials: true })\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n            id: response.pk,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  changePassword(\n    currentPassword: string,\n    newPassword1: string,\n    newPassword2: string\n  ): Observable<any> {\n    return this.http.post(\n      this.API_ROOT.concat('password/change/'),\n      {\n        old_password: currentPassword,\n        new_password1: newPassword1,\n        new_password2: newPassword2,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  sendPasswordResetEmail(email: string): Observable<any> {\n    return this.http.post(\n      this.API_ROOT.concat('password/reset/'),\n      {\n        email: email,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  resetPassword(\n    userId: string,\n    token: string,\n    password1: string,\n    password2: string\n  ): Observable<boolean> {\n    return this.http\n      .post(\n        this.API_ROOT.concat('password/reset/confirm/'),\n        {\n          uid: userId,\n          token: token,\n          new_password1: password1,\n          new_password2: password2,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          return response.success;\n        })\n      );\n  }\n\n  /** Gets a user given the id. */\n  getUser(userId: number): Observable<User> {\n    const url = BackendConstants.END_POINT.concat(\n      `/users/get_user_by_id/?id=${userId}`\n    );\n    return this.http\n      .get(url, {\n        withCredentials: true,\n      })\n      .pipe(\n        take(1),\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          return user;\n        })\n      );\n  }\n\n  updateUserInfo(newUser: Partial<User>): Observable<User> {\n    return this.http\n      .patch(\n        this.API_ROOT.concat('user'),\n        {\n          first_name: newUser.firstName,\n          last_name: newUser.lastName,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  /**\n   * deprecated\n   * @param newUser\n   * @param currentPassword\n   */\n  updateUser(newUser: User, currentPassword: string): Observable<User> {\n    return this.http\n      .patch(\n        this.API_ROOT.concat('user/'),\n        {\n          email: newUser.email,\n          username: newUser.username,\n          first_name: newUser.firstName,\n          last_name: newUser.lastName,\n          current_password: currentPassword,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  /**\n   * \"Deletes\" user from backend. The behavior of this command is to disable the user account,\n   *  not fully delete it, so data can be restored later if necessary.\n   */\n  deleteUser(user: User, password: string): Observable<boolean> {\n    return this.http\n      .post(\n        BackendConstants.END_POINT.concat('/users/delete/'),\n        {\n          password: password,\n          email: user.email,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        take(1),\n        map((result: any) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          return result.deleted;\n        })\n      );\n  }\n\n  validatePasswordResetToken(tokenDetails: PasswordResetToken) {\n    return this.http.get(\n      this.API_ROOT.concat(\n        'password/reset/',\n        tokenDetails.userId,\n        '/',\n        tokenDetails.token\n      )\n    );\n  }\n}\n\n/** An AuthGuard used to prevent access to pages that require sign-in. If the user is not signed\n *  in, redirect to the sign-in page.\n */\n@Injectable()\nexport class AuthGuard {\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private redirectService: RedirectService\n  ) {}\n\n  canActivate(\n    route?: ActivatedRouteSnapshot,\n    state?: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.authService.refreshLoggedInUser().pipe(\n      map((_) => true),\n      catchError((_) => {\n        if (state) {\n          this.redirectService.setRedirect(state.url);\n        }\n        this.router.navigate(['login']);\n        return of(false);\n      })\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Map",
            "id": "interface-Map-e80f8f46200003011db5c4644c8cd0656fbbf82f44ff7b1621706b9275f8844205505adfff3d6caac52b139c615765e1ad4e7fbdc3e1380b5c55ab44d20c8935",
            "file": "src/app/types/map.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as L from 'leaflet';\n\nimport { BaseLayerType, BoundaryConfig, DataLayerConfig } from '../types';\nimport * as esri from 'esri-leaflet';\n\nexport interface Map {\n  id: string;\n  name: string;\n  config: MapConfig;\n  instance?: L.Map | undefined;\n  baseLayerRef?: L.Layer | undefined;\n  boundaryLayerRef?: L.Layer | undefined;\n  existingProjectsLayerRef?: esri.FeatureLayer | undefined;\n  dataLayerRef?: L.TileLayer | undefined;\n  clonedDrawingRef?: L.FeatureGroup | undefined;\n  drawnPolygonLookup?: { [key: string]: L.Layer };\n  legend?: HTMLElement | undefined;\n  regionLayerRef?: L.GeoJSON | undefined;\n}\n\nexport interface MapConfig {\n  baseLayerType: BaseLayerType;\n  boundaryLayerConfig: BoundaryConfig;\n  dataLayerConfig: DataLayerConfig;\n  showExistingProjectsLayer: boolean;\n}\n\nexport interface MapViewOptions {\n  selectedMapIndex: number;\n  numVisibleMaps: number;\n  zoom: number;\n  center: L.LatLngTuple;\n}\n",
            "properties": [
                {
                    "name": "baseLayerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.Layer | undefined",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "boundaryLayerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.Layer | undefined",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "clonedDrawingRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.FeatureGroup | undefined",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MapConfig",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "dataLayerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.TileLayer | undefined",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "drawnPolygonLookup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "existingProjectsLayerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "esri.FeatureLayer | undefined",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "instance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.Map | undefined",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "legend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | undefined",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "regionLayerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.GeoJSON | undefined",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MapConfig",
            "id": "interface-MapConfig-e80f8f46200003011db5c4644c8cd0656fbbf82f44ff7b1621706b9275f8844205505adfff3d6caac52b139c615765e1ad4e7fbdc3e1380b5c55ab44d20c8935",
            "file": "src/app/types/map.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as L from 'leaflet';\n\nimport { BaseLayerType, BoundaryConfig, DataLayerConfig } from '../types';\nimport * as esri from 'esri-leaflet';\n\nexport interface Map {\n  id: string;\n  name: string;\n  config: MapConfig;\n  instance?: L.Map | undefined;\n  baseLayerRef?: L.Layer | undefined;\n  boundaryLayerRef?: L.Layer | undefined;\n  existingProjectsLayerRef?: esri.FeatureLayer | undefined;\n  dataLayerRef?: L.TileLayer | undefined;\n  clonedDrawingRef?: L.FeatureGroup | undefined;\n  drawnPolygonLookup?: { [key: string]: L.Layer };\n  legend?: HTMLElement | undefined;\n  regionLayerRef?: L.GeoJSON | undefined;\n}\n\nexport interface MapConfig {\n  baseLayerType: BaseLayerType;\n  boundaryLayerConfig: BoundaryConfig;\n  dataLayerConfig: DataLayerConfig;\n  showExistingProjectsLayer: boolean;\n}\n\nexport interface MapViewOptions {\n  selectedMapIndex: number;\n  numVisibleMaps: number;\n  zoom: number;\n  center: L.LatLngTuple;\n}\n",
            "properties": [
                {
                    "name": "baseLayerType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseLayerType",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "boundaryLayerConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoundaryConfig",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "dataLayerConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataLayerConfig",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "showExistingProjectsLayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MapRef",
            "id": "interface-MapRef-1f825cb6c529aa411b8198673a32cb236e2c5cf0b88e095f36c53b4232215e9c6d0afb2e73c67d0296f5f98ac202a03e38860964201f698a2eb3936d40f078c2",
            "file": "src/app/plan/plan-map/plan-map.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport * as L from 'leaflet';\nimport { BehaviorSubject, Subject, takeUntil } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { FrontendConstants, Plan, Region, regionToString } from 'src/app/types';\n\nimport { BackendConstants } from '../../backend-constants';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { PlanStateService } from '@services';\nimport { regionMapCenters } from '../../map/map.helper';\nimport { Feature } from 'geojson';\nimport { getColorForProjectPosition } from '../plan-helpers';\n\n// Needed to keep reference to legend div element to remove\nexport interface MapRef {\n  legend?: HTMLElement | undefined;\n}\n\n@Component({\n  selector: 'app-plan-map',\n  templateUrl: './plan-map.component.html',\n  styleUrls: ['./plan-map.component.scss'],\n})\nexport class PlanMapComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() plan: Plan | null = null;\n  @Input() mapId?: string;\n  @Input() mapHeight: string = '100%';\n  /** The amount of padding in the top left corner when the map fits the plan boundaries. */\n  @Input() mapPadding: L.PointTuple = [0, 0]; // [left, top]\n  @Input() showAttributionAndZoom: boolean = false;\n\n  private readonly destroy$ = new Subject<void>();\n  map!: L.Map;\n  drawingLayer: L.GeoJSON | undefined;\n  projectAreasLayer: L.GeoJSON | undefined;\n  tileLayer: L.TileLayer | undefined;\n\n  mapRef: MapRef = {\n    legend: undefined,\n  };\n\n  selectedRegion$ = new BehaviorSubject<Region>(Region.SIERRA_NEVADA);\n\n  private layer: string = '';\n  private shapes: any | null = null;\n\n  constructor(\n    private planStateService: PlanStateService,\n    private http: HttpClient\n  ) {\n    this.selectedRegion$ = this.planStateService.planRegion$;\n  }\n\n  ngOnInit(): void {\n    this.planStateService.planState$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((state) => {\n        if (state.mapConditionLayer !== this.layer) {\n          this.layer = state.mapConditionLayer ?? '';\n          this.setCondition(state.mapConditionLayer ?? '');\n        }\n        if (state.mapShapes !== this.shapes) {\n          this.shapes = state.mapShapes;\n          this.drawShapes(state.mapShapes);\n        }\n      });\n  }\n\n  ngAfterViewInit(): void {\n    if (this.map != undefined) this.map.remove();\n\n    this.map = L.map(this.mapId ? this.mapId : 'map', {\n      center: [...regionMapCenters(this.selectedRegion$.getValue()!)],\n      zoom: FrontendConstants.MAP_INITIAL_ZOOM,\n      minZoom: FrontendConstants.MAP_MIN_ZOOM,\n      maxZoom: FrontendConstants.MAP_MAX_ZOOM,\n      layers: [this.stadiaAlidadeTiles()],\n      zoomControl: false,\n      pmIgnore: false,\n      scrollWheelZoom: true,\n      attributionControl: this.showAttributionAndZoom,\n    });\n\n    if (this.showAttributionAndZoom) {\n      this.map.attributionControl.setPosition('topright');\n\n      // Add zoom controls to bottom right corner\n      const zoomControl = L.control.zoom({\n        position: 'bottomright',\n      });\n      zoomControl.addTo(this.map);\n    }\n\n    if (this.plan) {\n      this.drawPlanningArea(this.plan!);\n    }\n\n    setTimeout(() => this.map.invalidateSize(), 0);\n  }\n\n  // Add planning area to map and frame it in view\n  private drawPlanningArea(plan: Plan, color?: string, opacity?: number) {\n    if (!plan.geometry) return;\n\n    if (!!this.drawingLayer) {\n      this.drawingLayer.remove();\n    }\n\n    this.drawingLayer = L.geoJSON(plan.geometry, {\n      pane: 'overlayPane',\n      style: {\n        color: color ?? '#000000',\n        fillColor: color ?? '#A5C8D7',\n        fillOpacity: opacity ?? 0.12,\n        weight: 3,\n      },\n    }).addTo(this.map);\n    this.map.fitBounds(this.drawingLayer.getBounds(), {\n      paddingTopLeft: this.mapPadding,\n    });\n  }\n\n  /** Creates a basemap layer using the Stadia.AlidadeSmooth tiles. */\n  private stadiaAlidadeTiles() {\n    var attributionString = '';\n    if (this.showAttributionAndZoom) {\n      attributionString =\n        '&copy; <a href=\"https://stadiamaps.com/\" target=\"_blank\" rel=\"noreferrer\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\" rel=\"noreferrer\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\" target=\"_blank\" rel=\"noreferrer\">OpenStreetMap</a> contributors';\n    }\n    return L.tileLayer(\n      'https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png',\n      {\n        maxZoom: 19,\n        attribution: attributionString,\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.map.remove();\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /** Display rendered tiles for the provided condition filepath (or, if the filepath\n   *  string is empty, remove rendered tiles). */\n  private setCondition(filepath: string): void {\n    this.tileLayer?.remove();\n    this.mapRef.legend?.remove();\n\n    if (filepath?.length === 0 || !filepath) return;\n\n    var region = regionToString(this.planStateService.planRegion$.getValue());\n    this.tileLayer = L.tileLayer.wms(\n      BackendConstants.TILES_END_POINT + region + '/wms?',\n      {\n        layers: region + filepath,\n        minZoom: 7,\n        maxZoom: 13,\n        format: 'image/png',\n        transparent: true,\n        opacity: 0.7,\n      }\n    );\n\n    this.map.addLayer(this.tileLayer);\n\n    // Map legend request\n    var dataUnit = '';\n    this.planStateService.planState$.pipe(take(1)).subscribe((state) => {\n      if (state.legendUnits) {\n        dataUnit = state.legendUnits;\n      }\n    });\n    const legendUrl = BackendConstants.TILES_END_POINT + 'wms';\n    let queryParams = new HttpParams();\n    queryParams = queryParams.append('request', 'GetLegendGraphic');\n    queryParams = queryParams.append('layer', filepath);\n    queryParams = queryParams.append('format', 'application/json');\n    var legendJson = this.http.get<string>(legendUrl, { params: queryParams });\n    legendJson.pipe(take(1)).subscribe((value: any) => {\n      var colorMap =\n        value['Legend'][0]['rules'][0]['symbolizers'][0]['Raster']['colormap'];\n      this.addLegend(colorMap, dataUnit, this.map);\n    });\n  }\n\n  addLegend(colormap: any, dataUnit: string | undefined, map: L.Map) {\n    var entries = colormap['entries'];\n    const legend = new (L.Control.extend({\n      options: { position: 'topleft' },\n    }))();\n    const mapRef = this.mapRef;\n    legend.onAdd = function (map) {\n      // Remove any pre-existing legend on map\n      if (mapRef && mapRef.legend) {\n        L.DomUtil.remove(mapRef.legend);\n      }\n\n      const div = L.DomUtil.create('div', 'legend');\n      // htmlContent of HTMLDivElement must be directly added here to add to leaflet map\n      // Creating a string and then assigning to div.innerHTML to allow for class encapsulation\n      // (otherwise div tags are automatically closed before they should be)\n      var htmlContent = '';\n      htmlContent += '<div class=parentlegend>';\n      if (dataUnit && colormap['type'] == 'ramp') {\n        // For legends with numerical labels make header the corresponding data units\n        htmlContent += '<div><b>' + dataUnit + '</b></div>';\n      } else {\n        // For legends with categorical labels make header 'Legend'\n        htmlContent += '<div><b>Legend</b></div>';\n      }\n      // Reversing order to present legend values from high to low (default is low to high)\n      for (let i = entries.length - 1; i >= 0; i--) {\n        var entry = entries[i];\n        // Add a margin-bottom to only the last entry in the legend\n        var lastChild = '';\n        if (i == 0) {\n          lastChild = 'style=\"margin-bottom: 6px;\"';\n        }\n        if (entry['label']) {\n          // Filter out 'nodata' entries\n          if (entry['color'] != '#000000') {\n            htmlContent +=\n              '<div class=\"legendline\" ' +\n              lastChild +\n              '><i style=\"background:' +\n              entry['color'] +\n              '\"> &emsp; &hairsp;</i> &nbsp;<label>' +\n              entry['label'] +\n              '<br/></label></div>';\n          } else if (lastChild != '') {\n            htmlContent += '<div class=\"legendline\"' + lastChild + '></div>';\n          }\n        } else {\n          htmlContent +=\n            '<div class=\"legendline\" ' +\n            lastChild +\n            '><i style=\"background:' +\n            entry['color'] +\n            '\"> &emsp; &hairsp;</i> &nbsp; <br/></div>';\n        }\n      }\n      htmlContent += '</div>';\n      div.innerHTML = htmlContent;\n      // Needed to allow for scrolling on the legend\n      L.DomEvent.on(div, 'mousewheel', L.DomEvent.stopPropagation);\n      // Set reference to legend for later deletion\n      mapRef.legend = div;\n      return div;\n    };\n\n    legend.addTo(map);\n  }\n\n  /** Draw geojson shapes on the map, or erase currently drawn shapes. */\n  private drawShapes(shapes: Feature[] | null): void {\n    this.projectAreasLayer?.remove();\n\n    if (!shapes) return;\n\n    this.projectAreasLayer = L.geoJSON(shapes, {\n      style: (shape) => ({\n        color: '#000',\n        fillColor: getColorForProjectPosition(shape?.properties.proj_id),\n        fillOpacity: 0.4,\n        weight: 1.5,\n      }),\n      onEachFeature: function (feature, layer) {\n        // TODO Find a better way to center this — could see if it's possible to add an actual center coordinate to the properties and use that to set tooltip location\n        // This currently is a bit off if the centroid of the project area isn't within it (https://blog.mapbox.com/a-new-algorithm-for-finding-a-visual-center-of-a-polygon-7c77e6492fbc)\n        layer\n          .bindTooltip(String(feature.properties.proj_id), {\n            permanent: true,\n            direction: 'center',\n            className: 'project-area-label',\n          })\n          .openTooltip();\n      },\n    });\n    this.projectAreasLayer.addTo(this.map);\n  }\n}\n",
            "properties": [
                {
                    "name": "legend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | undefined",
                    "optional": true,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MapViewOptions",
            "id": "interface-MapViewOptions-e80f8f46200003011db5c4644c8cd0656fbbf82f44ff7b1621706b9275f8844205505adfff3d6caac52b139c615765e1ad4e7fbdc3e1380b5c55ab44d20c8935",
            "file": "src/app/types/map.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as L from 'leaflet';\n\nimport { BaseLayerType, BoundaryConfig, DataLayerConfig } from '../types';\nimport * as esri from 'esri-leaflet';\n\nexport interface Map {\n  id: string;\n  name: string;\n  config: MapConfig;\n  instance?: L.Map | undefined;\n  baseLayerRef?: L.Layer | undefined;\n  boundaryLayerRef?: L.Layer | undefined;\n  existingProjectsLayerRef?: esri.FeatureLayer | undefined;\n  dataLayerRef?: L.TileLayer | undefined;\n  clonedDrawingRef?: L.FeatureGroup | undefined;\n  drawnPolygonLookup?: { [key: string]: L.Layer };\n  legend?: HTMLElement | undefined;\n  regionLayerRef?: L.GeoJSON | undefined;\n}\n\nexport interface MapConfig {\n  baseLayerType: BaseLayerType;\n  boundaryLayerConfig: BoundaryConfig;\n  dataLayerConfig: DataLayerConfig;\n  showExistingProjectsLayer: boolean;\n}\n\nexport interface MapViewOptions {\n  selectedMapIndex: number;\n  numVisibleMaps: number;\n  zoom: number;\n  center: L.LatLngTuple;\n}\n",
            "properties": [
                {
                    "name": "center",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.LatLngTuple",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "numVisibleMaps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selectedMapIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MetricConfig",
            "id": "interface-MetricConfig-a8c380f17d030be2614817d9a6996ef6e0c433977d57302bace0c5b7272bcca27c3ee7177c1f4daadf67130088a401cd20a6fda282152df3e379bbda503ac815",
            "file": "src/app/types/data.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NONE_COLORMAP } from './legend.types';\n\nexport interface BoundaryConfig {\n  display_name?: string;\n  boundary_name: string;\n  vector_name: string;\n  shape_name: string;\n  region_name?: string;\n}\n\nexport interface ConditionsConfig extends DataLayerConfig {\n  region_name?: string;\n  region_geoserver_name?: string;\n  pillars?: PillarConfig[];\n  raw_data?: boolean;\n  translated_data?: boolean;\n  future_data?: boolean;\n}\n\nexport interface ConditionsMetadata {\n  data_download_link?: string;\n  data_provider?: string;\n  data_year?: string;\n  reference_link?: string;\n  source?: string;\n  source_link?: string;\n  min_value?: number;\n  max_value?: number;\n}\n\nexport interface DataLayerConfig extends ConditionsMetadata {\n  display_name?: string;\n  legend_name?: string;\n  data_units?: string;\n  region_geoserver_name?: string;\n  filepath?: string;\n  normalized_data_download_path?: string;\n  layer?: string;\n  raw_layer?: string;\n  normalized_layer?: string;\n  colormap?: string;\n  normalized?: boolean;\n  opacity?: number;\n}\n\nexport interface ElementConfig extends DataLayerConfig {\n  display?: boolean;\n  element_name?: string;\n  metrics?: MetricConfig[];\n}\n\nexport interface MetricConfig extends DataLayerConfig {\n  metric_name: string;\n  data_units?: string;\n  raw_data_download_path?: string;\n}\n\nexport interface PillarConfig extends DataLayerConfig {\n  display?: boolean;\n  pillar_name?: string;\n  elements?: ElementConfig[];\n  future_layer?: string;\n  future_data_download_path?: string;\n}\n\nexport enum ConditionTreeType {\n  RAW = 'Raw',\n  TRANSLATED = 'Translated',\n  FUTURE = 'Future',\n}\n\nexport const NONE_BOUNDARY_CONFIG: BoundaryConfig = {\n  boundary_name: '',\n  display_name: 'None',\n  vector_name: '',\n  shape_name: 'None',\n};\n\nexport const NONE_DATA_LAYER_CONFIG: DataLayerConfig = {\n  display_name: 'None',\n  filepath: '',\n  layer: '',\n  colormap: NONE_COLORMAP,\n};\n\nexport enum FormMessageType {\n  SUCCESS,\n  ERROR,\n  ALERT,\n}\n",
            "properties": [
                {
                    "name": "data_units",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "metric_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "raw_data_download_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "DataLayerConfig"
            ]
        },
        {
            "name": "Note",
            "id": "interface-Note-4da9f0a08c0b7206ba8fa0b41692bb3ba3db75412e18c69a4acdf7e2c9fd1a37d3e82e98b74d0f6d0def10e1321f6e3014968cd61d36498d877a364611960425",
            "file": "src/app/services/plan-notes.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { BackendConstants } from '../backend-constants';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface Note {\n  id: number;\n  user_id: number;\n  user_name: string;\n  content: string;\n  created_at: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlanNotesService {\n  constructor(private http: HttpClient) {}\n\n  getNotes(planningAreaId: number) {\n    return this.http.get<Note[]>(\n      BackendConstants.END_POINT.concat(\n        `/planning/planning_area/${planningAreaId}/note`\n      ),\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  addNote(planningAreaId: number, note: string) {\n    return this.http.post<Note>(\n      BackendConstants.END_POINT.concat(\n        `/planning/planning_area/${planningAreaId}/note`\n      ),\n      { content: note },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  deleteNote(planningAreaId: number, noteId: number) {\n    return this.http.delete<Note>(\n      BackendConstants.END_POINT.concat(\n        `/planning/planning_area/${planningAreaId}/note/${noteId}`\n      ),\n      {\n        withCredentials: true,\n      }\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "user_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PasswordFieldsErrors",
            "id": "interface-PasswordFieldsErrors-cfcefa4b6f7f2ead82061147d8aa0ee4d9f7c144946c69844b3934d831175265f99300b8960d56a67c55976fdb81e3c795d3a26f7adefe2e5a87d796ef69da0e",
            "file": "src/app/validators/passwords.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\n// the possible custom errors\nexport interface PasswordFieldsErrors {\n  newPasswordMustBeNew: boolean;\n  newPasswordsMustMatch: boolean;\n}\n\n/**\n * Validates that the current password is not the same as the new one\n * @param currentPasswordFieldName the name of the current password formControl element on the form\n * @param passwordFieldName the name of the new password formControl element on the form\n * @return if error returns `newPasswordMustBeNew: true`. Will additionally mark with the error the field with passwordFieldName\n */\nexport function passwordMustBeNewValidator(\n  currentPasswordFieldName: string,\n  passwordFieldName: string\n) {\n  const newPasswordValidation: ValidatorFn = (\n    formControls: AbstractControl\n  ): ValidationErrors | null => {\n    const currentPassword = formControls.get(currentPasswordFieldName)?.value;\n    const password = formControls.get(passwordFieldName)?.value;\n\n    // error\n    const passwordMustBeNewError: Partial<PasswordFieldsErrors> = {\n      newPasswordMustBeNew: true,\n    };\n\n    if (\n      currentPassword?.length > 0 &&\n      password?.length > 0 &&\n      currentPassword === password\n    ) {\n      return passwordMustBeNewError;\n    }\n\n    return null;\n  };\n  return newPasswordValidation;\n}\n\n/**\n * Validates the format of the password and that it matches the password confirmation\n * @param passwordFieldName the name of the new password formControl element on the form\n * @param passwordConfirmFieldName the name of the new password confirmation formControl element on the form\n * @return if error returns `newPasswordsMustMatch: true`\n */\nexport function passwordsMustMatchValidator(\n  passwordFieldName: string,\n  passwordConfirmFieldName: string\n): ValidatorFn {\n  const crossFieldValidators: ValidatorFn = (\n    formControls: AbstractControl\n  ): ValidationErrors | null => {\n    const errorKey = 'newPasswordsMustMatch';\n    const passwordsMustMatchError: Pick<PasswordFieldsErrors, typeof errorKey> =\n      { newPasswordsMustMatch: true };\n\n    const password = formControls.get(passwordFieldName)?.value;\n    const confirmation = formControls.get(passwordConfirmFieldName)?.value;\n\n    if (\n      password?.length > 0 &&\n      confirmation?.length > 0 &&\n      password !== confirmation\n    ) {\n      return passwordsMustMatchError;\n    }\n    return null;\n  };\n  return crossFieldValidators;\n}\n",
            "properties": [
                {
                    "name": "newPasswordMustBeNew",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "newPasswordsMustMatch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PasswordResetToken",
            "id": "interface-PasswordResetToken-b7f15b1b913893a17014d7a3b7e7abdca29a81c1336174b7a9e45fbfeeab3e95c32634be4f211c0ce06000703786588450d3ff4c2f6d948dc4018cea5f234737",
            "file": "src/app/services/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport {\n  ActivatedRouteSnapshot,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SNACK_NOTICE_CONFIG } from '../../app/shared/constants';\nimport {\n  BehaviorSubject,\n  catchError,\n  concatMap,\n  map,\n  Observable,\n  of,\n  take,\n  tap,\n  throwError,\n} from 'rxjs';\n\nimport { BackendConstants } from '../backend-constants';\nimport { User } from '../types';\nimport { RedirectService } from './redirect.service';\n\ninterface LogoutResponse {\n  detail: string;\n}\n\nexport interface PasswordResetToken {\n  userId: string;\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  loggedInStatus$ = new BehaviorSubject<boolean | null>(null);\n  isLoggedIn$: Observable<boolean | null> = this.loggedInStatus$;\n  loggedInUser$ = new BehaviorSubject<User | null | undefined>(undefined);\n\n  private readonly API_ROOT = BackendConstants.END_POINT + '/dj-rest-auth/';\n\n  constructor(\n    private http: HttpClient,\n    private cookieService: CookieService,\n    private snackbar: MatSnackBar,\n    private redirectService: RedirectService\n  ) {}\n\n  currentUser() {\n    return this.loggedInUser$.value;\n  }\n\n  login(email: string, password: string) {\n    return this.http\n      .post(\n        this.API_ROOT.concat('login/'),\n        { email, password },\n        { withCredentials: true }\n      )\n      .pipe(\n        map((response) => {\n          const redirectUrl = this.redirectService.shouldRedirect(email);\n          // remove redirect\n          this.redirectService.removeRedirect();\n          return redirectUrl || 'home';\n        }),\n        tap((_) => {\n          this.loggedInStatus$.next(true);\n          this.getLoggedInUser()\n            .pipe(take(1))\n            .subscribe((user) => {\n              this.loggedInUser$.next(user);\n            });\n        })\n      );\n  }\n\n  signup(\n    email: string,\n    password1: string,\n    password2: string,\n    firstName: string,\n    lastName: string\n  ) {\n    return this.http\n      .post(this.API_ROOT.concat('registration/'), {\n        password1,\n        password2,\n        email,\n        first_name: firstName,\n        last_name: lastName,\n      })\n      .pipe(\n        tap(() => {\n          const redirect = this.redirectService.shouldRedirect(email);\n          if (redirect) {\n            // associate the redirect with the newly created user\n            this.redirectService.setRedirect(redirect, email);\n          }\n        })\n      );\n  }\n\n  resendValidationEmail(email: string) {\n    return this.http.post(this.API_ROOT.concat('registration/resend-email/'), {\n      email,\n    });\n  }\n\n  logout() {\n    return this.http\n      .get<LogoutResponse>(this.API_ROOT.concat('logout/'), {\n        withCredentials: true,\n      })\n      .pipe(\n        tap((response) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          this.snackbar.open(response.detail, 'Dismiss', SNACK_NOTICE_CONFIG);\n        })\n      );\n  }\n\n  validateAccount(token: string): Observable<boolean> {\n    return this.http\n      .post(this.API_ROOT.concat('registration/account-confirm-email/'), {\n        key: token,\n      })\n      .pipe(\n        map((_) => true),\n        catchError((error: Error) => {\n          return of(false);\n        })\n      );\n  }\n\n  private refreshToken() {\n    return this.http\n      .post(\n        this.API_ROOT.concat('token/refresh/'),\n        { refresh: this.cookieService.get('my-refresh-token') },\n        { withCredentials: true }\n      )\n      .pipe(\n        tap((response: any) => {\n          this.loggedInStatus$.next(!!response.access);\n        }),\n        catchError((err) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          return throwError(err);\n        })\n      );\n  }\n\n  /** Fetch the currently logged in user from the backend. */\n  refreshLoggedInUser(): Observable<User> {\n    // Must refresh the auth cookie to retrieve user\n    return this.refreshToken().pipe(\n      concatMap((_) => {\n        return this.getLoggedInUser();\n      })\n    );\n  }\n\n  private getLoggedInUser(): Observable<User> {\n    return this.http\n      .get(this.API_ROOT.concat('user/'), { withCredentials: true })\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n            id: response.pk,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  changePassword(\n    currentPassword: string,\n    newPassword1: string,\n    newPassword2: string\n  ): Observable<any> {\n    return this.http.post(\n      this.API_ROOT.concat('password/change/'),\n      {\n        old_password: currentPassword,\n        new_password1: newPassword1,\n        new_password2: newPassword2,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  sendPasswordResetEmail(email: string): Observable<any> {\n    return this.http.post(\n      this.API_ROOT.concat('password/reset/'),\n      {\n        email: email,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  resetPassword(\n    userId: string,\n    token: string,\n    password1: string,\n    password2: string\n  ): Observable<boolean> {\n    return this.http\n      .post(\n        this.API_ROOT.concat('password/reset/confirm/'),\n        {\n          uid: userId,\n          token: token,\n          new_password1: password1,\n          new_password2: password2,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          return response.success;\n        })\n      );\n  }\n\n  /** Gets a user given the id. */\n  getUser(userId: number): Observable<User> {\n    const url = BackendConstants.END_POINT.concat(\n      `/users/get_user_by_id/?id=${userId}`\n    );\n    return this.http\n      .get(url, {\n        withCredentials: true,\n      })\n      .pipe(\n        take(1),\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          return user;\n        })\n      );\n  }\n\n  updateUserInfo(newUser: Partial<User>): Observable<User> {\n    return this.http\n      .patch(\n        this.API_ROOT.concat('user'),\n        {\n          first_name: newUser.firstName,\n          last_name: newUser.lastName,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  /**\n   * deprecated\n   * @param newUser\n   * @param currentPassword\n   */\n  updateUser(newUser: User, currentPassword: string): Observable<User> {\n    return this.http\n      .patch(\n        this.API_ROOT.concat('user/'),\n        {\n          email: newUser.email,\n          username: newUser.username,\n          first_name: newUser.firstName,\n          last_name: newUser.lastName,\n          current_password: currentPassword,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  /**\n   * \"Deletes\" user from backend. The behavior of this command is to disable the user account,\n   *  not fully delete it, so data can be restored later if necessary.\n   */\n  deleteUser(user: User, password: string): Observable<boolean> {\n    return this.http\n      .post(\n        BackendConstants.END_POINT.concat('/users/delete/'),\n        {\n          password: password,\n          email: user.email,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        take(1),\n        map((result: any) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          return result.deleted;\n        })\n      );\n  }\n\n  validatePasswordResetToken(tokenDetails: PasswordResetToken) {\n    return this.http.get(\n      this.API_ROOT.concat(\n        'password/reset/',\n        tokenDetails.userId,\n        '/',\n        tokenDetails.token\n      )\n    );\n  }\n}\n\n/** An AuthGuard used to prevent access to pages that require sign-in. If the user is not signed\n *  in, redirect to the sign-in page.\n */\n@Injectable()\nexport class AuthGuard {\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private redirectService: RedirectService\n  ) {}\n\n  canActivate(\n    route?: ActivatedRouteSnapshot,\n    state?: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.authService.refreshLoggedInUser().pipe(\n      map((_) => true),\n      catchError((_) => {\n        if (state) {\n          this.redirectService.setRedirect(state.url);\n        }\n        this.router.navigate(['login']);\n        return of(false);\n      })\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PillarConfig",
            "id": "interface-PillarConfig-a8c380f17d030be2614817d9a6996ef6e0c433977d57302bace0c5b7272bcca27c3ee7177c1f4daadf67130088a401cd20a6fda282152df3e379bbda503ac815",
            "file": "src/app/types/data.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NONE_COLORMAP } from './legend.types';\n\nexport interface BoundaryConfig {\n  display_name?: string;\n  boundary_name: string;\n  vector_name: string;\n  shape_name: string;\n  region_name?: string;\n}\n\nexport interface ConditionsConfig extends DataLayerConfig {\n  region_name?: string;\n  region_geoserver_name?: string;\n  pillars?: PillarConfig[];\n  raw_data?: boolean;\n  translated_data?: boolean;\n  future_data?: boolean;\n}\n\nexport interface ConditionsMetadata {\n  data_download_link?: string;\n  data_provider?: string;\n  data_year?: string;\n  reference_link?: string;\n  source?: string;\n  source_link?: string;\n  min_value?: number;\n  max_value?: number;\n}\n\nexport interface DataLayerConfig extends ConditionsMetadata {\n  display_name?: string;\n  legend_name?: string;\n  data_units?: string;\n  region_geoserver_name?: string;\n  filepath?: string;\n  normalized_data_download_path?: string;\n  layer?: string;\n  raw_layer?: string;\n  normalized_layer?: string;\n  colormap?: string;\n  normalized?: boolean;\n  opacity?: number;\n}\n\nexport interface ElementConfig extends DataLayerConfig {\n  display?: boolean;\n  element_name?: string;\n  metrics?: MetricConfig[];\n}\n\nexport interface MetricConfig extends DataLayerConfig {\n  metric_name: string;\n  data_units?: string;\n  raw_data_download_path?: string;\n}\n\nexport interface PillarConfig extends DataLayerConfig {\n  display?: boolean;\n  pillar_name?: string;\n  elements?: ElementConfig[];\n  future_layer?: string;\n  future_data_download_path?: string;\n}\n\nexport enum ConditionTreeType {\n  RAW = 'Raw',\n  TRANSLATED = 'Translated',\n  FUTURE = 'Future',\n}\n\nexport const NONE_BOUNDARY_CONFIG: BoundaryConfig = {\n  boundary_name: '',\n  display_name: 'None',\n  vector_name: '',\n  shape_name: 'None',\n};\n\nexport const NONE_DATA_LAYER_CONFIG: DataLayerConfig = {\n  display_name: 'None',\n  filepath: '',\n  layer: '',\n  colormap: NONE_COLORMAP,\n};\n\nexport enum FormMessageType {\n  SUCCESS,\n  ERROR,\n  ALERT,\n}\n",
            "properties": [
                {
                    "name": "display",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "elements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementConfig[]",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "future_data_download_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "future_layer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "pillar_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "DataLayerConfig"
            ]
        },
        {
            "name": "Plan",
            "id": "interface-Plan-99047d95c80b6fe19df0e845afca424adf15eb0a629d85388c1e01e4f938f2221e3929f362361eaba1bf1661d1a5a112fb43ab5325541246f22770290f8440e4",
            "file": "src/app/types/plan.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Region } from './region.types';\n\nexport interface Plan {\n  area_acres: number;\n  area_m2: number;\n  created_at: string;\n  creator: string;\n  geometry?: GeoJSON.GeoJSON;\n  id: number;\n  latest_updated?: string;\n  name: string;\n  notes?: string;\n  permissions: string[];\n  region_name: Region;\n  role: string;\n  scenario_count: number;\n  user: number;\n}\n\nexport type PreviewPlan = Omit<Plan, 'geometry' | 'area_m2'>;\n\nexport interface CreatePlanPayload {\n  geometry: GeoJSON.GeoJSON;\n  name: string;\n  region_name: Region;\n}\n\nexport interface BackendProjectArea {\n  id: number;\n  geometry: GeoJSON.GeoJSON;\n  properties?: {\n    estimated_area_treated?: number;\n    owner?: number;\n    project?: number;\n  };\n}\n",
            "properties": [
                {
                    "name": "area_acres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "area_m2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "creator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "geometry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GeoJSON.GeoJSON",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "latest_updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "region_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Region",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "scenario_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PlanCreateDialogData",
            "id": "interface-PlanCreateDialogData-8112d8ce7132342030347026292ab8782b54a0f13f8c27a893ab6d7898b4c0febe2f88ba5716c854f8489aff18d35be4aef499b9425e558c09d410ca6869cd11",
            "file": "src/app/map/plan-create-dialog/plan-create-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA,\n  MatLegacyDialogRef as MatDialogRef,\n} from '@angular/material/legacy-dialog';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Component, Inject } from '@angular/core';\nimport { PlanService, SessionService } from '@services';\nimport { firstValueFrom } from 'rxjs';\nimport { SNACK_ERROR_CONFIG } from '../../../app/shared/constants';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { Region } from '../../types';\n\nexport interface PlanCreateDialogData {\n  shape: GeoJSON.GeoJSON;\n}\n\n@Component({\n  selector: 'app-plan-create-dialog',\n  templateUrl: './plan-create-dialog.component.html',\n  styleUrls: ['./plan-create-dialog.component.scss'],\n})\nexport class PlanCreateDialogComponent {\n  planForm = new FormGroup({\n    planName: new FormControl('', Validators.required),\n  });\n\n  submitting = false;\n  selectedRegion$ = this.sessionService.region$.asObservable();\n\n  constructor(\n    private dialogRef: MatDialogRef<PlanCreateDialogComponent>,\n    private planService: PlanService,\n    private sessionService: SessionService,\n    private matSnackBar: MatSnackBar,\n    @Inject(MAT_DIALOG_DATA) public data: PlanCreateDialogData\n  ) {}\n\n  async submit() {\n    if (this.planForm.valid) {\n      this.submitting = true;\n      const planExists = await firstValueFrom(\n        this.planService.planNameExists(\n          this.planForm.get('planName')?.value || ''\n        )\n      );\n      if (planExists) {\n        this.planForm.setErrors({ planNameExists: planExists });\n        this.submitting = false;\n        return;\n      }\n      const planName = this.planForm.get('planName')?.value || '';\n      const region = await firstValueFrom(this.selectedRegion$);\n      if (!region) {\n        this.matSnackBar.open(\n          '[Error] Please select a region!',\n          'Dismiss',\n          SNACK_ERROR_CONFIG\n        );\n        this.submitting = false;\n        return;\n      }\n      this.createPlan(planName, this.data.shape, region);\n    }\n  }\n\n  private createPlan(name: string, shape: GeoJSON.GeoJSON, region: Region) {\n    this.planService\n      .createPlan({\n        name: name,\n        region_name: region,\n        geometry: shape,\n      })\n      .subscribe({\n        next: (result) => {\n          this.dialogRef.close(result!.id);\n          this.submitting = false;\n        },\n        error: (e) => {\n          this.matSnackBar.open(\n            '[Error] Unable to create plan due to backend error.',\n            'Dismiss',\n            SNACK_ERROR_CONFIG\n          );\n          this.submitting = false;\n        },\n      });\n  }\n\n  cancel(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "properties": [
                {
                    "name": "shape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GeoJSON.GeoJSON",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PlanState",
            "id": "interface-PlanState-93c649303a87123a6608c45cdf19dc18128ee6218d28b761da1ed8a82c54b8f24a55d7931c25f9e63c4cf3d7daa87830842fc612d4a57d9dfd809128b0f901a5",
            "file": "src/app/services/plan-state.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PlanService } from './plan.service';\nimport { ScenarioService } from './scenario.service';\nimport { TreatmentGoalsService } from './treatment-goals.service';\nimport {\n  Plan,\n  BackendProjectArea,\n  CreatePlanPayload,\n  ProjectArea,\n  Region,\n  Scenario,\n  ScenarioConfig,\n  TreatmentGoalConfig,\n  TreatmentQuestionConfig,\n} from '../types';\nimport { BehaviorSubject, map, switchMap, take, tap } from 'rxjs';\nimport { Feature } from 'geojson';\n\nexport interface PlanState {\n  all: {\n    [planId: number]: Plan;\n  };\n  currentPlanId: Plan['id'] | null;\n  currentScenarioId: Scenario['id'] | null;\n  mapConditionLayer: string | null;\n  mapShapes: Feature[] | null;\n  legendUnits: string | null;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlanStateService {\n  // Warning: do not mutate state!\n  readonly planState$ = new BehaviorSubject<PlanState>({\n    all: {}, // All plans indexed by id\n    currentPlanId: null,\n    currentScenarioId: null,\n    mapConditionLayer: null,\n    mapShapes: null,\n    legendUnits: null,\n  });\n  readonly treatmentGoalsConfig$ = new BehaviorSubject<\n    TreatmentGoalConfig[] | null\n  >(null);\n\n  readonly planRegion$ = new BehaviorSubject<Region>(Region.SIERRA_NEVADA);\n\n  constructor(\n    private planService: PlanService,\n    private scenarioService: ScenarioService,\n    private treatmentGoalsService: TreatmentGoalsService\n  ) {\n    this.treatmentGoalsService\n      .getTreatmentGoalsForArea(this.planRegion$.getValue())\n      .subscribe((config: TreatmentGoalConfig[]) => {\n        this.treatmentGoalsConfig$.next(config);\n      });\n  }\n\n  createPlan(basePlan: CreatePlanPayload) {\n    return this.planService.createPlan(basePlan).pipe(\n      tap((result: Plan) => {\n        this.addPlanToState(result);\n      })\n    );\n  }\n\n  getPlan(planId: string) {\n    return this.planService\n      .getPlan(planId)\n      .pipe(tap((plan) => this.addPlanToState(plan)));\n  }\n\n  getScenario(scenarioId: string) {\n    return this.scenarioService.getScenario(scenarioId).pipe(\n      switchMap((scenario) => {\n        // TODO this is pretty bad, why do we need to pull stuff from another endpoint for this?\n        return this.getSelectedQuestionFromConfig(\n          scenario.configuration.question_id!\n        ).pipe(\n          take(1),\n          map((selectedQuestion) => {\n            return {\n              ...scenario,\n              ...{\n                configuration: this.convertToScenarioConfig(\n                  scenario.configuration,\n                  selectedQuestion\n                ),\n              },\n            };\n          })\n        );\n      })\n    );\n  }\n\n  getSelectedQuestionFromConfig(questionId: number) {\n    var selectedQuestion: TreatmentQuestionConfig | null = null;\n\n    return this.treatmentGoalsConfig$.pipe(\n      map((goals) => {\n        goals!.forEach((goal) => {\n          goal.questions.forEach((question) => {\n            if (question.id === questionId) {\n              selectedQuestion = question;\n            }\n          });\n        });\n        return selectedQuestion;\n      })\n    );\n  }\n\n  private convertToScenarioConfig(\n    config: any,\n    selectedQuestion: any\n  ): ScenarioConfig {\n    return {\n      ...config,\n      ...{\n        treatment_question: selectedQuestion,\n        project_areas: this.convertToProjectAreas(config.project_areas),\n      },\n    };\n  }\n\n  private convertToProjectAreas(scenarioProjectAreas: {\n    [id: number]: BackendProjectArea;\n  }): ProjectArea[] {\n    if (!scenarioProjectAreas) {\n      return [];\n    }\n\n    let projectAreas: ProjectArea[] = [];\n    Object.values(scenarioProjectAreas).forEach((projectArea) => {\n      projectAreas.push({\n        id: projectArea.id.toString(),\n        projectId: projectArea.properties?.project?.toString(),\n        projectArea: projectArea.geometry,\n        owner: projectArea.properties?.owner?.toString(),\n        estimatedAreaTreated: projectArea.properties?.estimated_area_treated,\n      });\n    });\n\n    return projectAreas;\n  }\n\n  createScenario(scenarioParameters: any) {\n    return this.scenarioService.createScenario(scenarioParameters).pipe(\n      tap((result) => {\n        if (result.id) {\n          this.updateStateWithScenario(result.id.toString());\n        }\n      })\n    );\n  }\n\n  getMetricData(metric_paths: any) {\n    return this.scenarioService.getMetricData(\n      metric_paths,\n      this.planRegion$.value\n    );\n  }\n\n  /**\n   * Updates planRegion and treatmentGoalsConfig if value is a valid Region\n   */\n  setPlanRegion(value: Region) {\n    if (Object.values(Region).includes(value)) {\n      this.planRegion$.next(value);\n      this.treatmentGoalsService\n        .getTreatmentGoalsForArea(this.planRegion$.getValue())\n        .subscribe((config: TreatmentGoalConfig[]) => {\n          this.treatmentGoalsConfig$.next(config);\n        });\n    }\n  }\n\n  private addPlanToState(plan: Plan) {\n    // Object.freeze() enforces shallow runtime immutability\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n        [plan.id]: plan,\n      },\n    });\n\n    this.planState$.next(updatedState);\n  }\n\n  updateStateWithPlan(planId: number | null) {\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n      },\n      currentPlanId: planId,\n    });\n\n    this.planState$.next(updatedState);\n  }\n\n  updateStateWithScenario(scenarioId: string | null) {\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n      },\n      currentScenarioId: scenarioId,\n    });\n\n    this.planState$.next(updatedState);\n  }\n\n  updateStateWithConditionLayer(layer: string | null) {\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n      },\n      mapConditionLayer: layer,\n    });\n    this.planState$.next(updatedState);\n  }\n\n  updateStateWithShapes(shapes: any | null) {\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n      },\n      mapShapes: shapes,\n    });\n    this.planState$.next(updatedState);\n  }\n\n  updateStateWithLegendUnits(legendUnits: string | null) {\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n      },\n      legendUnits: legendUnits,\n    });\n\n    this.planState$.next(updatedState);\n  }\n}\n",
            "properties": [
                {
                    "name": "all",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "currentPlanId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "currentScenarioId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "legendUnits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "mapConditionLayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "mapShapes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Feature[] | null",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PriorityRow",
            "id": "interface-PriorityRow-bdce8719d3597b0d0b18bfe059ca8a18f88611dffe2f4310e7d4ba24a79d0d625b3b27a99b2a6d7307a633fd90f366b234824d8b09211e6c6d7c2ea93a41e623",
            "file": "src/app/types/scenario.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SCENARIO_STATUS = 'ACTIVE' | 'ARCHIVED';\n\nexport interface Scenario {\n  id?: string;\n  name: string;\n  notes?: string;\n  creator?: string;\n  planning_area: string;\n  configuration: ScenarioConfig;\n  scenario_result?: ScenarioResult;\n  status: SCENARIO_STATUS;\n  user?: number;\n}\n\n/**\n * TODO this type is used for the backend payload\n * as well as the frontend interface before saving the scenario.\n * This is bad, as the types are not the same.\n * For example, `treatment_question` only exists on the FE but does not exists on\n * the backend payload.\n * Similarly, `question_id` only exists on the backend payload, while on the FE side\n * this is part of `treatment_question`.\n */\nexport interface ScenarioConfig {\n  est_cost?: number;\n  max_budget?: number;\n  max_slope?: number;\n  max_treatment_area_ratio?: number;\n  min_distance_from_road?: number;\n  // TODO is this even being used??\n  project_areas?: ProjectArea[];\n  treatment_question?: TreatmentQuestionConfig | null;\n  excluded_areas?: string[];\n  stand_size?: string;\n  scenario_priorities?: string[];\n  question_id?: number;\n}\n\nexport interface ScenarioResult {\n  status: ScenarioResultStatus;\n  completed_at: string;\n  result: {\n    features: FeatureCollection[];\n    type: string;\n  };\n}\n\nexport type ScenarioResultStatus =\n  | 'LOADING' // when loading results\n  | 'NOT_STARTED' // Added by FE when the scenario is not created yet.\n  | 'PENDING' // Scenario created, in queue\n  | 'RUNNING' // Scenario created, being processed\n  | 'SUCCESS' // Run completed successfully\n  | 'FAILURE' // Run failed;\n  | 'PANIC' // Run failed; panic\n  | 'TIMED_OUT'; // Run failed; timed out\n\nexport interface TreatmentGoalConfig {\n  category_name?: string;\n  questions: TreatmentQuestionConfig[];\n}\n\n// TODO is this the right type?\nexport interface FeatureCollection extends GeoJSON.FeatureCollection {\n  properties: any;\n}\n\nexport interface TreatmentQuestionConfig {\n  id?: number;\n  global_thresholds?: string[];\n  long_question_text?: string;\n  scenario_output_fields_paths?: {\n    [key: string]: string[];\n  };\n  scenario_priorities?: string[];\n  short_question_text?: string;\n  stand_thresholds?: string[];\n  weights?: number[];\n\n  description?: string[];\n}\n\nexport interface ProjectArea {\n  id: string;\n  projectId?: string;\n  projectArea: GeoJSON.GeoJSON;\n  owner?: string;\n  estimatedAreaTreated?: number;\n  actualAcresTreated?: number;\n}\n\nexport interface PriorityRow {\n  selected?: boolean;\n  visible?: boolean; // Visible as raster data on map\n  expanded?: boolean; // Children in table are not hidden\n  hidden?: boolean; // Row hidden from table (independent of \"visible\" attribute)\n  disabled?: boolean; // Cannot be selected (because ancestor is selected)\n  conditionName: string;\n  displayName?: string;\n  filepath: string;\n  children: PriorityRow[];\n  level: number;\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PriorityRow[]",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "conditionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "filepath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 94
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Project",
            "id": "interface-Project-5d0ed693bb565780b49bf2384a4069cf91e66f39679c8b9602eb3045174846953d9d101a5d90e763671a8e837115e0b77c6e6ad8b07bbf855f2c7b650c41f3dc",
            "file": "src/app/map/project-card/project-card.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Feature, Geometry } from 'geojson';\n\ninterface Project {\n  PROJECT_NAME?: string;\n  PROJECT_STATUS?: string;\n  PROJECT_START_DATE?: number;\n  PROJECT_END_DATE?: number;\n  LAST_UPDATED?: number;\n  PROJECT_TYPE?: string;\n  REGION?: string;\n  UNIT?: string;\n  treatments: Treatment[];\n}\n\ninterface Treatment {\n  PROJECT_NAME?: string;\n  TREATMENT_NAME?: string;\n  TREATMENT_OBJECTIVE?: string;\n  ACTIVITY_STATUS?: string;\n}\n\n@Component({\n  selector: 'app-project-card',\n  templateUrl: './project-card.component.html',\n  styleUrls: ['./project-card.component.scss'],\n})\nexport class ProjectCardComponent implements AfterViewInit, OnInit {\n  @Input() features!: Feature<Geometry, any>[];\n  @Output() initializedEvent = new EventEmitter<void>();\n\n  projects!: Project[];\n\n  ngOnInit() {\n    this.projects = this.getProjects();\n  }\n\n  ngAfterViewInit(): void {\n    this.initializedEvent.emit();\n  }\n\n  isProject(feature: Feature<Geometry, any>): boolean {\n    return !!feature.properties.PROJECT_NAME;\n  }\n\n  private getProjects(): Project[] {\n    const projectNames: Set<Project> = new Set<Project>();\n    const projects: Map<string, Project> = new Map<string, Project>();\n\n    this.features\n      .filter((feature) => this.isProject(feature))\n      .forEach((feature) => {\n        const projectName = feature.properties.PROJECT_NAME;\n        if (projectNames.has(projectName)) {\n          projects\n            .get(projectName)\n            ?.treatments.push(feature.properties as Treatment);\n        } else {\n          projectNames.add(projectName);\n          const project = feature.properties as Project;\n          project.treatments = [feature.properties as Treatment];\n          projects.set(projectName, project);\n        }\n      });\n\n    return Array.from(projects.values());\n  }\n}\n",
            "properties": [
                {
                    "name": "LAST_UPDATED",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "PROJECT_END_DATE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "PROJECT_NAME",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "PROJECT_START_DATE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "PROJECT_STATUS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "PROJECT_TYPE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "REGION",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "treatments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Treatment[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "UNIT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectArea",
            "id": "interface-ProjectArea-bdce8719d3597b0d0b18bfe059ca8a18f88611dffe2f4310e7d4ba24a79d0d625b3b27a99b2a6d7307a633fd90f366b234824d8b09211e6c6d7c2ea93a41e623",
            "file": "src/app/types/scenario.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SCENARIO_STATUS = 'ACTIVE' | 'ARCHIVED';\n\nexport interface Scenario {\n  id?: string;\n  name: string;\n  notes?: string;\n  creator?: string;\n  planning_area: string;\n  configuration: ScenarioConfig;\n  scenario_result?: ScenarioResult;\n  status: SCENARIO_STATUS;\n  user?: number;\n}\n\n/**\n * TODO this type is used for the backend payload\n * as well as the frontend interface before saving the scenario.\n * This is bad, as the types are not the same.\n * For example, `treatment_question` only exists on the FE but does not exists on\n * the backend payload.\n * Similarly, `question_id` only exists on the backend payload, while on the FE side\n * this is part of `treatment_question`.\n */\nexport interface ScenarioConfig {\n  est_cost?: number;\n  max_budget?: number;\n  max_slope?: number;\n  max_treatment_area_ratio?: number;\n  min_distance_from_road?: number;\n  // TODO is this even being used??\n  project_areas?: ProjectArea[];\n  treatment_question?: TreatmentQuestionConfig | null;\n  excluded_areas?: string[];\n  stand_size?: string;\n  scenario_priorities?: string[];\n  question_id?: number;\n}\n\nexport interface ScenarioResult {\n  status: ScenarioResultStatus;\n  completed_at: string;\n  result: {\n    features: FeatureCollection[];\n    type: string;\n  };\n}\n\nexport type ScenarioResultStatus =\n  | 'LOADING' // when loading results\n  | 'NOT_STARTED' // Added by FE when the scenario is not created yet.\n  | 'PENDING' // Scenario created, in queue\n  | 'RUNNING' // Scenario created, being processed\n  | 'SUCCESS' // Run completed successfully\n  | 'FAILURE' // Run failed;\n  | 'PANIC' // Run failed; panic\n  | 'TIMED_OUT'; // Run failed; timed out\n\nexport interface TreatmentGoalConfig {\n  category_name?: string;\n  questions: TreatmentQuestionConfig[];\n}\n\n// TODO is this the right type?\nexport interface FeatureCollection extends GeoJSON.FeatureCollection {\n  properties: any;\n}\n\nexport interface TreatmentQuestionConfig {\n  id?: number;\n  global_thresholds?: string[];\n  long_question_text?: string;\n  scenario_output_fields_paths?: {\n    [key: string]: string[];\n  };\n  scenario_priorities?: string[];\n  short_question_text?: string;\n  stand_thresholds?: string[];\n  weights?: number[];\n\n  description?: string[];\n}\n\nexport interface ProjectArea {\n  id: string;\n  projectId?: string;\n  projectArea: GeoJSON.GeoJSON;\n  owner?: string;\n  estimatedAreaTreated?: number;\n  actualAcresTreated?: number;\n}\n\nexport interface PriorityRow {\n  selected?: boolean;\n  visible?: boolean; // Visible as raster data on map\n  expanded?: boolean; // Children in table are not hidden\n  hidden?: boolean; // Row hidden from table (independent of \"visible\" attribute)\n  disabled?: boolean; // Cannot be selected (because ancestor is selected)\n  conditionName: string;\n  displayName?: string;\n  filepath: string;\n  children: PriorityRow[];\n  level: number;\n}\n",
            "properties": [
                {
                    "name": "actualAcresTreated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "estimatedAreaTreated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "projectArea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GeoJSON.GeoJSON",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectAreaReport",
            "id": "interface-ProjectAreaReport-8e89f3fc74e15f994d8d67b029f85fcaf01c8f71b8aced025bf7544a123b0c1cc861eb32f5dbe39fc6844da0a4f4eb3ce1dce8ed8c0cee7e37f855d4f505d68c",
            "file": "src/app/plan/project-areas/project-areas.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnChanges } from '@angular/core';\nimport {\n  getColorForProjectPosition,\n  parseResultsToTotals,\n} from '../plan-helpers';\nimport { PROJECT_AREA_COLORS } from '../../shared/constants';\n\nexport interface ProjectAreaReport {\n  id: number;\n  acres: number;\n  percentTotal: number;\n  estimatedCost: number;\n  score: number;\n}\n\nexport interface ProjectTotalReport {\n  acres: number;\n  percentTotal: number;\n  estimatedCost: number;\n}\n\n@Component({\n  selector: 'app-project-areas',\n  templateUrl: './project-areas.component.html',\n  styleUrls: ['./project-areas.component.scss'],\n})\nexport class ProjectAreasComponent implements OnChanges {\n  @Input() areas!: ProjectAreaReport[];\n  colors = PROJECT_AREA_COLORS;\n\n  total: ProjectTotalReport = {\n    acres: 0,\n    percentTotal: 0,\n    estimatedCost: 0,\n  };\n\n  ngOnChanges() {\n    this.calculateTotal();\n  }\n\n  private calculateTotal() {\n    if (this.areas) {\n      this.total = parseResultsToTotals(this.areas);\n    }\n  }\n\n  getColorByPosition = getColorForProjectPosition;\n}\n",
            "properties": [
                {
                    "name": "acres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "estimatedCost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "percentTotal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectTotalReport",
            "id": "interface-ProjectTotalReport-8e89f3fc74e15f994d8d67b029f85fcaf01c8f71b8aced025bf7544a123b0c1cc861eb32f5dbe39fc6844da0a4f4eb3ce1dce8ed8c0cee7e37f855d4f505d68c",
            "file": "src/app/plan/project-areas/project-areas.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnChanges } from '@angular/core';\nimport {\n  getColorForProjectPosition,\n  parseResultsToTotals,\n} from '../plan-helpers';\nimport { PROJECT_AREA_COLORS } from '../../shared/constants';\n\nexport interface ProjectAreaReport {\n  id: number;\n  acres: number;\n  percentTotal: number;\n  estimatedCost: number;\n  score: number;\n}\n\nexport interface ProjectTotalReport {\n  acres: number;\n  percentTotal: number;\n  estimatedCost: number;\n}\n\n@Component({\n  selector: 'app-project-areas',\n  templateUrl: './project-areas.component.html',\n  styleUrls: ['./project-areas.component.scss'],\n})\nexport class ProjectAreasComponent implements OnChanges {\n  @Input() areas!: ProjectAreaReport[];\n  colors = PROJECT_AREA_COLORS;\n\n  total: ProjectTotalReport = {\n    acres: 0,\n    percentTotal: 0,\n    estimatedCost: 0,\n  };\n\n  ngOnChanges() {\n    this.calculateTotal();\n  }\n\n  private calculateTotal() {\n    if (this.areas) {\n      this.total = parseResultsToTotals(this.areas);\n    }\n  }\n\n  getColorByPosition = getColorForProjectPosition;\n}\n",
            "properties": [
                {
                    "name": "acres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "estimatedCost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "percentTotal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RedirectData",
            "id": "interface-RedirectData-097b8bfc3ba46a165161aef6fcfa44bcc3fbe9dff9839f2df2d1354f4df6b9dcc32cc5b1cb7b2251dd4ce9c810f6183d54dc407633b27e37893d4ea11971e6c5",
            "file": "src/app/services/redirect.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface RedirectData {\n  url: string;\n  userHash?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RedirectService {\n  readonly key = 'loginRedirect';\n\n  setRedirect(url: string, user?: string) {\n    const userHash = user ? Buffer.from(user).toString('base64') : null;\n    localStorage.setItem(this.key, JSON.stringify({ url, userHash }));\n  }\n\n  private getUrl(): string | null {\n    const redirectData = this.getRedirectData();\n    if (redirectData) {\n      return redirectData.url;\n    }\n    return null;\n  }\n\n  private getEmail(): string | null {\n    const redirectData = this.getRedirectData();\n    if (redirectData && redirectData.userHash) {\n      return Buffer.from(redirectData.userHash, 'base64').toString('utf-8');\n    }\n    return null;\n  }\n\n  private getRedirectData(): RedirectData | null {\n    const redirectData = localStorage.getItem(this.key);\n    if (redirectData) {\n      return JSON.parse(redirectData);\n    }\n    return null;\n  }\n\n  removeRedirect() {\n    localStorage.removeItem(this.key);\n  }\n\n  shouldRedirect(userEmail: string) {\n    const savedEmail = this.getEmail();\n    const savedUrl = this.getUrl();\n    // if we have a user stored, we need to check it's the same as the email provided.\n    if (savedEmail && savedEmail !== userEmail) {\n      return false;\n    }\n    return savedUrl || false;\n  }\n\n  constructor() {}\n}\n",
            "properties": [
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegionOption",
            "id": "interface-RegionOption-7e7d9ea198838832e79918937a992872e1ed933cda7bb62af10513f6616b92124c8f79bb71edb0164905a2a004f49538190e1336bebb1198d1bd94856e58bd59",
            "file": "src/app/types/region.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum Region {\n  SIERRA_NEVADA = 'Sierra Nevada',\n  SOUTHERN_CALIFORNIA = 'Southern California',\n  CENTRAL_COAST = 'Central Coast',\n  NORTHERN_CALIFORNIA = 'Northern California',\n}\n\nexport interface RegionOption {\n  type: Region;\n  name: string;\n  available: boolean;\n}\n\nexport const regions: Region[] = [\n  Region.SIERRA_NEVADA,\n  Region.SOUTHERN_CALIFORNIA,\n  Region.CENTRAL_COAST,\n  Region.NORTHERN_CALIFORNIA,\n];\n\n/* Note: these are the names used by the configurations and backend\n * Defaults to Sierra Nevada. */\nexport function regionToString(region: Region | null): string {\n  switch (region) {\n    case Region.SIERRA_NEVADA:\n      return 'sierra-nevada';\n    case Region.CENTRAL_COAST:\n      return 'central-coast';\n    case Region.NORTHERN_CALIFORNIA:\n      return 'northern-california';\n    case Region.SOUTHERN_CALIFORNIA:\n      return 'southern-california';\n  }\n  return 'sierra-nevada';\n}\n",
            "properties": [
                {
                    "name": "available",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Region",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Scenario",
            "id": "interface-Scenario-bdce8719d3597b0d0b18bfe059ca8a18f88611dffe2f4310e7d4ba24a79d0d625b3b27a99b2a6d7307a633fd90f366b234824d8b09211e6c6d7c2ea93a41e623",
            "file": "src/app/types/scenario.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SCENARIO_STATUS = 'ACTIVE' | 'ARCHIVED';\n\nexport interface Scenario {\n  id?: string;\n  name: string;\n  notes?: string;\n  creator?: string;\n  planning_area: string;\n  configuration: ScenarioConfig;\n  scenario_result?: ScenarioResult;\n  status: SCENARIO_STATUS;\n  user?: number;\n}\n\n/**\n * TODO this type is used for the backend payload\n * as well as the frontend interface before saving the scenario.\n * This is bad, as the types are not the same.\n * For example, `treatment_question` only exists on the FE but does not exists on\n * the backend payload.\n * Similarly, `question_id` only exists on the backend payload, while on the FE side\n * this is part of `treatment_question`.\n */\nexport interface ScenarioConfig {\n  est_cost?: number;\n  max_budget?: number;\n  max_slope?: number;\n  max_treatment_area_ratio?: number;\n  min_distance_from_road?: number;\n  // TODO is this even being used??\n  project_areas?: ProjectArea[];\n  treatment_question?: TreatmentQuestionConfig | null;\n  excluded_areas?: string[];\n  stand_size?: string;\n  scenario_priorities?: string[];\n  question_id?: number;\n}\n\nexport interface ScenarioResult {\n  status: ScenarioResultStatus;\n  completed_at: string;\n  result: {\n    features: FeatureCollection[];\n    type: string;\n  };\n}\n\nexport type ScenarioResultStatus =\n  | 'LOADING' // when loading results\n  | 'NOT_STARTED' // Added by FE when the scenario is not created yet.\n  | 'PENDING' // Scenario created, in queue\n  | 'RUNNING' // Scenario created, being processed\n  | 'SUCCESS' // Run completed successfully\n  | 'FAILURE' // Run failed;\n  | 'PANIC' // Run failed; panic\n  | 'TIMED_OUT'; // Run failed; timed out\n\nexport interface TreatmentGoalConfig {\n  category_name?: string;\n  questions: TreatmentQuestionConfig[];\n}\n\n// TODO is this the right type?\nexport interface FeatureCollection extends GeoJSON.FeatureCollection {\n  properties: any;\n}\n\nexport interface TreatmentQuestionConfig {\n  id?: number;\n  global_thresholds?: string[];\n  long_question_text?: string;\n  scenario_output_fields_paths?: {\n    [key: string]: string[];\n  };\n  scenario_priorities?: string[];\n  short_question_text?: string;\n  stand_thresholds?: string[];\n  weights?: number[];\n\n  description?: string[];\n}\n\nexport interface ProjectArea {\n  id: string;\n  projectId?: string;\n  projectArea: GeoJSON.GeoJSON;\n  owner?: string;\n  estimatedAreaTreated?: number;\n  actualAcresTreated?: number;\n}\n\nexport interface PriorityRow {\n  selected?: boolean;\n  visible?: boolean; // Visible as raster data on map\n  expanded?: boolean; // Children in table are not hidden\n  hidden?: boolean; // Row hidden from table (independent of \"visible\" attribute)\n  disabled?: boolean; // Cannot be selected (because ancestor is selected)\n  conditionName: string;\n  displayName?: string;\n  filepath: string;\n  children: PriorityRow[];\n  level: number;\n}\n",
            "properties": [
                {
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioConfig",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "creator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "planning_area",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "scenario_result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioResult",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SCENARIO_STATUS",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ScenarioConfig",
            "id": "interface-ScenarioConfig-bdce8719d3597b0d0b18bfe059ca8a18f88611dffe2f4310e7d4ba24a79d0d625b3b27a99b2a6d7307a633fd90f366b234824d8b09211e6c6d7c2ea93a41e623",
            "file": "src/app/types/scenario.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SCENARIO_STATUS = 'ACTIVE' | 'ARCHIVED';\n\nexport interface Scenario {\n  id?: string;\n  name: string;\n  notes?: string;\n  creator?: string;\n  planning_area: string;\n  configuration: ScenarioConfig;\n  scenario_result?: ScenarioResult;\n  status: SCENARIO_STATUS;\n  user?: number;\n}\n\n/**\n * TODO this type is used for the backend payload\n * as well as the frontend interface before saving the scenario.\n * This is bad, as the types are not the same.\n * For example, `treatment_question` only exists on the FE but does not exists on\n * the backend payload.\n * Similarly, `question_id` only exists on the backend payload, while on the FE side\n * this is part of `treatment_question`.\n */\nexport interface ScenarioConfig {\n  est_cost?: number;\n  max_budget?: number;\n  max_slope?: number;\n  max_treatment_area_ratio?: number;\n  min_distance_from_road?: number;\n  // TODO is this even being used??\n  project_areas?: ProjectArea[];\n  treatment_question?: TreatmentQuestionConfig | null;\n  excluded_areas?: string[];\n  stand_size?: string;\n  scenario_priorities?: string[];\n  question_id?: number;\n}\n\nexport interface ScenarioResult {\n  status: ScenarioResultStatus;\n  completed_at: string;\n  result: {\n    features: FeatureCollection[];\n    type: string;\n  };\n}\n\nexport type ScenarioResultStatus =\n  | 'LOADING' // when loading results\n  | 'NOT_STARTED' // Added by FE when the scenario is not created yet.\n  | 'PENDING' // Scenario created, in queue\n  | 'RUNNING' // Scenario created, being processed\n  | 'SUCCESS' // Run completed successfully\n  | 'FAILURE' // Run failed;\n  | 'PANIC' // Run failed; panic\n  | 'TIMED_OUT'; // Run failed; timed out\n\nexport interface TreatmentGoalConfig {\n  category_name?: string;\n  questions: TreatmentQuestionConfig[];\n}\n\n// TODO is this the right type?\nexport interface FeatureCollection extends GeoJSON.FeatureCollection {\n  properties: any;\n}\n\nexport interface TreatmentQuestionConfig {\n  id?: number;\n  global_thresholds?: string[];\n  long_question_text?: string;\n  scenario_output_fields_paths?: {\n    [key: string]: string[];\n  };\n  scenario_priorities?: string[];\n  short_question_text?: string;\n  stand_thresholds?: string[];\n  weights?: number[];\n\n  description?: string[];\n}\n\nexport interface ProjectArea {\n  id: string;\n  projectId?: string;\n  projectArea: GeoJSON.GeoJSON;\n  owner?: string;\n  estimatedAreaTreated?: number;\n  actualAcresTreated?: number;\n}\n\nexport interface PriorityRow {\n  selected?: boolean;\n  visible?: boolean; // Visible as raster data on map\n  expanded?: boolean; // Children in table are not hidden\n  hidden?: boolean; // Row hidden from table (independent of \"visible\" attribute)\n  disabled?: boolean; // Cannot be selected (because ancestor is selected)\n  conditionName: string;\n  displayName?: string;\n  filepath: string;\n  children: PriorityRow[];\n  level: number;\n}\n",
            "properties": [
                {
                    "name": "est_cost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "excluded_areas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "max_budget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "max_slope",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "max_treatment_area_ratio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "min_distance_from_road",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "project_areas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectArea[]",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "question_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "scenario_priorities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "stand_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "treatment_question",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreatmentQuestionConfig | null",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>TODO this type is used for the backend payload\nas well as the frontend interface before saving the scenario.\nThis is bad, as the types are not the same.\nFor example, <code>treatment_question</code> only exists on the FE but does not exists on\nthe backend payload.\nSimilarly, <code>question_id</code> only exists on the backend payload, while on the FE side\nthis is part of <code>treatment_question</code>.</p>\n",
            "rawdescription": "\n\nTODO this type is used for the backend payload\nas well as the frontend interface before saving the scenario.\nThis is bad, as the types are not the same.\nFor example, `treatment_question` only exists on the FE but does not exists on\nthe backend payload.\nSimilarly, `question_id` only exists on the backend payload, while on the FE side\nthis is part of `treatment_question`.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ScenarioResult",
            "id": "interface-ScenarioResult-bdce8719d3597b0d0b18bfe059ca8a18f88611dffe2f4310e7d4ba24a79d0d625b3b27a99b2a6d7307a633fd90f366b234824d8b09211e6c6d7c2ea93a41e623",
            "file": "src/app/types/scenario.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SCENARIO_STATUS = 'ACTIVE' | 'ARCHIVED';\n\nexport interface Scenario {\n  id?: string;\n  name: string;\n  notes?: string;\n  creator?: string;\n  planning_area: string;\n  configuration: ScenarioConfig;\n  scenario_result?: ScenarioResult;\n  status: SCENARIO_STATUS;\n  user?: number;\n}\n\n/**\n * TODO this type is used for the backend payload\n * as well as the frontend interface before saving the scenario.\n * This is bad, as the types are not the same.\n * For example, `treatment_question` only exists on the FE but does not exists on\n * the backend payload.\n * Similarly, `question_id` only exists on the backend payload, while on the FE side\n * this is part of `treatment_question`.\n */\nexport interface ScenarioConfig {\n  est_cost?: number;\n  max_budget?: number;\n  max_slope?: number;\n  max_treatment_area_ratio?: number;\n  min_distance_from_road?: number;\n  // TODO is this even being used??\n  project_areas?: ProjectArea[];\n  treatment_question?: TreatmentQuestionConfig | null;\n  excluded_areas?: string[];\n  stand_size?: string;\n  scenario_priorities?: string[];\n  question_id?: number;\n}\n\nexport interface ScenarioResult {\n  status: ScenarioResultStatus;\n  completed_at: string;\n  result: {\n    features: FeatureCollection[];\n    type: string;\n  };\n}\n\nexport type ScenarioResultStatus =\n  | 'LOADING' // when loading results\n  | 'NOT_STARTED' // Added by FE when the scenario is not created yet.\n  | 'PENDING' // Scenario created, in queue\n  | 'RUNNING' // Scenario created, being processed\n  | 'SUCCESS' // Run completed successfully\n  | 'FAILURE' // Run failed;\n  | 'PANIC' // Run failed; panic\n  | 'TIMED_OUT'; // Run failed; timed out\n\nexport interface TreatmentGoalConfig {\n  category_name?: string;\n  questions: TreatmentQuestionConfig[];\n}\n\n// TODO is this the right type?\nexport interface FeatureCollection extends GeoJSON.FeatureCollection {\n  properties: any;\n}\n\nexport interface TreatmentQuestionConfig {\n  id?: number;\n  global_thresholds?: string[];\n  long_question_text?: string;\n  scenario_output_fields_paths?: {\n    [key: string]: string[];\n  };\n  scenario_priorities?: string[];\n  short_question_text?: string;\n  stand_thresholds?: string[];\n  weights?: number[];\n\n  description?: string[];\n}\n\nexport interface ProjectArea {\n  id: string;\n  projectId?: string;\n  projectArea: GeoJSON.GeoJSON;\n  owner?: string;\n  estimatedAreaTreated?: number;\n  actualAcresTreated?: number;\n}\n\nexport interface PriorityRow {\n  selected?: boolean;\n  visible?: boolean; // Visible as raster data on map\n  expanded?: boolean; // Children in table are not hidden\n  hidden?: boolean; // Row hidden from table (independent of \"visible\" attribute)\n  disabled?: boolean; // Cannot be selected (because ancestor is selected)\n  conditionName: string;\n  displayName?: string;\n  filepath: string;\n  children: PriorityRow[];\n  level: number;\n}\n",
            "properties": [
                {
                    "name": "completed_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioResultStatus",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ScenarioRow",
            "id": "interface-ScenarioRow-241b7d2d4c9525cd6dc8c1eec85b946404526c74be998afddf531687fce3bb20dfa10ad9473cda6c4a0511ceaf26b69b807f0eaf74a64c680e1d4ff25940afe4",
            "file": "src/app/plan/plan-summary/saved-scenarios/saved-scenarios.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../../services';\nimport { interval, take } from 'rxjs';\nimport { Plan, Scenario } from 'src/app/types';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { POLLING_INTERVAL } from '../../plan-helpers';\nimport {\n  MatLegacyDialog as MatDialog,\n  MatLegacyDialogRef as MatDialogRef,\n} from '@angular/material/legacy-dialog';\nimport { DeleteDialogComponent } from '../../../delete-dialog/delete-dialog.component';\nimport { canAddScenario } from '../../../plan/permissions';\nimport {\n  SNACK_BOTTOM_NOTICE_CONFIG,\n  SNACK_ERROR_CONFIG,\n  SNACK_NOTICE_CONFIG,\n} from '../../../shared/constants';\n\nimport { ScenarioService } from '@services';\nimport { MatTab } from '@angular/material/tabs';\n\nexport interface ScenarioRow extends Scenario {\n  selected?: boolean;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'app-saved-scenarios',\n  templateUrl: './saved-scenarios.component.html',\n  styleUrls: ['./saved-scenarios.component.scss'],\n})\nexport class SavedScenariosComponent implements OnInit {\n  @Input() plan: Plan | null = null;\n  user$ = this.authService.loggedInUser$;\n\n  highlightedScenarioRow: ScenarioRow | null = null;\n  loading = true;\n  showOnlyMyScenarios: boolean = false;\n  activeScenarios: ScenarioRow[] = [];\n  archivedScenarios: ScenarioRow[] = [];\n  scenariosForUser: ScenarioRow[] = [];\n  selectedTabIndex = 0;\n  totalScenarios = 0;\n\n  constructor(\n    private route: ActivatedRoute,\n    private authService: AuthService,\n    private router: Router,\n    private snackbar: MatSnackBar,\n    private dialog: MatDialog,\n    private scenarioService: ScenarioService\n  ) {}\n\n  ngOnInit(): void {\n    this.fetchScenarios();\n    this.pollForChanges();\n  }\n\n  private pollForChanges() {\n    // we might want to check if any scenario is still pending in order to poll\n    interval(POLLING_INTERVAL)\n      .pipe(untilDestroyed(this))\n      .subscribe(() => this.fetchScenarios());\n  }\n\n  fetchScenarios(): void {\n    this.scenarioService\n      .getScenariosForPlan(this.plan?.id!)\n      .pipe(take(1))\n      .subscribe((scenarios) => {\n        this.totalScenarios = scenarios.length;\n\n        this.scenariosForUser = this.showOnlyMyScenarios\n          ? scenarios.filter((s) => s.user === this.user$.value?.id)\n          : scenarios;\n        this.activeScenarios = this.scenariosForUser.filter(\n          (s) => s.status === 'ACTIVE'\n        );\n        this.archivedScenarios = this.scenariosForUser.filter(\n          (s) => s.status === 'ARCHIVED'\n        );\n        this.loading = false;\n      });\n  }\n\n  get canAddScenarioForPlan(): boolean {\n    if (!this.plan) {\n      return false;\n    }\n    return canAddScenario(this.plan);\n  }\n\n  get showArchiveScenario() {\n    if (!this.plan) {\n      return false;\n    }\n    // Users that can add scenarios can potentially archive them.\n    // Users that cannot add scenarios can never archive/restore.\n    return this.plan.permissions.includes('add_scenario');\n  }\n\n  get canArchiveScenario() {\n    if (!this.plan || !this.highlightedScenarioRow) {\n      return false;\n    }\n    const user = this.authService.currentUser();\n    return (\n      user?.id === this.plan.user ||\n      user?.id == this.highlightedScenarioRow?.user\n    );\n  }\n\n  openConfig(configId?: number): void {\n    if (!configId) {\n      this.router.navigate(['config', ''], {\n        relativeTo: this.route,\n      });\n    } else {\n      this.router.navigate(['config', configId], { relativeTo: this.route });\n    }\n  }\n\n  viewScenario(): void {\n    this.router.navigate(['config', this.highlightedScenarioRow?.id], {\n      relativeTo: this.route,\n    });\n  }\n\n  confirmDeleteScenario(): void {\n    const dialogRef: MatDialogRef<DeleteDialogComponent> = this.dialog.open(\n      DeleteDialogComponent,\n      {\n        data: {\n          name: '\"' + this.highlightedScenarioRow?.name + '\"',\n        },\n      }\n    );\n    dialogRef\n      .afterClosed()\n      .pipe(take(1))\n      .subscribe((confirmed) => {\n        if (confirmed) {\n          this.deleteScenario([this.highlightedScenarioRow?.id!]);\n        }\n      });\n  }\n\n  private deleteScenario(ids: string[]) {\n    this.scenarioService.deleteScenarios(ids).subscribe({\n      next: (deletedIds) => {\n        this.snackbar.open(\n          `Deleted scenario${deletedIds.length > 1 ? 's' : ''}`,\n          'Dismiss',\n          SNACK_NOTICE_CONFIG\n        );\n        this.fetchScenarios();\n      },\n      error: (err) => {\n        this.snackbar.open(`Error: ${err}`, 'Dismiss', SNACK_ERROR_CONFIG);\n      },\n    });\n  }\n\n  highlightScenario(row: ScenarioRow): void {\n    this.highlightedScenarioRow = row;\n  }\n\n  toggleScenarioStatus(archive: boolean) {\n    const id = this.highlightedScenarioRow?.id;\n\n    if (id) {\n      this.scenarioService.toggleScenarioStatus(Number(id), archive).subscribe({\n        next: () => {\n          this.snackbar.open(\n            `\"${this.highlightedScenarioRow?.name}\" has been ${\n              archive ? 'archived' : 'restored'\n            }`,\n            'Dismiss',\n            SNACK_BOTTOM_NOTICE_CONFIG\n          );\n          this.highlightedScenarioRow = null;\n          this.fetchScenarios();\n        },\n        error: (err) => {\n          this.snackbar.open(\n            `Error: ${err.error.error}`,\n            'Dismiss',\n            SNACK_ERROR_CONFIG\n          );\n        },\n      });\n    }\n  }\n\n  tabChange(data: { index: number; tab: MatTab }) {\n    this.selectedTabIndex = data.index;\n    // reset selected row when changing tabs.\n    this.highlightedScenarioRow = null;\n  }\n}\n",
            "properties": [
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Scenario"
            ]
        },
        {
            "name": "SummaryInput",
            "id": "interface-SummaryInput-c8f528b525887593a5f5b7268147dd2b0405c6a2ff807dad2e41a5389d6da65f1d99534dbce38c8c8af021c32d953a10fe2aeb94335f239dc0cc41bd566cc5fa",
            "file": "src/app/plan/plan-summary/summary-panel/summary-panel.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { Plan, Region, User } from '../../../types';\nimport { NOTE_SAVE_INTERVAL } from '../../plan-helpers';\nimport { filter, interval, switchMap, tap } from 'rxjs';\nimport { PlanService } from 'src/app/services';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\nexport interface SummaryInput {\n  id?: number;\n  type: string;\n  name: string;\n  owner: string;\n  region: Region;\n  area: GeoJSON.GeoJSON;\n  status?: string;\n  createdTime?: Date;\n  scenarios?: number;\n  configs?: number;\n  lastUpdated: Date;\n  acres: number;\n  notes?: string;\n}\n\n// todo: move this to shared types\nexport enum ConditionName {\n  GOOD = 'Good',\n  LEANING_GOOD = 'Leaning good',\n  NEUTRAL = 'Neutral',\n  LEANING_POOR = 'Leaning poor',\n  POOR = 'Poor',\n}\n\nexport const conditionScoreColorMap: Record<ConditionName, string> = {\n  [ConditionName.GOOD]: '#010108',\n  [ConditionName.LEANING_GOOD]: '#4c1761',\n  [ConditionName.NEUTRAL]: '#b1354c',\n  [ConditionName.LEANING_POOR]: '#F4511e',\n  [ConditionName.POOR]: '#fdd853',\n};\n\n@UntilDestroy()\n@Component({\n  selector: 'app-summary-panel',\n  templateUrl: './summary-panel.component.html',\n  styleUrls: ['./summary-panel.component.scss'],\n})\nexport class SummaryPanelComponent implements OnInit, OnChanges {\n  @Input() plan: Plan | null = null;\n  @Input() owner: User | null = null;\n\n  summaryInput: SummaryInput | null = null;\n  conditionScore: ConditionName = ConditionName.POOR;\n  futureConditionScore: ConditionName = ConditionName.LEANING_GOOD;\n  conditionScoreColorMap = conditionScoreColorMap;\n  notes: string = '';\n\n  constructor(private planService: PlanService) {}\n\n  ngOnInit(): void {\n    this.notes = this.plan?.notes ? this.plan?.notes : '';\n    this.autoSaveNotes();\n  }\n\n  ngOnChanges(): void {\n    if (!!this.plan) {\n      this.summaryInput = {\n        id: this.plan!.id,\n        type: 'Plan',\n        name: this.plan!.name,\n        owner: this.owner?.firstName\n          ? this.owner?.firstName + ' ' + this.owner?.lastName\n          : this.owner?.username ?? 'Guest',\n        region: this.plan!.region_name,\n        area: this.plan!.geometry!,\n        createdTime: new Date(this.plan!.created_at),\n        scenarios: this.plan!.scenario_count,\n        notes: this.plan!.notes,\n        lastUpdated: new Date(this.plan!.latest_updated!),\n        acres: Math.round(this.plan.area_acres),\n        status: 'In progress',\n      };\n    }\n  }\n\n  autoSaveNotes(): void {\n    interval(NOTE_SAVE_INTERVAL)\n      .pipe(\n        untilDestroyed(this),\n        filter((_) => this.plan !== null && this.plan.notes !== this.notes),\n        tap((_) => (this.plan!.notes = this.notes)),\n        switchMap((_) =>\n          this.planService.updatePlanningArea(this.plan!, this.plan!.id)\n        )\n      )\n      .subscribe();\n  }\n}\n",
            "properties": [
                {
                    "name": "acres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "area",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GeoJSON.GeoJSON",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "configs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "createdTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "lastUpdated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Region",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "scenarios",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Treatment",
            "id": "interface-Treatment-5d0ed693bb565780b49bf2384a4069cf91e66f39679c8b9602eb3045174846953d9d101a5d90e763671a8e837115e0b77c6e6ad8b07bbf855f2c7b650c41f3dc",
            "file": "src/app/map/project-card/project-card.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Feature, Geometry } from 'geojson';\n\ninterface Project {\n  PROJECT_NAME?: string;\n  PROJECT_STATUS?: string;\n  PROJECT_START_DATE?: number;\n  PROJECT_END_DATE?: number;\n  LAST_UPDATED?: number;\n  PROJECT_TYPE?: string;\n  REGION?: string;\n  UNIT?: string;\n  treatments: Treatment[];\n}\n\ninterface Treatment {\n  PROJECT_NAME?: string;\n  TREATMENT_NAME?: string;\n  TREATMENT_OBJECTIVE?: string;\n  ACTIVITY_STATUS?: string;\n}\n\n@Component({\n  selector: 'app-project-card',\n  templateUrl: './project-card.component.html',\n  styleUrls: ['./project-card.component.scss'],\n})\nexport class ProjectCardComponent implements AfterViewInit, OnInit {\n  @Input() features!: Feature<Geometry, any>[];\n  @Output() initializedEvent = new EventEmitter<void>();\n\n  projects!: Project[];\n\n  ngOnInit() {\n    this.projects = this.getProjects();\n  }\n\n  ngAfterViewInit(): void {\n    this.initializedEvent.emit();\n  }\n\n  isProject(feature: Feature<Geometry, any>): boolean {\n    return !!feature.properties.PROJECT_NAME;\n  }\n\n  private getProjects(): Project[] {\n    const projectNames: Set<Project> = new Set<Project>();\n    const projects: Map<string, Project> = new Map<string, Project>();\n\n    this.features\n      .filter((feature) => this.isProject(feature))\n      .forEach((feature) => {\n        const projectName = feature.properties.PROJECT_NAME;\n        if (projectNames.has(projectName)) {\n          projects\n            .get(projectName)\n            ?.treatments.push(feature.properties as Treatment);\n        } else {\n          projectNames.add(projectName);\n          const project = feature.properties as Project;\n          project.treatments = [feature.properties as Treatment];\n          projects.set(projectName, project);\n        }\n      });\n\n    return Array.from(projects.values());\n  }\n}\n",
            "properties": [
                {
                    "name": "ACTIVITY_STATUS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "PROJECT_NAME",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "TREATMENT_NAME",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "TREATMENT_OBJECTIVE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TreatmentGoalConfig",
            "id": "interface-TreatmentGoalConfig-bdce8719d3597b0d0b18bfe059ca8a18f88611dffe2f4310e7d4ba24a79d0d625b3b27a99b2a6d7307a633fd90f366b234824d8b09211e6c6d7c2ea93a41e623",
            "file": "src/app/types/scenario.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SCENARIO_STATUS = 'ACTIVE' | 'ARCHIVED';\n\nexport interface Scenario {\n  id?: string;\n  name: string;\n  notes?: string;\n  creator?: string;\n  planning_area: string;\n  configuration: ScenarioConfig;\n  scenario_result?: ScenarioResult;\n  status: SCENARIO_STATUS;\n  user?: number;\n}\n\n/**\n * TODO this type is used for the backend payload\n * as well as the frontend interface before saving the scenario.\n * This is bad, as the types are not the same.\n * For example, `treatment_question` only exists on the FE but does not exists on\n * the backend payload.\n * Similarly, `question_id` only exists on the backend payload, while on the FE side\n * this is part of `treatment_question`.\n */\nexport interface ScenarioConfig {\n  est_cost?: number;\n  max_budget?: number;\n  max_slope?: number;\n  max_treatment_area_ratio?: number;\n  min_distance_from_road?: number;\n  // TODO is this even being used??\n  project_areas?: ProjectArea[];\n  treatment_question?: TreatmentQuestionConfig | null;\n  excluded_areas?: string[];\n  stand_size?: string;\n  scenario_priorities?: string[];\n  question_id?: number;\n}\n\nexport interface ScenarioResult {\n  status: ScenarioResultStatus;\n  completed_at: string;\n  result: {\n    features: FeatureCollection[];\n    type: string;\n  };\n}\n\nexport type ScenarioResultStatus =\n  | 'LOADING' // when loading results\n  | 'NOT_STARTED' // Added by FE when the scenario is not created yet.\n  | 'PENDING' // Scenario created, in queue\n  | 'RUNNING' // Scenario created, being processed\n  | 'SUCCESS' // Run completed successfully\n  | 'FAILURE' // Run failed;\n  | 'PANIC' // Run failed; panic\n  | 'TIMED_OUT'; // Run failed; timed out\n\nexport interface TreatmentGoalConfig {\n  category_name?: string;\n  questions: TreatmentQuestionConfig[];\n}\n\n// TODO is this the right type?\nexport interface FeatureCollection extends GeoJSON.FeatureCollection {\n  properties: any;\n}\n\nexport interface TreatmentQuestionConfig {\n  id?: number;\n  global_thresholds?: string[];\n  long_question_text?: string;\n  scenario_output_fields_paths?: {\n    [key: string]: string[];\n  };\n  scenario_priorities?: string[];\n  short_question_text?: string;\n  stand_thresholds?: string[];\n  weights?: number[];\n\n  description?: string[];\n}\n\nexport interface ProjectArea {\n  id: string;\n  projectId?: string;\n  projectArea: GeoJSON.GeoJSON;\n  owner?: string;\n  estimatedAreaTreated?: number;\n  actualAcresTreated?: number;\n}\n\nexport interface PriorityRow {\n  selected?: boolean;\n  visible?: boolean; // Visible as raster data on map\n  expanded?: boolean; // Children in table are not hidden\n  hidden?: boolean; // Row hidden from table (independent of \"visible\" attribute)\n  disabled?: boolean; // Cannot be selected (because ancestor is selected)\n  conditionName: string;\n  displayName?: string;\n  filepath: string;\n  children: PriorityRow[];\n  level: number;\n}\n",
            "properties": [
                {
                    "name": "category_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "questions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreatmentQuestionConfig[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TreatmentQuestionConfig",
            "id": "interface-TreatmentQuestionConfig-bdce8719d3597b0d0b18bfe059ca8a18f88611dffe2f4310e7d4ba24a79d0d625b3b27a99b2a6d7307a633fd90f366b234824d8b09211e6c6d7c2ea93a41e623",
            "file": "src/app/types/scenario.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SCENARIO_STATUS = 'ACTIVE' | 'ARCHIVED';\n\nexport interface Scenario {\n  id?: string;\n  name: string;\n  notes?: string;\n  creator?: string;\n  planning_area: string;\n  configuration: ScenarioConfig;\n  scenario_result?: ScenarioResult;\n  status: SCENARIO_STATUS;\n  user?: number;\n}\n\n/**\n * TODO this type is used for the backend payload\n * as well as the frontend interface before saving the scenario.\n * This is bad, as the types are not the same.\n * For example, `treatment_question` only exists on the FE but does not exists on\n * the backend payload.\n * Similarly, `question_id` only exists on the backend payload, while on the FE side\n * this is part of `treatment_question`.\n */\nexport interface ScenarioConfig {\n  est_cost?: number;\n  max_budget?: number;\n  max_slope?: number;\n  max_treatment_area_ratio?: number;\n  min_distance_from_road?: number;\n  // TODO is this even being used??\n  project_areas?: ProjectArea[];\n  treatment_question?: TreatmentQuestionConfig | null;\n  excluded_areas?: string[];\n  stand_size?: string;\n  scenario_priorities?: string[];\n  question_id?: number;\n}\n\nexport interface ScenarioResult {\n  status: ScenarioResultStatus;\n  completed_at: string;\n  result: {\n    features: FeatureCollection[];\n    type: string;\n  };\n}\n\nexport type ScenarioResultStatus =\n  | 'LOADING' // when loading results\n  | 'NOT_STARTED' // Added by FE when the scenario is not created yet.\n  | 'PENDING' // Scenario created, in queue\n  | 'RUNNING' // Scenario created, being processed\n  | 'SUCCESS' // Run completed successfully\n  | 'FAILURE' // Run failed;\n  | 'PANIC' // Run failed; panic\n  | 'TIMED_OUT'; // Run failed; timed out\n\nexport interface TreatmentGoalConfig {\n  category_name?: string;\n  questions: TreatmentQuestionConfig[];\n}\n\n// TODO is this the right type?\nexport interface FeatureCollection extends GeoJSON.FeatureCollection {\n  properties: any;\n}\n\nexport interface TreatmentQuestionConfig {\n  id?: number;\n  global_thresholds?: string[];\n  long_question_text?: string;\n  scenario_output_fields_paths?: {\n    [key: string]: string[];\n  };\n  scenario_priorities?: string[];\n  short_question_text?: string;\n  stand_thresholds?: string[];\n  weights?: number[];\n\n  description?: string[];\n}\n\nexport interface ProjectArea {\n  id: string;\n  projectId?: string;\n  projectArea: GeoJSON.GeoJSON;\n  owner?: string;\n  estimatedAreaTreated?: number;\n  actualAcresTreated?: number;\n}\n\nexport interface PriorityRow {\n  selected?: boolean;\n  visible?: boolean; // Visible as raster data on map\n  expanded?: boolean; // Children in table are not hidden\n  hidden?: boolean; // Row hidden from table (independent of \"visible\" attribute)\n  disabled?: boolean; // Cannot be selected (because ancestor is selected)\n  conditionName: string;\n  displayName?: string;\n  filepath: string;\n  children: PriorityRow[];\n  level: number;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "global_thresholds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "long_question_text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "scenario_output_fields_paths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "scenario_priorities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "short_question_text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "stand_thresholds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "weights",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": true,
                    "description": "",
                    "line": 78
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-aa56aca1b3573847ecbb1b6410e596d63d3b6dca50aad2bfdac7e1404349a240f4d64c4b3616e7c549a85afd9a246520c5c54998af72c1408b3c9ddc6f013216",
            "file": "src/app/types/user.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  email?: string;\n  username?: string;\n  firstName?: string;\n  lastName?: string;\n  department?: string;\n  id?: number;\n}\n",
            "properties": [
                {
                    "name": "department",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ViewState",
            "id": "interface-ViewState-2cfd1c7cd05cf4ce77e593d76efe67cc80902b54412bd14eef59d152009e662230f6e399bb3320535f2675b50bbb42c5cbe215e71a498982ecf92f2877dc1806",
            "file": "src/app/services/share-map.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { BackendConstants } from '../backend-constants';\nimport { HttpClient } from '@angular/common/http';\nimport { WINDOW } from './window.service';\nimport { MapConfig, MapViewOptions, Region } from '../types';\n\ninterface ViewState {\n  mapViewOptions: MapViewOptions | null;\n  mapConfig: MapConfig[];\n  region: Region;\n}\n\ninterface CreatedLink {\n  created_at: string;\n  link_code: string;\n  updated_at: string;\n  user_id?: string;\n  view_state: ViewState;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShareMapService {\n  constructor(\n    private http: HttpClient,\n    @Inject(WINDOW) private readonly window: Window\n  ) {}\n\n  getSharedLink(mapData: ViewState): Observable<string> {\n    const origin = this.window.location.origin;\n    return this.createShareLink(mapData).pipe(\n      map((createdLink) => origin + '/map?link=' + createdLink.link_code)\n    );\n  }\n\n  createShareLink(mapData: ViewState): Observable<CreatedLink> {\n    return this.http.post<CreatedLink>(\n      BackendConstants.END_POINT + '/planning/create_link/',\n      {\n        view_state: mapData,\n      },\n      { withCredentials: true }\n    );\n  }\n\n  getMapDataFromLink(link: string) {\n    return this.loadSharedLink(link).pipe(map((data) => data.view_state));\n  }\n\n  loadSharedLink(link: string) {\n    return this.http.get<CreatedLink>(\n      BackendConstants.END_POINT.concat('/planning/shared_link/', link),\n      { withCredentials: true }\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "mapConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MapConfig[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "mapViewOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MapViewOptions | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Region",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-b7f15b1b913893a17014d7a3b7e7abdca29a81c1336174b7a9e45fbfeeab3e95c32634be4f211c0ce06000703786588450d3ff4c2f6d948dc4018cea5f234737",
            "file": "src/app/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 376,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>An AuthGuard used to prevent access to pages that require sign-in. If the user is not signed\n in, redirect to the sign-in page.</p>\n",
            "rawdescription": "\nAn AuthGuard used to prevent access to pages that require sign-in. If the user is not signed\n in, redirect to the sign-in page.\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport {\n  ActivatedRouteSnapshot,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SNACK_NOTICE_CONFIG } from '../../app/shared/constants';\nimport {\n  BehaviorSubject,\n  catchError,\n  concatMap,\n  map,\n  Observable,\n  of,\n  take,\n  tap,\n  throwError,\n} from 'rxjs';\n\nimport { BackendConstants } from '../backend-constants';\nimport { User } from '../types';\nimport { RedirectService } from './redirect.service';\n\ninterface LogoutResponse {\n  detail: string;\n}\n\nexport interface PasswordResetToken {\n  userId: string;\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  loggedInStatus$ = new BehaviorSubject<boolean | null>(null);\n  isLoggedIn$: Observable<boolean | null> = this.loggedInStatus$;\n  loggedInUser$ = new BehaviorSubject<User | null | undefined>(undefined);\n\n  private readonly API_ROOT = BackendConstants.END_POINT + '/dj-rest-auth/';\n\n  constructor(\n    private http: HttpClient,\n    private cookieService: CookieService,\n    private snackbar: MatSnackBar,\n    private redirectService: RedirectService\n  ) {}\n\n  currentUser() {\n    return this.loggedInUser$.value;\n  }\n\n  login(email: string, password: string) {\n    return this.http\n      .post(\n        this.API_ROOT.concat('login/'),\n        { email, password },\n        { withCredentials: true }\n      )\n      .pipe(\n        map((response) => {\n          const redirectUrl = this.redirectService.shouldRedirect(email);\n          // remove redirect\n          this.redirectService.removeRedirect();\n          return redirectUrl || 'home';\n        }),\n        tap((_) => {\n          this.loggedInStatus$.next(true);\n          this.getLoggedInUser()\n            .pipe(take(1))\n            .subscribe((user) => {\n              this.loggedInUser$.next(user);\n            });\n        })\n      );\n  }\n\n  signup(\n    email: string,\n    password1: string,\n    password2: string,\n    firstName: string,\n    lastName: string\n  ) {\n    return this.http\n      .post(this.API_ROOT.concat('registration/'), {\n        password1,\n        password2,\n        email,\n        first_name: firstName,\n        last_name: lastName,\n      })\n      .pipe(\n        tap(() => {\n          const redirect = this.redirectService.shouldRedirect(email);\n          if (redirect) {\n            // associate the redirect with the newly created user\n            this.redirectService.setRedirect(redirect, email);\n          }\n        })\n      );\n  }\n\n  resendValidationEmail(email: string) {\n    return this.http.post(this.API_ROOT.concat('registration/resend-email/'), {\n      email,\n    });\n  }\n\n  logout() {\n    return this.http\n      .get<LogoutResponse>(this.API_ROOT.concat('logout/'), {\n        withCredentials: true,\n      })\n      .pipe(\n        tap((response) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          this.snackbar.open(response.detail, 'Dismiss', SNACK_NOTICE_CONFIG);\n        })\n      );\n  }\n\n  validateAccount(token: string): Observable<boolean> {\n    return this.http\n      .post(this.API_ROOT.concat('registration/account-confirm-email/'), {\n        key: token,\n      })\n      .pipe(\n        map((_) => true),\n        catchError((error: Error) => {\n          return of(false);\n        })\n      );\n  }\n\n  private refreshToken() {\n    return this.http\n      .post(\n        this.API_ROOT.concat('token/refresh/'),\n        { refresh: this.cookieService.get('my-refresh-token') },\n        { withCredentials: true }\n      )\n      .pipe(\n        tap((response: any) => {\n          this.loggedInStatus$.next(!!response.access);\n        }),\n        catchError((err) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          return throwError(err);\n        })\n      );\n  }\n\n  /** Fetch the currently logged in user from the backend. */\n  refreshLoggedInUser(): Observable<User> {\n    // Must refresh the auth cookie to retrieve user\n    return this.refreshToken().pipe(\n      concatMap((_) => {\n        return this.getLoggedInUser();\n      })\n    );\n  }\n\n  private getLoggedInUser(): Observable<User> {\n    return this.http\n      .get(this.API_ROOT.concat('user/'), { withCredentials: true })\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n            id: response.pk,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  changePassword(\n    currentPassword: string,\n    newPassword1: string,\n    newPassword2: string\n  ): Observable<any> {\n    return this.http.post(\n      this.API_ROOT.concat('password/change/'),\n      {\n        old_password: currentPassword,\n        new_password1: newPassword1,\n        new_password2: newPassword2,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  sendPasswordResetEmail(email: string): Observable<any> {\n    return this.http.post(\n      this.API_ROOT.concat('password/reset/'),\n      {\n        email: email,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  resetPassword(\n    userId: string,\n    token: string,\n    password1: string,\n    password2: string\n  ): Observable<boolean> {\n    return this.http\n      .post(\n        this.API_ROOT.concat('password/reset/confirm/'),\n        {\n          uid: userId,\n          token: token,\n          new_password1: password1,\n          new_password2: password2,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          return response.success;\n        })\n      );\n  }\n\n  /** Gets a user given the id. */\n  getUser(userId: number): Observable<User> {\n    const url = BackendConstants.END_POINT.concat(\n      `/users/get_user_by_id/?id=${userId}`\n    );\n    return this.http\n      .get(url, {\n        withCredentials: true,\n      })\n      .pipe(\n        take(1),\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          return user;\n        })\n      );\n  }\n\n  updateUserInfo(newUser: Partial<User>): Observable<User> {\n    return this.http\n      .patch(\n        this.API_ROOT.concat('user'),\n        {\n          first_name: newUser.firstName,\n          last_name: newUser.lastName,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  /**\n   * deprecated\n   * @param newUser\n   * @param currentPassword\n   */\n  updateUser(newUser: User, currentPassword: string): Observable<User> {\n    return this.http\n      .patch(\n        this.API_ROOT.concat('user/'),\n        {\n          email: newUser.email,\n          username: newUser.username,\n          first_name: newUser.firstName,\n          last_name: newUser.lastName,\n          current_password: currentPassword,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  /**\n   * \"Deletes\" user from backend. The behavior of this command is to disable the user account,\n   *  not fully delete it, so data can be restored later if necessary.\n   */\n  deleteUser(user: User, password: string): Observable<boolean> {\n    return this.http\n      .post(\n        BackendConstants.END_POINT.concat('/users/delete/'),\n        {\n          password: password,\n          email: user.email,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        take(1),\n        map((result: any) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          return result.deleted;\n        })\n      );\n  }\n\n  validatePasswordResetToken(tokenDetails: PasswordResetToken) {\n    return this.http.get(\n      this.API_ROOT.concat(\n        'password/reset/',\n        tokenDetails.userId,\n        '/',\n        tokenDetails.token\n      )\n    );\n  }\n}\n\n/** An AuthGuard used to prevent access to pages that require sign-in. If the user is not signed\n *  in, redirect to the sign-in page.\n */\n@Injectable()\nexport class AuthGuard {\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private redirectService: RedirectService\n  ) {}\n\n  canActivate(\n    route?: ActivatedRouteSnapshot,\n    state?: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.authService.refreshLoggedInUser().pipe(\n      map((_) => true),\n      catchError((_) => {\n        if (state) {\n          this.redirectService.setRedirect(state.url);\n        }\n        this.router.navigate(['login']);\n        return of(false);\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "redirectService",
                        "type": "RedirectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 369,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "redirectService",
                        "type": "RedirectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-b7f15b1b913893a17014d7a3b7e7abdca29a81c1336174b7a9e45fbfeeab3e95c32634be4f211c0ce06000703786588450d3ff4c2f6d948dc4018cea5f234737",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "API_ROOT",
                    "defaultValue": "BackendConstants.END_POINT + '/dj-rest-auth/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "isLoggedIn$",
                    "defaultValue": "this.loggedInStatus$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean | null>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "loggedInStatus$",
                    "defaultValue": "new BehaviorSubject<boolean | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "loggedInUser$",
                    "defaultValue": "new BehaviorSubject<User | null | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methods": [
                {
                    "name": "changePassword",
                    "args": [
                        {
                            "name": "currentPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPassword1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPassword2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPassword1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPassword2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "currentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 331,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\"Deletes\" user from backend. The behavior of this command is to disable the user account,\n not fully delete it, so data can be restored later if necessary.\n",
                    "description": "<p>&quot;Deletes&quot; user from backend. The behavior of this command is to disable the user account,\n not fully delete it, so data can be restored later if necessary.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoggedInUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets a user given the id.",
                    "description": "<p>Gets a user given the id.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshLoggedInUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFetch the currently logged in user from the backend.",
                    "description": "<p>Fetch the currently logged in user from the backend.</p>\n"
                },
                {
                    "name": "refreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resendValidationEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendPasswordResetEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signup",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "newUser",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeprecated\n",
                    "description": "<p>deprecated</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7179,
                                "end": 7186,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "newUser"
                            },
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7173,
                                "end": 7178,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 7199,
                                "end": 7214,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "currentPassword"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7193,
                                "end": 7198,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateUserInfo",
                    "args": [
                        {
                            "name": "newUser",
                            "type": "Partial<User>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newUser",
                            "type": "Partial<User>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateAccount",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validatePasswordResetToken",
                    "args": [
                        {
                            "name": "tokenDetails",
                            "type": "PasswordResetToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 353,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tokenDetails",
                            "type": "PasswordResetToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport {\n  ActivatedRouteSnapshot,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SNACK_NOTICE_CONFIG } from '../../app/shared/constants';\nimport {\n  BehaviorSubject,\n  catchError,\n  concatMap,\n  map,\n  Observable,\n  of,\n  take,\n  tap,\n  throwError,\n} from 'rxjs';\n\nimport { BackendConstants } from '../backend-constants';\nimport { User } from '../types';\nimport { RedirectService } from './redirect.service';\n\ninterface LogoutResponse {\n  detail: string;\n}\n\nexport interface PasswordResetToken {\n  userId: string;\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  loggedInStatus$ = new BehaviorSubject<boolean | null>(null);\n  isLoggedIn$: Observable<boolean | null> = this.loggedInStatus$;\n  loggedInUser$ = new BehaviorSubject<User | null | undefined>(undefined);\n\n  private readonly API_ROOT = BackendConstants.END_POINT + '/dj-rest-auth/';\n\n  constructor(\n    private http: HttpClient,\n    private cookieService: CookieService,\n    private snackbar: MatSnackBar,\n    private redirectService: RedirectService\n  ) {}\n\n  currentUser() {\n    return this.loggedInUser$.value;\n  }\n\n  login(email: string, password: string) {\n    return this.http\n      .post(\n        this.API_ROOT.concat('login/'),\n        { email, password },\n        { withCredentials: true }\n      )\n      .pipe(\n        map((response) => {\n          const redirectUrl = this.redirectService.shouldRedirect(email);\n          // remove redirect\n          this.redirectService.removeRedirect();\n          return redirectUrl || 'home';\n        }),\n        tap((_) => {\n          this.loggedInStatus$.next(true);\n          this.getLoggedInUser()\n            .pipe(take(1))\n            .subscribe((user) => {\n              this.loggedInUser$.next(user);\n            });\n        })\n      );\n  }\n\n  signup(\n    email: string,\n    password1: string,\n    password2: string,\n    firstName: string,\n    lastName: string\n  ) {\n    return this.http\n      .post(this.API_ROOT.concat('registration/'), {\n        password1,\n        password2,\n        email,\n        first_name: firstName,\n        last_name: lastName,\n      })\n      .pipe(\n        tap(() => {\n          const redirect = this.redirectService.shouldRedirect(email);\n          if (redirect) {\n            // associate the redirect with the newly created user\n            this.redirectService.setRedirect(redirect, email);\n          }\n        })\n      );\n  }\n\n  resendValidationEmail(email: string) {\n    return this.http.post(this.API_ROOT.concat('registration/resend-email/'), {\n      email,\n    });\n  }\n\n  logout() {\n    return this.http\n      .get<LogoutResponse>(this.API_ROOT.concat('logout/'), {\n        withCredentials: true,\n      })\n      .pipe(\n        tap((response) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          this.snackbar.open(response.detail, 'Dismiss', SNACK_NOTICE_CONFIG);\n        })\n      );\n  }\n\n  validateAccount(token: string): Observable<boolean> {\n    return this.http\n      .post(this.API_ROOT.concat('registration/account-confirm-email/'), {\n        key: token,\n      })\n      .pipe(\n        map((_) => true),\n        catchError((error: Error) => {\n          return of(false);\n        })\n      );\n  }\n\n  private refreshToken() {\n    return this.http\n      .post(\n        this.API_ROOT.concat('token/refresh/'),\n        { refresh: this.cookieService.get('my-refresh-token') },\n        { withCredentials: true }\n      )\n      .pipe(\n        tap((response: any) => {\n          this.loggedInStatus$.next(!!response.access);\n        }),\n        catchError((err) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          return throwError(err);\n        })\n      );\n  }\n\n  /** Fetch the currently logged in user from the backend. */\n  refreshLoggedInUser(): Observable<User> {\n    // Must refresh the auth cookie to retrieve user\n    return this.refreshToken().pipe(\n      concatMap((_) => {\n        return this.getLoggedInUser();\n      })\n    );\n  }\n\n  private getLoggedInUser(): Observable<User> {\n    return this.http\n      .get(this.API_ROOT.concat('user/'), { withCredentials: true })\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n            id: response.pk,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  changePassword(\n    currentPassword: string,\n    newPassword1: string,\n    newPassword2: string\n  ): Observable<any> {\n    return this.http.post(\n      this.API_ROOT.concat('password/change/'),\n      {\n        old_password: currentPassword,\n        new_password1: newPassword1,\n        new_password2: newPassword2,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  sendPasswordResetEmail(email: string): Observable<any> {\n    return this.http.post(\n      this.API_ROOT.concat('password/reset/'),\n      {\n        email: email,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  resetPassword(\n    userId: string,\n    token: string,\n    password1: string,\n    password2: string\n  ): Observable<boolean> {\n    return this.http\n      .post(\n        this.API_ROOT.concat('password/reset/confirm/'),\n        {\n          uid: userId,\n          token: token,\n          new_password1: password1,\n          new_password2: password2,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          return response.success;\n        })\n      );\n  }\n\n  /** Gets a user given the id. */\n  getUser(userId: number): Observable<User> {\n    const url = BackendConstants.END_POINT.concat(\n      `/users/get_user_by_id/?id=${userId}`\n    );\n    return this.http\n      .get(url, {\n        withCredentials: true,\n      })\n      .pipe(\n        take(1),\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          return user;\n        })\n      );\n  }\n\n  updateUserInfo(newUser: Partial<User>): Observable<User> {\n    return this.http\n      .patch(\n        this.API_ROOT.concat('user'),\n        {\n          first_name: newUser.firstName,\n          last_name: newUser.lastName,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  /**\n   * deprecated\n   * @param newUser\n   * @param currentPassword\n   */\n  updateUser(newUser: User, currentPassword: string): Observable<User> {\n    return this.http\n      .patch(\n        this.API_ROOT.concat('user/'),\n        {\n          email: newUser.email,\n          username: newUser.username,\n          first_name: newUser.firstName,\n          last_name: newUser.lastName,\n          current_password: currentPassword,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        map((response: any) => {\n          const user: User = {\n            email: response.email,\n            username: response.username,\n            firstName: response.first_name,\n            lastName: response.last_name,\n          };\n          this.loggedInUser$.next(user);\n          return user;\n        })\n      );\n  }\n\n  /**\n   * \"Deletes\" user from backend. The behavior of this command is to disable the user account,\n   *  not fully delete it, so data can be restored later if necessary.\n   */\n  deleteUser(user: User, password: string): Observable<boolean> {\n    return this.http\n      .post(\n        BackendConstants.END_POINT.concat('/users/delete/'),\n        {\n          password: password,\n          email: user.email,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        take(1),\n        map((result: any) => {\n          this.loggedInStatus$.next(false);\n          this.loggedInUser$.next(null);\n          return result.deleted;\n        })\n      );\n  }\n\n  validatePasswordResetToken(tokenDetails: PasswordResetToken) {\n    return this.http.get(\n      this.API_ROOT.concat(\n        'password/reset/',\n        tokenDetails.userId,\n        '/',\n        tokenDetails.token\n      )\n    );\n  }\n}\n\n/** An AuthGuard used to prevent access to pages that require sign-in. If the user is not signed\n *  in, redirect to the sign-in page.\n */\n@Injectable()\nexport class AuthGuard {\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private redirectService: RedirectService\n  ) {}\n\n  canActivate(\n    route?: ActivatedRouteSnapshot,\n    state?: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.authService.refreshLoggedInUser().pipe(\n      map((_) => true),\n      catchError((_) => {\n        if (state) {\n          this.redirectService.setRedirect(state.url);\n        }\n        this.router.navigate(['login']);\n        return of(false);\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "redirectService",
                        "type": "RedirectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "redirectService",
                        "type": "RedirectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FeatureService",
            "id": "injectable-FeatureService-c946d12e65c632ce2f3128d829c401a6859ea403f205cb434fe83107d9d0fae2d302b68330d7c41edc9ae6bd5f304f9366d0a2e224be7c0d786cf39b7e09cb6c",
            "file": "src/app/features/feature.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isFeatureEnabled",
                    "args": [
                        {
                            "name": "featureName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "featureName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { FEATURES_JSON, FeaturesConfig } from './features-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureService {\n  constructor(@Inject(FEATURES_JSON) private readonly config: FeaturesConfig) {\n    this.config = config;\n  }\n\n  isFeatureEnabled(featureName: string): boolean {\n    return !!this.config[featureName];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "FeaturesConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "FeaturesConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FileSaverService",
            "id": "injectable-FileSaverService-a3aa636410799e5dbc9ea36bcb3c46c0e70732ca13598ab83fca36bd3b85ee6043cf9586da25047a576e802962bbc0adac248501c3f6ca2e57163175cf859962",
            "file": "src/app/services/file-saver.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "saveAs",
                    "args": [
                        {
                            "name": "data",
                            "type": "Blob | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Blob | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport FileSaver from 'file-saver';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FileSaverService {\n  constructor() {}\n\n  saveAs(data: Blob | string, filename?: string) {\n    FileSaver.saveAs(data, filename);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GoalOverlayService",
            "id": "injectable-GoalOverlayService-13e2a9ada4e0bb6d9083f8a6bb28afddfca61510918434066486433f242e943e61941cf8d17148aeceeae77dfb683df30ba2eafed8b7d52a05b27fdb1cb76a29",
            "file": "src/app/plan/create-scenarios/goal-overlay/goal-overlay.service.ts",
            "properties": [
                {
                    "name": "selectedQuestion$",
                    "defaultValue": "this.selectedQuestionSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "selectedQuestionSubject",
                    "defaultValue": "new Subject<TreatmentQuestionConfig | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showOverlay$",
                    "defaultValue": "this.selectedQuestion$.pipe(map((q) => !!q))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setQuestion",
                    "args": [
                        {
                            "name": "question",
                            "type": "TreatmentQuestionConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "question",
                            "type": "TreatmentQuestionConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { TreatmentQuestionConfig } from '../../../types';\nimport { map, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoalOverlayService {\n  constructor() {}\n\n  private selectedQuestionSubject =\n    new Subject<TreatmentQuestionConfig | null>();\n\n  selectedQuestion$ = this.selectedQuestionSubject.asObservable();\n  showOverlay$ = this.selectedQuestion$.pipe(map((q) => !!q));\n\n  setQuestion(question: TreatmentQuestionConfig) {\n    this.selectedQuestionSubject.next(question);\n  }\n\n  close() {\n    this.selectedQuestionSubject.next(null);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "InvitesService",
            "id": "injectable-InvitesService-9780e1472b2035ea79ddc46be564477b35240e7b6e9bc1298a94274912efbc15a0adcd4f836ca99f00aff68dedd5d34276ce571902015141d1eced1d6ecea54f",
            "file": "src/app/services/invites.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "changeRole",
                    "args": [
                        {
                            "name": "inviteId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newRole",
                            "type": "INVITE_ROLE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inviteId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newRole",
                            "type": "INVITE_ROLE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteInvite",
                    "args": [
                        {
                            "name": "inviteId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inviteId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInvites",
                    "args": [
                        {
                            "name": "planningAreaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "planningAreaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "inviteUsers",
                    "args": [
                        {
                            "name": "emails",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "INVITE_ROLE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "planningAreaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emails",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "INVITE_ROLE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "planningAreaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BackendConstants } from '../backend-constants';\nimport { Invite, INVITE_ROLE } from '../types/invite.types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InvitesService {\n  constructor(private http: HttpClient) {}\n\n  inviteUsers(\n    emails: string[],\n    role: INVITE_ROLE,\n    planningAreaId: number,\n    message?: string\n  ) {\n    return this.http.post<Invite>(\n      BackendConstants.END_POINT.concat('/invites/create_invite/'),\n      {\n        emails,\n        role,\n        message: message || null,\n        object_pk: planningAreaId,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  getInvites(planningAreaId: number) {\n    return this.http.get<Invite[]>(\n      BackendConstants.END_POINT.concat(\n        `/invites/invitations/planningarea/${planningAreaId}`\n      ),\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  changeRole(inviteId: number, newRole: INVITE_ROLE) {\n    return this.http.patch<Invite>(\n      BackendConstants.END_POINT.concat(`/invites/invitations/${inviteId}`),\n      {\n        role: newRole,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  deleteInvite(inviteId: number) {\n    return this.http.delete<Invite[]>(\n      BackendConstants.END_POINT.concat(`/invites/invitations/${inviteId}`),\n      {\n        withCredentials: true,\n      }\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MapService",
            "id": "injectable-MapService-61f05d4bf910c02f2657f68eac57542be508a3d4f93be5f8c9ca94755e465a5e8cda8924fb4af8c56abf50ea9aef1dbac1ea76c860f786e1b9cf2665913dbaea",
            "file": "src/app/services/map.service.ts",
            "properties": [
                {
                    "name": "boundaryConfig$",
                    "defaultValue": "new BehaviorSubject<BoundaryConfig[] | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "conditionNameToDisplayNameMap$",
                    "defaultValue": "new BehaviorSubject<\n    Map<string, string>\n  >(new Map<string, string>())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "conditionsConfig$",
                    "defaultValue": "new BehaviorSubject<ConditionsConfig | null>(\n    null\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "regionBoundaries",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<Record<Region, GeoJSON.GeoJSON>>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedRegion$",
                    "defaultValue": "this.sessionService.region$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getBoundaryShapes",
                    "args": [
                        {
                            "name": "vectorName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<L.Layer>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGet shapes for a boundary from assets, if possible.  Fall back to the\n REST server, clipping the shapes to the region if the region is non-null.",
                    "description": "<p>Get shapes for a boundary from assets, if possible.  Fall back to the\n REST server, clipping the shapes to the region if the region is non-null.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "vectorName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColormap",
                    "args": [
                        {
                            "name": "colormap",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ColormapConfig>",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGet colormap values from the REST server.",
                    "description": "<p>Get colormap values from the REST server.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "colormap",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRegionBoundary",
                    "args": [
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GeoJSON.GeoJSON>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the GeoJSON for the given region, or an empty observable\nif the path is empty.\n",
                    "description": "<p>Gets the GeoJSON for the given region, or an empty observable\nif the path is empty.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "populateConditionNameMap",
                    "args": [
                        {
                            "name": "config",
                            "type": "ConditionsConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ConditionsConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setConfigs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport * as L from 'leaflet';\nimport 'leaflet.vectorgrid';\nimport { BehaviorSubject, EMPTY, Observable, take, of, tap } from 'rxjs';\n\nimport { BackendConstants } from '../backend-constants';\nimport { SessionService } from '@services';\nimport {\n  BoundaryConfig,\n  ColormapConfig,\n  ConditionsConfig,\n  Region,\n  regionToString,\n} from '../types';\n\n/** A map of Region to static assets for that region. */\nconst regionToGeojsonMap: Record<Region, Record<string, string>> = {\n  [Region.SIERRA_NEVADA]: {\n    boundary: 'assets/geojson/sierra_nevada_region.geojson',\n  },\n  [Region.CENTRAL_COAST]: {\n    boundary: 'assets/geojson/central_coast_region.geojson',\n  },\n  [Region.NORTHERN_CALIFORNIA]: {\n    boundary: 'assets/geojson/northern_california_region.geojson',\n  },\n  [Region.SOUTHERN_CALIFORNIA]: {\n    boundary: 'assets/geojson/southern_california_region.geojson',\n  },\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MapService {\n  readonly boundaryConfig$ = new BehaviorSubject<BoundaryConfig[] | null>(null);\n  readonly conditionsConfig$ = new BehaviorSubject<ConditionsConfig | null>(\n    null\n  );\n  readonly conditionNameToDisplayNameMap$ = new BehaviorSubject<\n    Map<string, string>\n  >(new Map<string, string>());\n\n  readonly selectedRegion$ = this.sessionService.region$;\n\n  private regionBoundaries: Partial<Record<Region, GeoJSON.GeoJSON>> = {};\n\n  constructor(\n    private http: HttpClient,\n    private sessionService: SessionService\n  ) {\n    this.http\n      .get<BoundaryConfig[]>(\n        BackendConstants.END_POINT +\n          '/boundary/config/?region_name=' +\n          `${regionToString(this.selectedRegion$.getValue())}`\n      )\n      .pipe(take(1))\n      .subscribe((config: BoundaryConfig[]) => {\n        this.boundaryConfig$.next(config);\n      });\n    this.http\n      .get<ConditionsConfig>(\n        BackendConstants.END_POINT +\n          '/conditions/config/?region_name=' +\n          `${regionToString(this.selectedRegion$.getValue())}`\n      )\n      .pipe(take(1))\n      .subscribe((config: ConditionsConfig) => {\n        this.conditionsConfig$.next(config);\n        this.populateConditionNameMap(config);\n      });\n  }\n\n  /**\n   * Gets the GeoJSON for the given region, or an empty observable\n   * if the path is empty.\n   * */\n  getRegionBoundary(region: Region): Observable<GeoJSON.GeoJSON> {\n    const path = regionToGeojsonMap[region];\n    if (!path || !path['boundary']) return EMPTY;\n\n    if (this.regionBoundaries[region]) {\n      return of(this.regionBoundaries[region]!);\n    }\n    return this.http\n      .get<GeoJSON.GeoJSON>(path['boundary'])\n      .pipe(tap((data) => (this.regionBoundaries[region] = data)));\n  }\n\n  setConfigs() {\n    this.http\n      .get<BoundaryConfig[]>(\n        BackendConstants.END_POINT +\n          '/boundary/config/?region_name=' +\n          `${regionToString(this.selectedRegion$.getValue())}`\n      )\n      .pipe(take(1))\n      .subscribe((config: BoundaryConfig[]) => {\n        this.boundaryConfig$.next(config);\n      });\n    this.http\n      .get<ConditionsConfig>(\n        BackendConstants.END_POINT +\n          '/conditions/config/?region_name=' +\n          `${regionToString(this.selectedRegion$.getValue())}`\n      )\n      .pipe(take(1))\n      .subscribe((config: ConditionsConfig) => {\n        this.conditionsConfig$.next(config);\n        this.populateConditionNameMap(config);\n      });\n  }\n\n  /** Get shapes for a boundary from assets, if possible.  Fall back to the\n   *  REST server, clipping the shapes to the region if the region is non-null. */\n  getBoundaryShapes(vectorName: string): Observable<L.Layer> {\n    var vector: Observable<L.Layer> = of(\n      L.vectorGrid.protobuf(\n        BackendConstants.TILES_END_POINT +\n          'gwc/service/tms/1.0.0/' +\n          `${vectorName}` +\n          '@EPSG%3A3857@pbf/{z}/{x}/{-y}.pbf',\n        {\n          vectorTileLayerStyles: {\n            [`${vectorName.split(':')[1]}`]: {\n              // To set style value for every layer name (which is the value after '<region>:' in vectorName)\n              weight: 1,\n              fillOpacity: 0,\n              color: '#0000ff',\n              fill: true,\n            },\n          },\n          interactive: true,\n          zIndex: 1000, // To ensure boundary is loaded in on top of any other layers\n          getFeatureId: function (f: any) {\n            return f.properties.OBJECTID; // Every boundary feature must have a unique value OBJECTID in order to for hover info to properly work\n          },\n          maxZoom: 13,\n        }\n      )\n    );\n\n    return vector;\n  }\n\n  /** Get colormap values from the REST server. */\n  getColormap(colormap: string): Observable<ColormapConfig> {\n    return this.http.get<ColormapConfig>(\n      BackendConstants.END_POINT.concat(\n        `/conditions/colormap/?colormap=${colormap}`\n      )\n    );\n  }\n\n  private populateConditionNameMap(config: ConditionsConfig) {\n    let nameMap = this.conditionNameToDisplayNameMap$.value;\n    config.pillars?.forEach((pillar) => {\n      if (!!pillar.pillar_name && !!pillar.display_name) {\n        nameMap.set(pillar.pillar_name, pillar.display_name);\n      }\n      pillar.elements?.forEach((element) => {\n        if (!!element.element_name && !!element.display_name) {\n          nameMap.set(element.element_name, element.display_name);\n        }\n        element.metrics?.forEach((metric) => {\n          if (!!metric.metric_name && !!metric.display_name) {\n            nameMap.set(metric.metric_name, metric.display_name);\n          }\n        });\n      });\n    });\n    this.conditionNameToDisplayNameMap$.next(nameMap);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PlanNotesService",
            "id": "injectable-PlanNotesService-4da9f0a08c0b7206ba8fa0b41692bb3ba3db75412e18c69a4acdf7e2c9fd1a37d3e82e98b74d0f6d0def10e1321f6e3014968cd61d36498d877a364611960425",
            "file": "src/app/services/plan-notes.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addNote",
                    "args": [
                        {
                            "name": "planningAreaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "note",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "planningAreaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "note",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteNote",
                    "args": [
                        {
                            "name": "planningAreaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "noteId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "planningAreaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "noteId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNotes",
                    "args": [
                        {
                            "name": "planningAreaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "planningAreaId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { BackendConstants } from '../backend-constants';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface Note {\n  id: number;\n  user_id: number;\n  user_name: string;\n  content: string;\n  created_at: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlanNotesService {\n  constructor(private http: HttpClient) {}\n\n  getNotes(planningAreaId: number) {\n    return this.http.get<Note[]>(\n      BackendConstants.END_POINT.concat(\n        `/planning/planning_area/${planningAreaId}/note`\n      ),\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  addNote(planningAreaId: number, note: string) {\n    return this.http.post<Note>(\n      BackendConstants.END_POINT.concat(\n        `/planning/planning_area/${planningAreaId}/note`\n      ),\n      { content: note },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  deleteNote(planningAreaId: number, noteId: number) {\n    return this.http.delete<Note>(\n      BackendConstants.END_POINT.concat(\n        `/planning/planning_area/${planningAreaId}/note/${noteId}`\n      ),\n      {\n        withCredentials: true,\n      }\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PlanscapeTitleStrategy",
            "id": "injectable-PlanscapeTitleStrategy-30a1bbbc3f91511bcbec154326638c8c4e8aa5d92ea3c3ab447536ee82d1d463f87ab25db00ba4db59f63f62e0751c4067561c31fe7938c5907fdc91eb7107ae",
            "file": "src/app/app-routing.module.ts",
            "properties": [],
            "methods": [
                {
                    "name": "updateTitle",
                    "args": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "",
            "sourceCode": "import { Injectable, NgModule } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport {\n  RouterModule,\n  RouterStateSnapshot,\n  Routes,\n  TitleStrategy,\n} from '@angular/router';\n\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { MapComponent } from './map/map.component';\nimport { CreateScenariosComponent } from './plan/create-scenarios/create-scenarios.component';\nimport { PlanComponent } from './plan/plan.component';\nimport { PasswordResetComponent } from './password-reset/password-reset.component';\nimport { AuthGuard } from './services';\nimport { passwordResetTokenResolver } from './services/password-reset.resolver';\nimport { SignupComponent } from './signup/signup.component';\nimport { RedirectGuard } from './services/redirect.guard';\nimport { AccountValidationComponent } from './account-validation/account-validation.component';\nimport { ExploreComponent } from './plan/explore/explore/explore.component';\nimport { AccountPageComponent } from './account/account-page/account-page.component';\nimport { DetailsComponent } from './account/details/details.component';\nimport { CredentialsComponent } from './account/credentials/credentials.component';\nimport { DeleteAccountComponent } from './account/delete-account/delete-account.component';\nimport { ThankYouComponent } from './signup/thank-you/thank-you.component';\nimport { redirectResolver } from './services/redirect.resolver';\n\nconst routes: Routes = [\n  {\n    path: '',\n    title: 'Planscape',\n    children: [\n      { path: '', redirectTo: 'home', pathMatch: 'full' },\n      {\n        path: 'login',\n        title: 'Login',\n        component: LoginComponent,\n      },\n      {\n        path: 'reset/:userId/:token',\n        title: 'Password reset',\n        resolve: { passwordResetToken: passwordResetTokenResolver },\n        component: PasswordResetComponent,\n      },\n      {\n        path: 'reset',\n        title: 'Forget password',\n        component: ForgetPasswordComponent,\n      },\n      {\n        path: 'home',\n        title: 'Home',\n        component: HomeComponent,\n      },\n      {\n        path: 'signup',\n        title: 'Signup',\n        component: SignupComponent,\n        resolve: { redirectUrl: redirectResolver },\n      },\n      {\n        path: 'thankyou',\n        title: 'Thank You',\n        component: ThankYouComponent,\n      },\n      {\n        path: 'validate/:token',\n        title: 'Account E-mail Validation',\n        component: AccountValidationComponent,\n      },\n      {\n        path: 'map',\n        title: 'Explore',\n        component: MapComponent,\n      },\n      {\n        path: 'feedback',\n        canActivate: [RedirectGuard],\n        component: RedirectGuard,\n        data: {\n          externalUrl: 'https://share.hsforms.com/1xXehW6VrR0WskbHhqxsrrw3atqe',\n        },\n      },\n      {\n        path: 'help',\n        canActivate: [RedirectGuard],\n        component: RedirectGuard,\n        data: {\n          externalUrl:\n            'https://github.com/OurPlanscape/Planscape/wiki/Planscape-User-Guide',\n        },\n      },\n      {\n        path: 'plan/:id',\n        title: 'Plan Details',\n        component: PlanComponent,\n        canActivate: [AuthGuard],\n        children: [\n          {\n            path: 'config',\n            title: 'Scenario Configuration',\n            component: CreateScenariosComponent,\n          },\n          {\n            path: 'config/:id',\n            title: 'Scenario Configuration',\n            component: CreateScenariosComponent,\n          },\n          {\n            path: 'explore',\n            title: 'Explore',\n            component: ExploreComponent,\n          },\n        ],\n      },\n      {\n        path: 'explore/:id',\n        title: 'Explore Plan',\n        component: ExploreComponent,\n        canActivate: [AuthGuard],\n      },\n      {\n        path: 'account',\n        title: 'Account Details',\n        component: AccountPageComponent,\n        canActivate: [AuthGuard],\n        children: [\n          {\n            path: '',\n            redirectTo: 'information',\n            pathMatch: 'full',\n          },\n          {\n            path: 'information',\n            title: 'Edit Personal information',\n            component: DetailsComponent,\n          },\n          {\n            path: 'credentials',\n            title: 'Edit Credentials',\n            component: CredentialsComponent,\n          },\n          {\n            path: 'delete-account',\n            title: 'Deactivate Account',\n            component: DeleteAccountComponent,\n          },\n        ],\n      },\n    ],\n  },\n];\n\n@Injectable({ providedIn: 'root' })\nexport class PlanscapeTitleStrategy extends TitleStrategy {\n  constructor(private readonly title: Title) {\n    super();\n  }\n\n  override updateTitle(routerState: RouterStateSnapshot) {\n    const title = this.buildTitle(routerState);\n    if (title !== undefined) {\n      this.title.setTitle(`Planscape | ${title}`);\n    }\n  }\n}\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers: [\n    {\n      provide: TitleStrategy,\n      useClass: PlanscapeTitleStrategy,\n    },\n  ],\n})\nexport class AppRoutingModule {}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 157,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "TitleStrategy"
            ],
            "type": "injectable"
        },
        {
            "name": "PlanService",
            "id": "injectable-PlanService-0824c44dd6cda39efd279c7aa7f035ec88643186365e450a0849691be6d380f97131214e5dac2a2668e0dc71c1975de2c7a71cd04dd57380da2b5fb2dc2ed9e3",
            "file": "src/app/services/plan.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createPlan",
                    "args": [
                        {
                            "name": "payload",
                            "type": "CreatePlanPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Plan>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMakes a request to the backend to create a plan and updates state.",
                    "description": "<p>Makes a request to the backend to create a plan and updates state.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "CreatePlanPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePlan",
                    "args": [
                        {
                            "name": "planIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMakes a request to the backend to delete a plan with the given ID.",
                    "description": "<p>Makes a request to the backend to delete a plan with the given ID.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "planIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPlan",
                    "args": [
                        {
                            "name": "planId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Plan>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMakes a request to the backend to fetch a plan with the given ID.",
                    "description": "<p>Makes a request to the backend to fetch a plan with the given ID.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "planId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listPlansByUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PreviewPlan[]>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMakes a request to the backend for a list of all plans owned by a user.\n If the user is not provided, return all plans with owner=null.\n",
                    "description": "<p>Makes a request to the backend for a list of all plans owned by a user.\n If the user is not provided, return all plans with owner=null.</p>\n"
                },
                {
                    "name": "planNameExists",
                    "args": [
                        {
                            "name": "planName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "planName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePlanningArea",
                    "args": [
                        {
                            "name": "planningAreaConfig",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "planId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUpdates a planning area with new parameters.",
                    "description": "<p>Updates a planning area with new parameters.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "planningAreaConfig",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "planId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable, take } from 'rxjs';\n\nimport { BackendConstants } from '../backend-constants';\nimport { CreatePlanPayload, Plan, PreviewPlan } from '../types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlanService {\n  constructor(private http: HttpClient) {}\n\n  planNameExists(planName: string) {\n    return this.listPlansByUser().pipe(\n      map((plans) => plans.some((plan) => plan.name === planName))\n    );\n  }\n\n  /** Makes a request to the backend to create a plan and updates state. */\n  createPlan(payload: CreatePlanPayload): Observable<Plan> {\n    return this.http.post<Plan>(\n      BackendConstants.END_POINT + '/planning/create_planning_area/',\n      payload,\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  /** Makes a request to the backend to delete a plan with the given ID. */\n  deletePlan(planIds: string[]): Observable<string> {\n    return this.http.post<string>(\n      BackendConstants.END_POINT.concat(\n        '/planning/delete_planning_area/?id=',\n        planIds.toString()\n      ),\n      {\n        id: planIds,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  /** Makes a request to the backend to fetch a plan with the given ID. */\n  getPlan(planId: string): Observable<Plan> {\n    return this.http.get<Plan>(\n      BackendConstants.END_POINT.concat(\n        '/planning/get_planning_area_by_id/?id=',\n        planId\n      ),\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  /** Makes a request to the backend for a list of all plans owned by a user.\n   *  If the user is not provided, return all plans with owner=null.\n   */\n  listPlansByUser(): Observable<PreviewPlan[]> {\n    let url = BackendConstants.END_POINT.concat(\n      '/planning/list_planning_areas'\n    );\n    return this.http.get<Plan[]>(url, {\n      withCredentials: true,\n    });\n  }\n\n  /** Updates a planning area with new parameters. */\n  updatePlanningArea(\n    planningAreaConfig: Plan,\n    planId: number\n  ): Observable<number> {\n    const url = BackendConstants.END_POINT.concat(\n      '/planning/update_planning_area/'\n    );\n    return this.http\n      .patch<number>(\n        url,\n        {\n          id: planId,\n          notes: planningAreaConfig.notes,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(take(1));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PlanStateService",
            "id": "injectable-PlanStateService-93c649303a87123a6608c45cdf19dc18128ee6218d28b761da1ed8a82c54b8f24a55d7931c25f9e63c4cf3d7daa87830842fc612d4a57d9dfd809128b0f901a5",
            "file": "src/app/services/plan-state.service.ts",
            "properties": [
                {
                    "name": "planRegion$",
                    "defaultValue": "new BehaviorSubject<Region>(Region.SIERRA_NEVADA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "planState$",
                    "defaultValue": "new BehaviorSubject<PlanState>({\n    all: {}, // All plans indexed by id\n    currentPlanId: null,\n    currentScenarioId: null,\n    mapConditionLayer: null,\n    mapShapes: null,\n    legendUnits: null,\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "treatmentGoalsConfig$",
                    "defaultValue": "new BehaviorSubject<\n    TreatmentGoalConfig[] | null\n  >(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addPlanToState",
                    "args": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToProjectAreas",
                    "args": [
                        {
                            "name": "scenarioProjectAreas",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProjectArea[]",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarioProjectAreas",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToScenarioConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectedQuestion",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ScenarioConfig",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedQuestion",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPlan",
                    "args": [
                        {
                            "name": "basePlan",
                            "type": "CreatePlanPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "basePlan",
                            "type": "CreatePlanPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createScenario",
                    "args": [
                        {
                            "name": "scenarioParameters",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioParameters",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetricData",
                    "args": [
                        {
                            "name": "metric_paths",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "metric_paths",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPlan",
                    "args": [
                        {
                            "name": "planId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "planId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedQuestionFromConfig",
                    "args": [
                        {
                            "name": "questionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "questionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPlanRegion",
                    "args": [
                        {
                            "name": "value",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates planRegion and treatmentGoalsConfig if value is a valid Region\n",
                    "description": "<p>Updates planRegion and treatmentGoalsConfig if value is a valid Region</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStateWithConditionLayer",
                    "args": [
                        {
                            "name": "layer",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "layer",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStateWithLegendUnits",
                    "args": [
                        {
                            "name": "legendUnits",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "legendUnits",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStateWithPlan",
                    "args": [
                        {
                            "name": "planId",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "planId",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStateWithScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStateWithShapes",
                    "args": [
                        {
                            "name": "shapes",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "shapes",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PlanService } from './plan.service';\nimport { ScenarioService } from './scenario.service';\nimport { TreatmentGoalsService } from './treatment-goals.service';\nimport {\n  Plan,\n  BackendProjectArea,\n  CreatePlanPayload,\n  ProjectArea,\n  Region,\n  Scenario,\n  ScenarioConfig,\n  TreatmentGoalConfig,\n  TreatmentQuestionConfig,\n} from '../types';\nimport { BehaviorSubject, map, switchMap, take, tap } from 'rxjs';\nimport { Feature } from 'geojson';\n\nexport interface PlanState {\n  all: {\n    [planId: number]: Plan;\n  };\n  currentPlanId: Plan['id'] | null;\n  currentScenarioId: Scenario['id'] | null;\n  mapConditionLayer: string | null;\n  mapShapes: Feature[] | null;\n  legendUnits: string | null;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlanStateService {\n  // Warning: do not mutate state!\n  readonly planState$ = new BehaviorSubject<PlanState>({\n    all: {}, // All plans indexed by id\n    currentPlanId: null,\n    currentScenarioId: null,\n    mapConditionLayer: null,\n    mapShapes: null,\n    legendUnits: null,\n  });\n  readonly treatmentGoalsConfig$ = new BehaviorSubject<\n    TreatmentGoalConfig[] | null\n  >(null);\n\n  readonly planRegion$ = new BehaviorSubject<Region>(Region.SIERRA_NEVADA);\n\n  constructor(\n    private planService: PlanService,\n    private scenarioService: ScenarioService,\n    private treatmentGoalsService: TreatmentGoalsService\n  ) {\n    this.treatmentGoalsService\n      .getTreatmentGoalsForArea(this.planRegion$.getValue())\n      .subscribe((config: TreatmentGoalConfig[]) => {\n        this.treatmentGoalsConfig$.next(config);\n      });\n  }\n\n  createPlan(basePlan: CreatePlanPayload) {\n    return this.planService.createPlan(basePlan).pipe(\n      tap((result: Plan) => {\n        this.addPlanToState(result);\n      })\n    );\n  }\n\n  getPlan(planId: string) {\n    return this.planService\n      .getPlan(planId)\n      .pipe(tap((plan) => this.addPlanToState(plan)));\n  }\n\n  getScenario(scenarioId: string) {\n    return this.scenarioService.getScenario(scenarioId).pipe(\n      switchMap((scenario) => {\n        // TODO this is pretty bad, why do we need to pull stuff from another endpoint for this?\n        return this.getSelectedQuestionFromConfig(\n          scenario.configuration.question_id!\n        ).pipe(\n          take(1),\n          map((selectedQuestion) => {\n            return {\n              ...scenario,\n              ...{\n                configuration: this.convertToScenarioConfig(\n                  scenario.configuration,\n                  selectedQuestion\n                ),\n              },\n            };\n          })\n        );\n      })\n    );\n  }\n\n  getSelectedQuestionFromConfig(questionId: number) {\n    var selectedQuestion: TreatmentQuestionConfig | null = null;\n\n    return this.treatmentGoalsConfig$.pipe(\n      map((goals) => {\n        goals!.forEach((goal) => {\n          goal.questions.forEach((question) => {\n            if (question.id === questionId) {\n              selectedQuestion = question;\n            }\n          });\n        });\n        return selectedQuestion;\n      })\n    );\n  }\n\n  private convertToScenarioConfig(\n    config: any,\n    selectedQuestion: any\n  ): ScenarioConfig {\n    return {\n      ...config,\n      ...{\n        treatment_question: selectedQuestion,\n        project_areas: this.convertToProjectAreas(config.project_areas),\n      },\n    };\n  }\n\n  private convertToProjectAreas(scenarioProjectAreas: {\n    [id: number]: BackendProjectArea;\n  }): ProjectArea[] {\n    if (!scenarioProjectAreas) {\n      return [];\n    }\n\n    let projectAreas: ProjectArea[] = [];\n    Object.values(scenarioProjectAreas).forEach((projectArea) => {\n      projectAreas.push({\n        id: projectArea.id.toString(),\n        projectId: projectArea.properties?.project?.toString(),\n        projectArea: projectArea.geometry,\n        owner: projectArea.properties?.owner?.toString(),\n        estimatedAreaTreated: projectArea.properties?.estimated_area_treated,\n      });\n    });\n\n    return projectAreas;\n  }\n\n  createScenario(scenarioParameters: any) {\n    return this.scenarioService.createScenario(scenarioParameters).pipe(\n      tap((result) => {\n        if (result.id) {\n          this.updateStateWithScenario(result.id.toString());\n        }\n      })\n    );\n  }\n\n  getMetricData(metric_paths: any) {\n    return this.scenarioService.getMetricData(\n      metric_paths,\n      this.planRegion$.value\n    );\n  }\n\n  /**\n   * Updates planRegion and treatmentGoalsConfig if value is a valid Region\n   */\n  setPlanRegion(value: Region) {\n    if (Object.values(Region).includes(value)) {\n      this.planRegion$.next(value);\n      this.treatmentGoalsService\n        .getTreatmentGoalsForArea(this.planRegion$.getValue())\n        .subscribe((config: TreatmentGoalConfig[]) => {\n          this.treatmentGoalsConfig$.next(config);\n        });\n    }\n  }\n\n  private addPlanToState(plan: Plan) {\n    // Object.freeze() enforces shallow runtime immutability\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n        [plan.id]: plan,\n      },\n    });\n\n    this.planState$.next(updatedState);\n  }\n\n  updateStateWithPlan(planId: number | null) {\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n      },\n      currentPlanId: planId,\n    });\n\n    this.planState$.next(updatedState);\n  }\n\n  updateStateWithScenario(scenarioId: string | null) {\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n      },\n      currentScenarioId: scenarioId,\n    });\n\n    this.planState$.next(updatedState);\n  }\n\n  updateStateWithConditionLayer(layer: string | null) {\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n      },\n      mapConditionLayer: layer,\n    });\n    this.planState$.next(updatedState);\n  }\n\n  updateStateWithShapes(shapes: any | null) {\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n      },\n      mapShapes: shapes,\n    });\n    this.planState$.next(updatedState);\n  }\n\n  updateStateWithLegendUnits(legendUnits: string | null) {\n    const currentState = Object.freeze(this.planState$.value);\n    const updatedState = Object.freeze({\n      ...currentState,\n      all: {\n        ...currentState.all,\n      },\n      legendUnits: legendUnits,\n    });\n\n    this.planState$.next(updatedState);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "planService",
                        "type": "PlanService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treatmentGoalsService",
                        "type": "TreatmentGoalsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "planService",
                        "type": "PlanService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treatmentGoalsService",
                        "type": "TreatmentGoalsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PopupService",
            "id": "injectable-PopupService-01e3bc5631bd7c64db632a67bcf46c6ea0646d640cfeca7ca298df9111881579ccd9c25eccb6c3db7848387376bd8b47c8cda36a19e4bc459bdf5faead13cf6b",
            "file": "src/app/services/popup.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "makeDetailsPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PopupService {\n  constructor() {}\n\n  makeDetailsPopup(data: any): string {\n    return `` + `<div>Name: ${data}</div>`;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RedirectGuard",
            "id": "injectable-RedirectGuard-ce2e18ea9efb5f0a473873443ed1c3a14f44d71f959e2becdddf24668999c60628602dbc0e38d87fa22f7d2503c86a09a8cc5bf1056e9921364ada3a934ed5bf",
            "file": "src/app/services/redirect.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RedirectGuard {\n  constructor() {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    window.location.href = route.data['externalUrl'];\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RedirectService",
            "id": "injectable-RedirectService-097b8bfc3ba46a165161aef6fcfa44bcc3fbe9dff9839f2df2d1354f4df6b9dcc32cc5b1cb7b2251dd4ce9c810f6183d54dc407633b27e37893d4ea11971e6c5",
            "file": "src/app/services/redirect.service.ts",
            "properties": [
                {
                    "name": "key",
                    "defaultValue": "'loginRedirect'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getRedirectData",
                    "args": [],
                    "optional": false,
                    "returnType": "RedirectData | null",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeRedirect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setRedirect",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldRedirect",
                    "args": [
                        {
                            "name": "userEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | false",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface RedirectData {\n  url: string;\n  userHash?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RedirectService {\n  readonly key = 'loginRedirect';\n\n  setRedirect(url: string, user?: string) {\n    const userHash = user ? Buffer.from(user).toString('base64') : null;\n    localStorage.setItem(this.key, JSON.stringify({ url, userHash }));\n  }\n\n  private getUrl(): string | null {\n    const redirectData = this.getRedirectData();\n    if (redirectData) {\n      return redirectData.url;\n    }\n    return null;\n  }\n\n  private getEmail(): string | null {\n    const redirectData = this.getRedirectData();\n    if (redirectData && redirectData.userHash) {\n      return Buffer.from(redirectData.userHash, 'base64').toString('utf-8');\n    }\n    return null;\n  }\n\n  private getRedirectData(): RedirectData | null {\n    const redirectData = localStorage.getItem(this.key);\n    if (redirectData) {\n      return JSON.parse(redirectData);\n    }\n    return null;\n  }\n\n  removeRedirect() {\n    localStorage.removeItem(this.key);\n  }\n\n  shouldRedirect(userEmail: string) {\n    const savedEmail = this.getEmail();\n    const savedUrl = this.getUrl();\n    // if we have a user stored, we need to check it's the same as the email provided.\n    if (savedEmail && savedEmail !== userEmail) {\n      return false;\n    }\n    return savedUrl || false;\n  }\n\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 55
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RegionService",
            "id": "injectable-RegionService-84af1faa44b94a3c3662810bc48f49fffab28963b25ba02244f2a3ab0d5ef397e1d9a4df9c25f05e86c69f7a105510074cb1f6eb1b1693211ac0fbedeebbe105",
            "file": "src/app/services/region.service.ts",
            "properties": [
                {
                    "name": "availableRegions",
                    "defaultValue": "new Set([\n    Region.SIERRA_NEVADA,\n    this.features.isFeatureEnabled('show_socal')\n      ? Region.SOUTHERN_CALIFORNIA\n      : null,\n    this.features.isFeatureEnabled('show_centralcoast')\n      ? Region.CENTRAL_COAST\n      : null,\n    this.features.isFeatureEnabled('show_north_cal')\n      ? Region.NORTHERN_CALIFORNIA\n      : null,\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "drawRegionEnabled$",
                    "defaultValue": "this.sessionService.region$\n    .asObservable()\n    .pipe(map((region) => (region ? this.regionDrawOptions[region] : false)))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "regionDrawOptions",
                    "defaultValue": "{\n    [Region.SIERRA_NEVADA]: true,\n    [Region.SOUTHERN_CALIFORNIA]: this.features.isFeatureEnabled('draw_socal'),\n    [Region.NORTHERN_CALIFORNIA]:\n      this.features.isFeatureEnabled('draw_northcal'),\n    [Region.CENTRAL_COAST]: this.features.isFeatureEnabled('draw_centralcoast'),\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<Region | boolean>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "regionOptions",
                    "defaultValue": "regions.map((region) => {\n    return {\n      type: region,\n      name: region,\n      available: this.availableRegions.has(region),\n    };\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegionOption[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FeatureService } from '../features/feature.service';\nimport { Region, RegionOption, regions } from '../types';\nimport { SessionService } from './session.service';\nimport { map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegionService {\n  constructor(\n    private features: FeatureService,\n    private sessionService: SessionService\n  ) {}\n\n  private availableRegions = new Set([\n    Region.SIERRA_NEVADA,\n    this.features.isFeatureEnabled('show_socal')\n      ? Region.SOUTHERN_CALIFORNIA\n      : null,\n    this.features.isFeatureEnabled('show_centralcoast')\n      ? Region.CENTRAL_COAST\n      : null,\n    this.features.isFeatureEnabled('show_north_cal')\n      ? Region.NORTHERN_CALIFORNIA\n      : null,\n  ]);\n\n  regionOptions: RegionOption[] = regions.map((region) => {\n    return {\n      type: region,\n      name: region,\n      available: this.availableRegions.has(region),\n    };\n  });\n\n  private regionDrawOptions: Record<Region, boolean> = {\n    [Region.SIERRA_NEVADA]: true,\n    [Region.SOUTHERN_CALIFORNIA]: this.features.isFeatureEnabled('draw_socal'),\n    [Region.NORTHERN_CALIFORNIA]:\n      this.features.isFeatureEnabled('draw_northcal'),\n    [Region.CENTRAL_COAST]: this.features.isFeatureEnabled('draw_centralcoast'),\n  };\n\n  drawRegionEnabled$ = this.sessionService.region$\n    .asObservable()\n    .pipe(map((region) => (region ? this.regionDrawOptions[region] : false)));\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "features",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "features",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ScenarioService",
            "id": "injectable-ScenarioService-b3226cf040d1112774871c09155249ed36216009236db83617960ea73dc0f9da3eac0f1fd6b1cde7331513c74d26148c76f714a5cc904397c465f227d471f8c1",
            "file": "src/app/services/scenario.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "changeScenarioStatus",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "SCENARIO_STATUS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "SCENARIO_STATUS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertConfigToScenario",
                    "args": [
                        {
                            "name": "config",
                            "type": "ScenarioConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ScenarioConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createScenario",
                    "args": [
                        {
                            "name": "scenarioParameters",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCreates a scenario in the backend. Returns scenario ID.",
                    "description": "<p>Creates a scenario in the backend. Returns scenario ID.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenarioParameters",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScenarios",
                    "args": [
                        {
                            "name": "scenarioIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDeletes one or more scenarios from the backend. Returns IDs of deleted scenarios.",
                    "description": "<p>Deletes one or more scenarios from the backend. Returns IDs of deleted scenarios.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenarioIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadCsvData",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadShapeFiles",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetricData",
                    "args": [
                        {
                            "name": "metric_paths",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets Metric Data For Scenario Output Fields",
                    "description": "<p>Gets Metric Data For Scenario Output Fields</p>\n",
                    "jsdoctags": [
                        {
                            "name": "metric_paths",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Scenario>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFetches a scenario by its id from the backend.",
                    "description": "<p>Fetches a scenario by its id from the backend.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScenariosForPlan",
                    "args": [
                        {
                            "name": "planId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Scenario[]>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFetches the scenarios for a plan from the backend.",
                    "description": "<p>Fetches the scenarios for a plan from the backend.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "planId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleScenarioStatus",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "archive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "archive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateScenarioNotes",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUpdates a scenario with new notes.",
                    "description": "<p>Updates a scenario with new notes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, Observable, take } from 'rxjs';\nimport {\n  Region,\n  regionToString,\n  Scenario,\n  SCENARIO_STATUS,\n  ScenarioConfig,\n} from '../types';\nimport { BackendConstants } from '../backend-constants';\nimport { CreateScenarioError } from './errors';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScenarioService {\n  constructor(private http: HttpClient) {}\n\n  /** Fetches the scenarios for a plan from the backend. */\n  getScenariosForPlan(planId: number): Observable<Scenario[]> {\n    return this.http.get<Scenario[]>(\n      BackendConstants.END_POINT.concat(\n        `/planning/list_scenarios_for_planning_area/?planning_area=${planId}`\n      ),\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  // TODO Add boolean parameter to control if show_results flag is true or false\n  /** Fetches a scenario by its id from the backend. */\n  getScenario(scenarioId: string): Observable<Scenario> {\n    const url = BackendConstants.END_POINT.concat(\n      '/planning/get_scenario_by_id/?id=',\n      scenarioId\n    );\n    return this.http.get<Scenario>(url, {\n      withCredentials: true,\n    });\n  }\n\n  /** Creates a scenario in the backend. Returns scenario ID. */\n  createScenario(scenarioParameters: any): Observable<any> {\n    scenarioParameters['configuration'] = this.convertConfigToScenario(\n      scenarioParameters['configuration']\n    );\n    return this.http\n      .post<{\n        id: number;\n      }>(\n        BackendConstants.END_POINT + '/planning/create_scenario/',\n        scenarioParameters,\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(\n        catchError((error) => {\n          const message =\n            error.error.reason || 'Please change your settings and try again.';\n          throw new CreateScenarioError(\n            'Your scenario config is invalid. ' + message\n          );\n        })\n      );\n  }\n\n  /** Deletes one or more scenarios from the backend. Returns IDs of deleted scenarios. */\n  deleteScenarios(scenarioIds: string[]): Observable<string[]> {\n    return this.http.post<string[]>(\n      BackendConstants.END_POINT.concat('/planning/delete_scenario/'),\n      {\n        scenario_id: scenarioIds,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  toggleScenarioStatus(scenarioId: number, archive: boolean) {\n    return this.changeScenarioStatus(\n      scenarioId,\n      archive ? 'ARCHIVED' : 'ACTIVE'\n    );\n  }\n\n  private changeScenarioStatus(scenarioId: number, status: SCENARIO_STATUS) {\n    const url = BackendConstants.END_POINT.concat('/planning/update_scenario/');\n    return this.http.patch<number>(\n      url,\n      {\n        id: scenarioId,\n        status: status,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n  }\n\n  /** Updates a scenario with new notes. */\n  updateScenarioNotes(scenario: Scenario): Observable<number> {\n    const url = BackendConstants.END_POINT.concat('/planning/update_scenario/');\n    return this.http\n      .patch<number>(\n        url,\n        {\n          id: scenario.id,\n          notes: scenario.notes,\n        },\n        {\n          withCredentials: true,\n        }\n      )\n      .pipe(take(1));\n  }\n\n  downloadCsvData(scenarioId: string): Observable<any> {\n    return this.http.get(\n      BackendConstants.END_POINT +\n        `/planning/get_scenario_download_by_id?id=${scenarioId}`,\n      {\n        withCredentials: true,\n        responseType: 'arraybuffer',\n      }\n    );\n  }\n\n  downloadShapeFiles(scenarioId: string): Observable<any> {\n    return this.http.get(\n      BackendConstants.END_POINT +\n        `/planning/download_shapefile?id=${scenarioId}`,\n      {\n        withCredentials: true,\n        responseType: 'arraybuffer',\n      }\n    );\n  }\n\n  /** Gets Metric Data For Scenario Output Fields */\n  getMetricData(metric_paths: any, region: Region): Observable<any> {\n    const url = BackendConstants.END_POINT.concat(\n      '/conditions/metrics/?region_name=' +\n        `${regionToString(region)}` +\n        '&metric_paths=' +\n        JSON.stringify(metric_paths)\n    );\n    return this.http.get<any>(url).pipe(take(1));\n  }\n\n  private convertConfigToScenario(config: ScenarioConfig): any {\n    return {\n      question_id: config.treatment_question!.id,\n      est_cost: config.est_cost,\n      max_budget: config.max_budget,\n      min_distance_from_road: config.min_distance_from_road,\n      max_slope: config.max_slope,\n      max_treatment_area_ratio: config.max_treatment_area_ratio,\n      scenario_priorities: config.treatment_question!['scenario_priorities'],\n      scenario_output_fields:\n        config.treatment_question!['scenario_output_fields_paths']!['metrics'],\n      stand_thresholds: config.treatment_question!['stand_thresholds'],\n      global_thresholds: config.treatment_question!['global_thresholds'],\n      weights: config.treatment_question!['weights'],\n      excluded_areas: config.excluded_areas,\n      stand_size: config.stand_size,\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SessionService",
            "id": "injectable-SessionService-3d9832bf64fc7fdea6567687ef011126690c29efcb5d6887d680b91d48da1b5d3972df9cd80fa895f963eb2da0b82c5fcc55d67afb4de3a117b888acaddd8105",
            "file": "src/app/services/session.service.ts",
            "properties": [
                {
                    "name": "mapConfigs$",
                    "defaultValue": "new BehaviorSubject<Record<\n    Region,\n    MapConfig[]\n  > | null>(defaultMapConfigsDictionary())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "mapViewOptions$",
                    "defaultValue": "new BehaviorSubject<MapViewOptions | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "region$",
                    "defaultValue": "new BehaviorSubject<Region | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "sessionInterval$",
                    "defaultValue": "interval(\n    SESSION_SAVE_INTERVAL\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "<p>Components can subscribe to this Observable to perform operations repeatedly\n at a set interval (like saving state).</p>\n",
                    "line": 23,
                    "rawdescription": "\nComponents can subscribe to this Observable to perform operations repeatedly\n at a set interval (like saving state).",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "instanceOfMapConfig",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMapConfigs",
                    "args": [
                        {
                            "name": "value",
                            "type": "MapConfig[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits the map configs and saves them in local storage.",
                    "description": "<p>Emits the map configs and saves them in local storage.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MapConfig[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMapViewOptions",
                    "args": [
                        {
                            "name": "value",
                            "type": "MapViewOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits the map view options and saves them in local storage.",
                    "description": "<p>Emits the map view options and saves them in local storage.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MapViewOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRegion",
                    "args": [
                        {
                            "name": "value",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the region and saves it in local storage. Saves the default region if local storage's\nvalue does not match a region (i.e. enum was changed, but user still has old value stored).\n",
                    "description": "<p>Emits the region and saves it in local storage. Saves the default region if local storage&#39;s\nvalue does not match a region (i.e. enum was changed, but user still has old value stored).</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateSavedMapConfigs",
                    "args": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidates the map configs loaded from local storage to ensure all required fields\n are present.",
                    "description": "<p>Validates the map configs loaded from local storage to ensure all required fields\n are present.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateSavedMapViewOptions",
                    "args": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValidates the map view options loaded from local storage to ensure all required fields\n are present.",
                    "description": "<p>Validates the map view options loaded from local storage to ensure all required fields\n are present.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>The session service keeps track of where the guest or logged-in user left\noff.</p>\n",
            "rawdescription": "\n\nThe session service keeps track of where the guest or logged-in user left\noff.\n",
            "sourceCode": "import { BehaviorSubject, interval, Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { MapConfig, MapViewOptions, Region } from '../types';\nimport {\n  defaultMapConfig,\n  defaultMapConfigsDictionary,\n  defaultMapViewOptions,\n} from '../map/map.helper';\n\n/** How often the user's session should be saved to local storage (in ms). */\nconst SESSION_SAVE_INTERVAL = 600;\n\n/**\n * The session service keeps track of where the guest or logged-in user left\n * off.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SessionService {\n  /** Components can subscribe to this Observable to perform operations repeatedly\n   *  at a set interval (like saving state). */\n  readonly sessionInterval$: Observable<number> = interval(\n    SESSION_SAVE_INTERVAL\n  );\n\n  readonly mapConfigs$ = new BehaviorSubject<Record<\n    Region,\n    MapConfig[]\n  > | null>(defaultMapConfigsDictionary());\n  readonly mapViewOptions$ = new BehaviorSubject<MapViewOptions | null>(null);\n  readonly region$ = new BehaviorSubject<Region | null>(null);\n\n  constructor() {\n    const storedMapConfigs = localStorage.getItem('mapConfigs');\n    if (storedMapConfigs && this.validateSavedMapConfigs(storedMapConfigs)) {\n      this.mapConfigs$.next(JSON.parse(storedMapConfigs));\n    }\n    const storedMapViewOptions = localStorage.getItem('mapViewOptions');\n    if (\n      storedMapViewOptions &&\n      this.validateSavedMapViewOptions(storedMapViewOptions)\n    ) {\n      this.mapViewOptions$.next(JSON.parse(storedMapViewOptions));\n    }\n    const savedRegion = localStorage.getItem('region');\n    if (!!savedRegion) {\n      this.setRegion(savedRegion as Region);\n    } else {\n      this.setRegion(Region.SIERRA_NEVADA);\n    }\n  }\n\n  /** Emits the map configs and saves them in local storage. */\n  setMapConfigs(value: MapConfig[], region?: Region) {\n    var regionIndex: Region | null = region || this.region$.getValue();\n    if (!regionIndex) {\n      regionIndex = Region.SIERRA_NEVADA;\n    }\n    var mapConf: Record<Region, MapConfig[]> | null =\n      this.mapConfigs$.getValue();\n    if (mapConf && regionIndex) {\n      mapConf![regionIndex] = value;\n    }\n    this.mapConfigs$.next(mapConf);\n    localStorage.setItem('mapConfigs', JSON.stringify(mapConf));\n  }\n\n  /** Emits the map view options and saves them in local storage. */\n  setMapViewOptions(value: MapViewOptions) {\n    localStorage.setItem('mapViewOptions', JSON.stringify(value));\n    this.mapViewOptions$.next(value);\n  }\n\n  /**\n   * Emits the region and saves it in local storage. Saves the default region if local storage's\n   * value does not match a region (i.e. enum was changed, but user still has old value stored).\n   */\n  setRegion(value: Region) {\n    if (Object.values(Region).includes(value)) {\n      localStorage.setItem('region', value);\n      this.region$.next(value);\n    } else {\n      localStorage.setItem('region', Region.SIERRA_NEVADA);\n      this.region$.next(Region.SIERRA_NEVADA);\n    }\n  }\n\n  /** Validates the map configs loaded from local storage to ensure all required fields\n   *  are present. */\n  private validateSavedMapConfigs(data: string): boolean {\n    const configs: any[] = JSON.parse(data);\n    for (var regionConfig of Object.values(configs)) {\n      for (var mapConfig of Object.values(regionConfig)) {\n        if (!this.instanceOfMapConfig(mapConfig)) {\n          console.error('not valid config ' + JSON.stringify(mapConfig));\n          return false;\n        }\n      }\n    }\n    for (var region of Object.keys(configs)) {\n      if (!Object.values(Region).includes(region as unknown as Region)) {\n        console.error('Config key not valid Region ' + region);\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private instanceOfMapConfig(data: any): boolean {\n    const mapConfigExample: MapConfig = defaultMapConfig();\n    return (\n      Object.keys(data).sort().join(',') ===\n      Object.keys(mapConfigExample).sort().join(',')\n    );\n  }\n\n  /** Validates the map view options loaded from local storage to ensure all required fields\n   *  are present. */\n  private validateSavedMapViewOptions(data: string): boolean {\n    const mapViewOptions: MapViewOptions = JSON.parse(data);\n    return (\n      Object.keys(mapViewOptions).sort().join(',') ===\n      Object.keys(defaultMapViewOptions()).sort().join(',')\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ShareMapService",
            "id": "injectable-ShareMapService-2cfd1c7cd05cf4ce77e593d76efe67cc80902b54412bd14eef59d152009e662230f6e399bb3320535f2675b50bbb42c5cbe215e71a498982ecf92f2877dc1806",
            "file": "src/app/services/share-map.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createShareLink",
                    "args": [
                        {
                            "name": "mapData",
                            "type": "ViewState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreatedLink>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mapData",
                            "type": "ViewState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMapDataFromLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSharedLink",
                    "args": [
                        {
                            "name": "mapData",
                            "type": "ViewState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mapData",
                            "type": "ViewState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSharedLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { BackendConstants } from '../backend-constants';\nimport { HttpClient } from '@angular/common/http';\nimport { WINDOW } from './window.service';\nimport { MapConfig, MapViewOptions, Region } from '../types';\n\ninterface ViewState {\n  mapViewOptions: MapViewOptions | null;\n  mapConfig: MapConfig[];\n  region: Region;\n}\n\ninterface CreatedLink {\n  created_at: string;\n  link_code: string;\n  updated_at: string;\n  user_id?: string;\n  view_state: ViewState;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShareMapService {\n  constructor(\n    private http: HttpClient,\n    @Inject(WINDOW) private readonly window: Window\n  ) {}\n\n  getSharedLink(mapData: ViewState): Observable<string> {\n    const origin = this.window.location.origin;\n    return this.createShareLink(mapData).pipe(\n      map((createdLink) => origin + '/map?link=' + createdLink.link_code)\n    );\n  }\n\n  createShareLink(mapData: ViewState): Observable<CreatedLink> {\n    return this.http.post<CreatedLink>(\n      BackendConstants.END_POINT + '/planning/create_link/',\n      {\n        view_state: mapData,\n      },\n      { withCredentials: true }\n    );\n  }\n\n  getMapDataFromLink(link: string) {\n    return this.loadSharedLink(link).pipe(map((data) => data.view_state));\n  }\n\n  loadSharedLink(link: string) {\n    return this.http.get<CreatedLink>(\n      BackendConstants.END_POINT.concat('/planning/shared_link/', link),\n      { withCredentials: true }\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TreatmentGoalsService",
            "id": "injectable-TreatmentGoalsService-5bc247a1eb92a4dcf8c25be871da0341d5bb09ff3b082c096052e21bc41fb501deaf502fa6b17de5f85a0a228fa4b5cd9864c20040bdfd2b6d33551ea2e99bbf",
            "file": "src/app/services/treatment-goals.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTreatmentGoalsForArea",
                    "args": [
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Region, regionToString, TreatmentGoalConfig } from '../types';\nimport { BackendConstants } from '../backend-constants';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TreatmentGoalsService {\n  constructor(private http: HttpClient) {}\n\n  getTreatmentGoalsForArea(region: Region) {\n    return this.http.get<TreatmentGoalConfig[]>(\n      BackendConstants.END_POINT +\n        '/planning/treatment_goals_config/?region_name=' +\n        `${regionToString(region)}`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "JwtInterceptor",
            "id": "injectable-JwtInterceptor-40cae5d3bb8d55e383e6b547b69311242a01bd56f0b4da4e077477be000e8011abfdeb45c31665a603048495cf3a42a59e5532062517e6fa930b8413a040f412",
            "file": "src/app/services/jwt-interceptor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handle401Error",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { catchError, Observable, switchMap } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JwtInterceptor implements HttpInterceptor {\n  constructor(private auth: AuthService) {}\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((error) => {\n        if (\n          error instanceof HttpErrorResponse &&\n          !request.url.includes('login') &&\n          error.status === 401\n        ) {\n          return this.handle401Error(request, next);\n        }\n        throw error;\n      })\n    );\n  }\n\n  handle401Error(request: HttpRequest<any>, next: HttpHandler) {\n    return this.auth\n      .refreshLoggedInUser()\n      .pipe(switchMap(() => next.handle(request)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AfterTouchedOrSubmitErrorStateMatcher",
            "id": "class-AfterTouchedOrSubmitErrorStateMatcher-1b5f31df35e31bfd15770815d5af3ec601eae358368397c657d29a9c29b260fa5eef5524b320fa081f7e46d814956b548e1584fa3b08e74d0befc34de13141d3",
            "file": "src/app/validators/error-matchers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ErrorStateMatcher } from '@angular/material/core';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { PasswordFieldsErrors } from './passwords';\n\n/** Error when invalid control AND submitted. */\nexport class AfterTouchedOrSubmitErrorStateMatcher\n  implements ErrorStateMatcher\n{\n  isErrorState(\n    control: FormControl | null,\n    form: FormGroupDirective | NgForm | null\n  ): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.touched || isSubmitted));\n  }\n}\n\nexport class PasswordStateMatcher implements ErrorStateMatcher {\n  constructor(private errors: (keyof PasswordFieldsErrors)[]) {}\n\n  isErrorState(\n    control: FormControl | null,\n    form: FormGroupDirective | NgForm | null\n  ): boolean {\n    const isSubmitted = form && form.submitted;\n    const hasError = this.errors.some((error) => form?.hasError(error));\n    return (\n      hasError ||\n      !!(control && control.invalid && (control.touched || isSubmitted))\n    );\n  }\n}\n",
            "properties": [],
            "description": "<p>Error when invalid control AND submitted.</p>\n",
            "rawdescription": "\nError when invalid control AND submitted.",
            "methods": [
                {
                    "name": "isErrorState",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ErrorStateMatcher"
            ]
        },
        {
            "name": "BrowserWindowRef",
            "id": "class-BrowserWindowRef-e0c601a0710698ae4826c7fc4822ac4b6b4eedef1469c546ec52de7e2783a8e16b17bdb885830277a22410c24dfbb31a507db7cc2b91dd3be3aad53b5f347dda",
            "file": "src/app/services/window.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\nimport {\n  ClassProvider,\n  FactoryProvider,\n  InjectionToken,\n  PLATFORM_ID,\n} from '@angular/core';\n\n/**\n * Window service\n * This service provides a way of getting the window object via a dependency injection\n * This allows to mock and provide the window object as well as applying best practices.\n *\n * How it works?\n * The main idea is to provide a token when using window instead of referencing window object directly.\n *\n * Avoid this:\n *\n * ```\n * export class YourComponent {\n *\n *   getAgent() {\n *     window.navigator.userAgent;\n *   }\n * }\n * ```\n *\n * Use this instead:\n *\n * ```\n * export class YourComponent {\n *\n *  constructor(@Inject(WINDOW) private window: Window)\n *\n *   getAgent() {\n *     this.window.navigator.userAgent;\n *   }\n * }\n * ```\n *\n *\n * There are several ways of implementing this idea, this one is taken from\n * https://brianflove.com/2018-01-11/angular-window-provider/\n *\n *\n * Testing\n *\n * You can provide a mock of the window object when declaring your test module\n *\n * await TestBed.configureTestingModule({\n *       declarations: [YourComponent],\n *       providers: [\n *         {\n *           provide: WINDOW,\n *           useValue: { YourWindowMock },\n *         },\n *       ],\n *     }).compileComponents();\n *\n *\n * And then get the window reference on your tests\n *\n * ```\n * const window = TestBed.inject(WINDOW);\n * ```\n */\n\n/* Create a new injection token for injecting the window into a component. */\nexport const WINDOW = new InjectionToken<Window>('WindowToken');\n\n/* Define abstract class for obtaining reference to the global window object. */\nexport abstract class WindowRef {\n  get nativeWindow(): Window | Object {\n    throw new Error('Not implemented.');\n  }\n}\n\n/* Define class that implements the abstract class and returns the native window object. */\nexport class BrowserWindowRef extends WindowRef {\n  constructor() {\n    super();\n  }\n\n  override get nativeWindow(): Window | Object {\n    return window;\n  }\n}\n\n/* Create a factory function that returns the native window object. */\nexport function windowFactory(\n  browserWindowRef: BrowserWindowRef,\n  platformId: Object\n): Window | Object {\n  if (isPlatformBrowser(platformId)) {\n    return browserWindowRef.nativeWindow;\n  }\n  return {};\n}\n\n/* Create an injectable provider for the WindowRef token that uses the BrowserWindowRef class. */\nconst browserWindowProvider: ClassProvider = {\n  provide: WindowRef,\n  useClass: BrowserWindowRef,\n};\n\n/* Create an injectable provider that uses the windowFactory function for returning the native window object. */\nconst windowProvider: FactoryProvider = {\n  provide: WINDOW,\n  useFactory: windowFactory,\n  deps: [WindowRef, PLATFORM_ID],\n};\n\n/* Create an array of providers. */\nexport const WINDOW_PROVIDERS = [browserWindowProvider, windowProvider];\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 79
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "WindowRef"
            ],
            "accessors": {
                "nativeWindow": {
                    "name": "nativeWindow",
                    "getSignature": {
                        "name": "nativeWindow",
                        "type": "",
                        "returnType": "Window | Object",
                        "line": 84
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateScenarioError",
            "id": "class-CreateScenarioError-a7a9b83f3ccdd5f2f83ea6f666c0112415d8a43a1266c6571b482ba326809237d40c75e2b8fb4de51d00f7100ad670da556d3caa355b426e82aad2121c77f3bc",
            "file": "src/app/services/errors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateScenarioError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Error"
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MapManager",
            "id": "class-MapManager-fad97a246f680bc2541ae3a016ff677b46018bdf54b2e9cffef1c8c2e569350d14342f51193c5bbf9caae645b0a7dcbb77ee8285bd2073ee31f1b017a8d86c55",
            "file": "src/app/map/map-manager.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport booleanIntersects from '@turf/boolean-intersects';\nimport booleanWithin from '@turf/boolean-within';\nimport { point } from '@turf/helpers';\nimport { Feature, FeatureCollection, Geometry } from 'geojson';\nimport * as L from 'leaflet';\nimport '@geoman-io/leaflet-geoman-free';\nimport 'leaflet.sync';\nimport { BehaviorSubject, Observable, take } from 'rxjs';\n\nimport { BackendConstants } from '../backend-constants';\nimport { PopupService, SessionService } from '@services';\nimport {\n  BaseLayerType,\n  DEFAULT_COLORMAP,\n  FrontendConstants,\n  Map,\n  MapViewOptions,\n  Region,\n} from '../types';\n\nimport { SNACK_ERROR_CONFIG } from '../shared/constants';\nimport {\n  BOUNDARY_LAYER_HOVER_STYLES,\n  BOUNDARY_LAYER_NORMAL_STYLES,\n  DRAWING_STYLES,\n  GEOMAN_DRAW_OPTIONS,\n  HOVER_STYLES,\n  NORMAL_STYLES,\n} from './map.constants';\nimport {\n  areaOverlaps,\n  checkIfAreaInBoundaries,\n  createMultiPolygonFeatureCollection,\n  regionMapCenters,\n  transformCoordToLayer,\n} from './map.helper';\nimport { satelliteTiles, stadiaAlidadeTiles, terrainTiles } from './map.tiles';\nimport { createAndAddLegend } from './map.legends';\nimport { addClonedLayerToMap, removeClonedLayer } from './map.layers';\nimport * as esri from 'esri-leaflet';\n\n// Set to true so that layers are not editable by default\nL.PM.setOptIn(true);\n\n/**\n * Helper class to manage initialization and modification of Leaflet maps.\n * All logic that touches Leaflet layers or objects should live here instead\n * of in map.component.ts.\n */\nexport class MapManager {\n  polygonsCreated$ = new BehaviorSubject<boolean>(false);\n  drawingLayer = new L.FeatureGroup();\n  isInDrawingMode: boolean = false;\n  defaultOpacity: number = FrontendConstants.MAP_DATA_LAYER_OPACITY;\n  selectedRegion$ = new BehaviorSubject<Region | null>(Region.SIERRA_NEVADA);\n\n  constructor(\n    private matSnackBar: MatSnackBar,\n    private maps: Map[],\n    private readonly mapViewOptions$: BehaviorSubject<MapViewOptions>,\n    private popupService: PopupService,\n    private session: SessionService,\n    private http: HttpClient\n  ) {\n    this.selectedRegion$ = this.session.region$;\n  }\n\n  /** Initializes the map with controls and the layer options specified in its config. */\n  initLeafletMap(\n    map: Map,\n    mapId: string,\n    createDetailCardCallback: (\n      features: Feature<Geometry, any>[],\n      onInitialized: () => void\n    ) => any,\n    getBoundaryLayerVectorCallback: (vectorName: string) => Observable<L.Layer>\n  ) {\n    if (map.instance != undefined) map.instance.remove();\n\n    if (map.config.baseLayerType === BaseLayerType.Road) {\n      map.baseLayerRef = stadiaAlidadeTiles();\n    } else if (map.config.baseLayerType == BaseLayerType.Terrain) {\n      map.baseLayerRef = terrainTiles();\n    } else {\n      map.baseLayerRef = satelliteTiles();\n    }\n\n    map.instance = L.map(mapId, {\n      center: [...regionMapCenters(this.selectedRegion$.getValue()!)],\n      zoom: FrontendConstants.MAP_INITIAL_ZOOM,\n      minZoom: FrontendConstants.MAP_MIN_ZOOM,\n      maxZoom: FrontendConstants.MAP_MAX_ZOOM,\n      layers: [map.baseLayerRef],\n      preferCanvas: false, // This needs to be set to false for boundary Tooltip to function\n      zoomSnap: 0.5,\n      bounceAtZoomLimits: false,\n      zoomDelta: 0.5,\n      zoomAnimation: true,\n      wheelPxPerZoomLevel: 200,\n      zoomControl: false,\n      pmIgnore: false,\n    });\n\n    // Add zoom controls to bottom right corner\n    const zoomControl = L.control.zoom({\n      position: 'bottomright',\n    });\n    zoomControl.addTo(map.instance);\n\n    // Init layers, but only add them to the map instance if specified in the map config.\n    this.toggleBoundaryLayer(map, getBoundaryLayerVectorCallback);\n    this.changeConditionsLayer(map);\n\n    // Each map has its own cloned drawing layer because the same layer object cannot\n    // be added to multiple maps at the same time. Note this.drawingLayer is only added\n    // to one map at a time.\n    map.clonedDrawingRef = new L.FeatureGroup();\n    map.drawnPolygonLookup = {};\n    map.instance!.pm.setGlobalOptions({\n      allowSelfIntersection: false,\n      snappable: false,\n      removeLayerBelowMinVertexCount: false,\n      hintlineStyle: {\n        color: '#000',\n        weight: 5,\n      },\n      templineStyle: {\n        color: '#000',\n        weight: 5,\n      },\n      layerGroup: this.drawingLayer,\n    });\n    map.instance!.pm.setPathOptions(DRAWING_STYLES);\n\n    this.setUpEventHandlers(map, createDetailCardCallback);\n\n    map.existingProjectsLayerRef = this.loadExistingProjectsLayer();\n    map.existingProjectsLayerRef.addEventListener('remove', (_) => {\n      map.instance?.closePopup();\n    });\n\n    this.toggleExistingProjectsLayer(map);\n  }\n\n  private setUpEventHandlers(\n    map: Map,\n    createDetailCardCallback: (\n      features: Feature<Geometry, any>[],\n      onInitialized: () => void\n    ) => any\n  ) {\n    this.setUpDrawingHandlers(map.instance!);\n    this.setUpClickHandler(map, createDetailCardCallback);\n\n    this.setUpPanHandler(map.instance!);\n    this.setUpZoomHandler(map.instance!);\n  }\n\n  /**\n   * Adds a GeoJSON to the drawing layer.\n   * @param area  The geoJSON.GeoJSON of the area to add to the drawing layer.\n   * @param map  The map\n   */\n  addGeoJsonToDrawing(area: GeoJSON.GeoJSON, map: Map) {\n    L.geoJSON(area, {\n      style: (_) => DRAWING_STYLES,\n      pmIgnore: false,\n      onEachFeature: (feature, layer) => {\n        if (feature.geometry.type === 'MultiPolygon') {\n          feature.geometry.coordinates.forEach((coord) => {\n            const newLayer = transformCoordToLayer(coord);\n            newLayer.addTo(this.drawingLayer);\n            this.addClonedPolygons(newLayer);\n            newLayer.on('pm:edit', ({ layer }) => this.editHandler(layer));\n          });\n        } else {\n          layer.addTo(this.drawingLayer);\n          this.addClonedPolygons(layer);\n          layer.on('pm:edit', ({ layer }) => this.editHandler(layer));\n        }\n      },\n    });\n\n    map.instance?.fitBounds(this.drawingLayer.getBounds());\n\n    this.polygonsCreated$.next(true);\n  }\n\n  /**\n   * Given the original polygon, adds the cloned polygons to the cloned drawing\n   * layer on all maps.\n   */\n  private addClonedPolygons(layer: L.Layer) {\n    this.maps.forEach((currMap) => {\n      addClonedLayerToMap(currMap, layer);\n    });\n  }\n\n  /**\n   * Given the original polygon, removes the cloned polygons from the cloned drawing\n   * layer on all maps. Optionally deletes the original polygon key.\n   */\n  private removeClonedPolygons(layer: L.Layer, deleteOriginal: boolean) {\n    this.maps.forEach((currMap) => {\n      removeClonedLayer(currMap, layer, deleteOriginal);\n    });\n  }\n\n  private setUpDrawingHandlers(map: L.Map) {\n    /** Handles a created polygon event, which occurs when a polygon is completed. */\n    map.on('pm:create', (event) => {\n      // Allow drawn layers to be editable\n      (event.layer as any).options.pmIgnore = false;\n      L.PM.reInitLayer(event.layer);\n\n      const layer = event.layer;\n      // Sync created polygons to all maps\n      this.addClonedPolygons(layer);\n\n      this.polygonsCreated$.next(true);\n\n      event.layer.on('pm:edit', ({ layer }) => this.editHandler(layer));\n    });\n\n    /** Handles the process of drawing the polygon. */\n    map.on('pm:drawstart', (event) => {\n      this.isInDrawingMode = true;\n      event.workingLayer.on('pm:vertexadded', ({ workingLayer, latlng }) => {\n        // Check if the vertex overlaps with an existing polygon\n        let overlaps = false;\n        const existingFeatures =\n          this.drawingLayer.toGeoJSON() as FeatureCollection;\n        const lastPoint = point([latlng.lng, latlng.lat]);\n        existingFeatures.features.forEach((feature) => {\n          const isWithin = booleanWithin(lastPoint, feature);\n          const isIntersecting = booleanIntersects(\n            (workingLayer as L.Polygon).toGeoJSON(),\n            feature\n          );\n          overlaps = isWithin || isIntersecting;\n        });\n        if (overlaps) {\n          this.showDrawingError();\n          (map.pm.Draw as any).Polygon._removeLastVertex();\n          return;\n        }\n      });\n    });\n\n    /** Handles exit from drawing mode. */\n    map.on('pm:drawend', (event) => {\n      this.isInDrawingMode = false;\n    });\n\n    /** Handles a polygon removal event. */\n    map.on('pm:remove', (event) => {\n      const layer = event.layer;\n      // Sync deleted polygons to all maps\n      this.removeClonedPolygons(layer, true);\n\n      // When there are no more polygons\n      if (this.drawingLayer.getLayers().length === 0) {\n        this.polygonsCreated$.next(false);\n      }\n    });\n  }\n\n  /** Handles a polygon edit event. */\n  private editHandler(layer: L.Layer) {\n    const editedLayer = layer as L.Polygon;\n\n    // Check if polygon overlaps another\n    let overlaps = false;\n    this.drawingLayer.getLayers().forEach((feature) => {\n      const existingPolygon = feature as L.Polygon;\n      // Skip feature with same latlng because that is what's being edited\n      if (existingPolygon.getLatLngs() != editedLayer.getLatLngs()) {\n        overlaps = areaOverlaps(editedLayer, existingPolygon);\n      }\n    });\n    if (overlaps) {\n      this.showDrawingError();\n    }\n\n    // Sync edited polygons to all maps\n    this.removeClonedPolygons(layer, false);\n    this.addClonedPolygons(layer);\n  }\n\n  private showDrawingError() {\n    this.matSnackBar.open(\n      '[Error] Planning areas cannot overlap!',\n      'Dismiss',\n      SNACK_ERROR_CONFIG\n    );\n  }\n\n  private setUpClickHandler(\n    map: Map,\n    createDetailCardCallback: (\n      features: Feature<Geometry, any>[],\n      onInitialized: () => void\n    ) => any\n  ) {\n    map.instance!.on('click', (e) => {\n      if (!e.latlng) return;\n      if (!map.existingProjectsLayerRef) return;\n\n      // if the user is in drawing mode, don't open popups\n      if (this.isInDrawingMode) return;\n\n      const intersectingFeatureLayers: L.Polygon[] = [];\n\n      // Get all existing project polygons at the clicked point\n      map.existingProjectsLayerRef.eachFeature((featureLayer) => {\n        if (featureLayer instanceof L.Polygon && featureLayer.feature) {\n          const polygon = featureLayer as L.Polygon;\n          // If feature contains the point that was clicked, add to list\n          if (\n            booleanIntersects(\n              point(L.GeoJSON.latLngToCoords(e.latlng)),\n              polygon.feature!\n            ) ||\n            booleanWithin(\n              point(L.GeoJSON.latLngToCoords(e.latlng)),\n              polygon.feature!\n            )\n          ) {\n            intersectingFeatureLayers.push(polygon);\n          }\n        }\n      });\n\n      if (intersectingFeatureLayers.length === 0) return;\n\n      // Open detail card with all the features present at the clicked point\n      const popup: L.Popup = L.popup()\n        .setContent(\n          createDetailCardCallback(\n            intersectingFeatureLayers\n              .map((featureLayer) => {\n                return (featureLayer as L.Polygon).feature;\n              })\n              .filter((feature) => !!feature) as Feature<Geometry, any>[],\n            () => {\n              // After popup content is initialized, update its position and open it.\n              popup.update();\n              popup.openOn(map.instance!);\n            }\n          )\n        )\n        .setLatLng(e.latlng);\n    });\n  }\n\n  private setUpPanHandler(map: L.Map) {\n    if (!this.mapViewOptions$.getValue().center) return;\n\n    // Temporarily disabling to patch region-switch centering bug\n    // TODO: Either get rid of locally stored center or change to region-based dictionary\n    // map.panTo(this.mapViewOptions$.getValue().center);\n\n    map.addEventListener('moveend', (e) => {\n      const mapViewOptions = this.mapViewOptions$.getValue();\n      const center = map.getCenter();\n      if (\n        mapViewOptions.center[0] !== center.lat ||\n        mapViewOptions.center[1] !== center.lng\n      ) {\n        mapViewOptions.center = [center.lat, center.lng];\n        this.mapViewOptions$.next(mapViewOptions);\n      }\n    });\n  }\n\n  private setUpZoomHandler(map: L.Map) {\n    if (!this.mapViewOptions$.getValue().zoom) return;\n\n    // map.setZoom(this.mapViewOptions$.getValue().zoom);\n\n    map.addEventListener('zoomend', (e) => {\n      const mapViewOptions = this.mapViewOptions$.getValue();\n      mapViewOptions.zoom = map.getZoom();\n      this.mapViewOptions$.next(mapViewOptions);\n    });\n  }\n\n  /** Adds the cloned drawing layer to the map. */\n  showClonedDrawing(map: Map) {\n    map.clonedDrawingRef?.addTo(map.instance!);\n  }\n\n  /** Removes the cloned drawing layer from the map. */\n  hideClonedDrawing(map: Map) {\n    map.clonedDrawingRef?.removeFrom(map.instance!);\n  }\n\n  /** Removes drawing control and layer from the map. */\n  removeDrawingControl(map: L.Map) {\n    map.removeLayer(this.drawingLayer);\n    map.pm.removeControls();\n  }\n\n  /** Adds drawing control and drawing layer to the map. */\n  addDrawingControl(map: L.Map) {\n    map.addLayer(this.drawingLayer);\n    map.pm.addControls(GEOMAN_DRAW_OPTIONS);\n  }\n\n  /** Clears all drawings and cloned drawings. */\n  clearAllDrawings() {\n    this.drawingLayer.clearLayers();\n    this.maps.forEach((currMap) => {\n      currMap.clonedDrawingRef!.clearLayers();\n      currMap.drawnPolygonLookup = {};\n    });\n    this.polygonsCreated$.next(false);\n  }\n\n  checkIfDrawingInRegion(boundaries: GeoJSON.FeatureCollection) {\n    const drawnGeoJson = this.drawingLayer.toGeoJSON() as FeatureCollection;\n    return checkIfAreaInBoundaries(drawnGeoJson, boundaries.features[0]);\n  }\n\n  /**\n   * Converts drawingLayer to GeoJSON. If there are multiple polygons drawn,\n   * creates and returns MultiPolygon type GeoJSON. Otherwise, returns a Polygon\n   * type GeoJSON.\n   */\n  convertToPlanningArea(): GeoJSON.GeoJSON {\n    const drawnGeoJson = this.drawingLayer.toGeoJSON() as FeatureCollection;\n    // Case: Single polygon\n    if (drawnGeoJson.features.length <= 1) return drawnGeoJson;\n\n    // Case: Multipolygon\n    return createMultiPolygonFeatureCollection(drawnGeoJson);\n  }\n\n  /** Enables the polygon drawing tool on a map. */\n  enablePolygonDrawingTool(map: L.Map) {\n    this.addDrawingControl(map);\n    map.pm.enableDraw('Polygon');\n  }\n\n  /** Disables the polygon drawing tool on a map. */\n  disablePolygonDrawingTool(map: L.Map) {\n    map.pm.disableDraw();\n  }\n\n  /** Sync pan, zoom, etc. between all maps visible onscreen. */\n  syncVisibleMaps(isMapVisible: (index: number) => boolean) {\n    this.maps.forEach((mapA, indexA) => {\n      this.maps.forEach((mapB, indexB) => {\n        if (mapA !== mapB && isMapVisible(indexA) && isMapVisible(indexB)) {\n          (mapA.instance as any).sync(mapB.instance);\n        } else {\n          (mapA.instance as any).unsync(mapB.instance);\n        }\n      });\n    });\n  }\n\n  /** Toggles which boundary layer is shown. */\n  toggleBoundaryLayer(\n    map: Map,\n    getBoundaryLayerVectorCallback: (vectorName: string) => Observable<L.Layer>\n  ) {\n    if (map.instance === undefined) return;\n\n    map.boundaryLayerRef?.remove();\n\n    const boundaryLayerName = map.config.boundaryLayerConfig.boundary_name;\n    const boundaryVectorName = map.config.boundaryLayerConfig.vector_name;\n    const boundaryShapeName = map.config.boundaryLayerConfig.shape_name;\n\n    if (boundaryLayerName !== '') {\n      getBoundaryLayerVectorCallback(boundaryVectorName)\n        .pipe(take(1))\n        .subscribe((vector) => {\n          map.boundaryLayerRef = this.boundaryLayer(\n            vector,\n            boundaryShapeName,\n            map.instance!\n          );\n          map.boundaryLayerRef.addTo(map.instance!);\n        });\n    }\n  }\n\n  private boundaryLayer(\n    boundary: L.Layer,\n    shapeName: string,\n    map: L.Map\n  ): L.Layer {\n    return boundary\n      .on('mouseover', function (e) {\n        var featureName = e.propagatedFrom.properties[shapeName];\n        if (featureName == '') {\n          featureName = 'UNKNOWN';\n        }\n        const pops = L.tooltip()\n          .setContent(`<div>Name: ${featureName}</div>`)\n          .setLatLng(e.latlng)\n          .openOn(map);\n        e.propagatedFrom.bindTooltip(pops);\n        (boundary as unknown as typeof L.vectorGrid).setFeatureStyle(\n          e.propagatedFrom.properties.OBJECTID,\n          BOUNDARY_LAYER_HOVER_STYLES\n        );\n      })\n      .on('mouseout', function (e) {\n        (boundary as unknown as typeof L.vectorGrid).setFeatureStyle(\n          e.propagatedFrom.properties.OBJECTID,\n          BOUNDARY_LAYER_NORMAL_STYLES\n        );\n      });\n  }\n\n  /** Toggles whether existing projects layer is shown */\n  toggleExistingProjectsLayer(map: Map) {\n    if (map.instance === undefined) return;\n\n    if (map.config.showExistingProjectsLayer) {\n      map.existingProjectsLayerRef?.addTo(map.instance);\n    } else {\n      map.existingProjectsLayerRef?.remove();\n    }\n  }\n\n  /** Changes which condition scores layer (if any) is shown. */\n  changeConditionsLayer(map: Map) {\n    if (map.instance === undefined) return;\n\n    map.dataLayerRef?.remove();\n\n    let layer = map.config.dataLayerConfig.layer;\n    if (layer?.length === 0 || !layer) return;\n\n    let colormap = map.config.dataLayerConfig.colormap;\n    if (colormap?.length === 0 || !colormap) {\n      colormap = DEFAULT_COLORMAP;\n    }\n\n    var region = map.config.dataLayerConfig.region_geoserver_name;\n    if (region == null) {\n      region = 'sierra-nevada';\n    }\n\n    map.dataLayerRef = L.tileLayer.wms(\n      BackendConstants.TILES_END_POINT + region + '/wms?',\n      {\n        layers: region + layer,\n        minZoom: 7,\n        maxZoom: 13,\n        format: 'image/png',\n        transparent: true,\n        opacity:\n          map.config.dataLayerConfig.opacity !== undefined\n            ? map.config.dataLayerConfig.opacity\n            : this.defaultOpacity,\n      }\n    );\n\n    map.dataLayerRef.addTo(map.instance);\n\n    // Map legend request\n    var dataUnit = map.config.dataLayerConfig.data_units;\n    const legendUrl = BackendConstants.TILES_END_POINT + 'wms';\n    let queryParams = new HttpParams();\n    queryParams = queryParams.append('request', 'GetLegendGraphic');\n    queryParams = queryParams.append('layer', region + layer);\n    queryParams = queryParams.append('format', 'application/json');\n    var legendJson = this.http.get<string>(legendUrl, { params: queryParams });\n    legendJson.pipe(take(1)).subscribe((value: any) => {\n      var colorMap =\n        value['Legend'][0]['rules'][0]['symbolizers'][0]['Raster']['colormap'];\n      createAndAddLegend(colorMap, dataUnit, map);\n    });\n  }\n\n  /** Change the opacity of a map's data layer. */\n  changeOpacity(map: Map) {\n    map.dataLayerRef?.setOpacity(map.config.dataLayerConfig.opacity!);\n  }\n\n  loadExistingProjectsLayer() {\n    return esri.featureLayer({\n      url: 'https://services1.arcgis.com/jUJYIo9tSA7EHvfZ/ArcGIS/rest/services/CMDash_v3_view/FeatureServer/2',\n      simplifyFactor: 0.5,\n      precision: 4,\n      where: \"PROJECT_STATUS='Active'\",\n      style: (feature) => {\n        return {\n          color: '#404040',\n          fillColor: '#303030',\n        };\n      },\n      onEachFeature: (feature: Feature<Geometry, any>, layer: L.Layer) => {\n        layer.bindTooltip(\n          this.popupService.makeDetailsPopup(feature.properties.PROJECT_NAME),\n          {\n            sticky: true,\n          }\n        );\n        // Exact type of layer (polygon or line) is not known\n        if ((layer as any).setStyle) {\n          layer.addEventListener('mouseover', (_) =>\n            (layer as L.Polygon).setStyle(HOVER_STYLES)\n          );\n          layer.addEventListener('mouseout', (_) =>\n            (layer as L.Polygon).setStyle(NORMAL_STYLES)\n          );\n        }\n      },\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maps",
                        "type": "Map[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mapViewOptions$",
                        "type": "BehaviorSubject<MapViewOptions>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "popupService",
                        "type": "PopupService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "session",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "maps",
                        "type": "Map[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapViewOptions$",
                        "type": "BehaviorSubject<MapViewOptions>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "popupService",
                        "type": "PopupService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "session",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "defaultOpacity",
                    "defaultValue": "FrontendConstants.MAP_DATA_LAYER_OPACITY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "drawingLayer",
                    "defaultValue": "new L.FeatureGroup()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "isInDrawingMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "polygonsCreated$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "selectedRegion$",
                    "defaultValue": "new BehaviorSubject<Region | null>(Region.SIERRA_NEVADA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "description": "<p>Helper class to manage initialization and modification of Leaflet maps.\nAll logic that touches Leaflet layers or objects should live here instead\nof in map.component.ts.</p>\n",
            "rawdescription": "\n\nHelper class to manage initialization and modification of Leaflet maps.\nAll logic that touches Leaflet layers or objects should live here instead\nof in map.component.ts.\n",
            "methods": [
                {
                    "name": "addClonedPolygons",
                    "args": [
                        {
                            "name": "layer",
                            "type": "L.Layer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGiven the original polygon, adds the cloned polygons to the cloned drawing\nlayer on all maps.\n",
                    "description": "<p>Given the original polygon, adds the cloned polygons to the cloned drawing\nlayer on all maps.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "layer",
                            "type": "L.Layer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addDrawingControl",
                    "args": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 407,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdds drawing control and drawing layer to the map.",
                    "description": "<p>Adds drawing control and drawing layer to the map.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addGeoJsonToDrawing",
                    "args": [
                        {
                            "name": "area",
                            "type": "GeoJSON.GeoJSON",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds a GeoJSON to the drawing layer.\n",
                    "description": "<p>Adds a GeoJSON to the drawing layer.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5273,
                                "end": 5277,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "area"
                            },
                            "type": "GeoJSON.GeoJSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5267,
                                "end": 5272,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The geoJSON.GeoJSON of the area to add to the drawing layer.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5352,
                                "end": 5355,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "map"
                            },
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5346,
                                "end": 5351,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The map</p>\n"
                        }
                    ]
                },
                {
                    "name": "boundaryLayer",
                    "args": [
                        {
                            "name": "boundary",
                            "type": "L.Layer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shapeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "L.Layer",
                    "typeParameters": [],
                    "line": 492,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "boundary",
                            "type": "L.Layer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shapeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeConditionsLayer",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 533,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nChanges which condition scores layer (if any) is shown.",
                    "description": "<p>Changes which condition scores layer (if any) is shown.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeOpacity",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 584,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nChange the opacity of a map's data layer.",
                    "description": "<p>Change the opacity of a map&#39;s data layer.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkIfDrawingInRegion",
                    "args": [
                        {
                            "name": "boundaries",
                            "type": "GeoJSON.FeatureCollection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 422,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boundaries",
                            "type": "GeoJSON.FeatureCollection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearAllDrawings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nClears all drawings and cloned drawings.",
                    "description": "<p>Clears all drawings and cloned drawings.</p>\n"
                },
                {
                    "name": "convertToPlanningArea",
                    "args": [],
                    "optional": false,
                    "returnType": "GeoJSON.GeoJSON",
                    "typeParameters": [],
                    "line": 432,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConverts drawingLayer to GeoJSON. If there are multiple polygons drawn,\ncreates and returns MultiPolygon type GeoJSON. Otherwise, returns a Polygon\ntype GeoJSON.\n",
                    "description": "<p>Converts drawingLayer to GeoJSON. If there are multiple polygons drawn,\ncreates and returns MultiPolygon type GeoJSON. Otherwise, returns a Polygon\ntype GeoJSON.</p>\n"
                },
                {
                    "name": "disablePolygonDrawingTool",
                    "args": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 448,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisables the polygon drawing tool on a map.",
                    "description": "<p>Disables the polygon drawing tool on a map.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editHandler",
                    "args": [
                        {
                            "name": "layer",
                            "type": "L.Layer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandles a polygon edit event.",
                    "description": "<p>Handles a polygon edit event.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "layer",
                            "type": "L.Layer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enablePolygonDrawingTool",
                    "args": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 442,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEnables the polygon drawing tool on a map.",
                    "description": "<p>Enables the polygon drawing tool on a map.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideClonedDrawing",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 396,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRemoves the cloned drawing layer from the map.",
                    "description": "<p>Removes the cloned drawing layer from the map.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initLeafletMap",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mapId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "createDetailCardCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "features",
                                    "type": "Feature<Geometry, any>[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "onInitialized",
                                    "type": "function",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "function": []
                                }
                            ]
                        },
                        {
                            "name": "getBoundaryLayerVectorCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "vectorName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInitializes the map with controls and the layer options specified in its config.",
                    "description": "<p>Initializes the map with controls and the layer options specified in its config.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mapId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "createDetailCardCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "features",
                                    "type": "Feature<Geometry, any>[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "onInitialized",
                                    "type": "function",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "function": []
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "getBoundaryLayerVectorCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "vectorName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadExistingProjectsLayer",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 588,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeClonedPolygons",
                    "args": [
                        {
                            "name": "layer",
                            "type": "L.Layer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "deleteOriginal",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGiven the original polygon, removes the cloned polygons from the cloned drawing\nlayer on all maps. Optionally deletes the original polygon key.\n",
                    "description": "<p>Given the original polygon, removes the cloned polygons from the cloned drawing\nlayer on all maps. Optionally deletes the original polygon key.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "layer",
                            "type": "L.Layer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deleteOriginal",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeDrawingControl",
                    "args": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 401,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRemoves drawing control and layer from the map.",
                    "description": "<p>Removes drawing control and layer from the map.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUpClickHandler",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "createDetailCardCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "features",
                                    "type": "Feature<Geometry, any>[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "onInitialized",
                                    "type": "function",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "function": []
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "createDetailCardCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "features",
                                    "type": "Feature<Geometry, any>[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "onInitialized",
                                    "type": "function",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "function": []
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUpDrawingHandlers",
                    "args": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUpEventHandlers",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "createDetailCardCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "features",
                                    "type": "Feature<Geometry, any>[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "onInitialized",
                                    "type": "function",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "function": []
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "createDetailCardCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "features",
                                    "type": "Feature<Geometry, any>[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "onInitialized",
                                    "type": "function",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "function": []
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUpPanHandler",
                    "args": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 358,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUpZoomHandler",
                    "args": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 378,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showClonedDrawing",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 391,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdds the cloned drawing layer to the map.",
                    "description": "<p>Adds the cloned drawing layer to the map.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showDrawingError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "syncVisibleMaps",
                    "args": [
                        {
                            "name": "isMapVisible",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "index",
                                    "type": "number",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 453,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSync pan, zoom, etc. between all maps visible onscreen.",
                    "description": "<p>Sync pan, zoom, etc. between all maps visible onscreen.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isMapVisible",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "index",
                                    "type": "number",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleBoundaryLayer",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "getBoundaryLayerVectorCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "vectorName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 466,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles which boundary layer is shown.",
                    "description": "<p>Toggles which boundary layer is shown.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "getBoundaryLayerVectorCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "vectorName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleExistingProjectsLayer",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 522,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles whether existing projects layer is shown",
                    "description": "<p>Toggles whether existing projects layer is shown</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NotEnoughBudgetStateMatcher",
            "id": "class-NotEnoughBudgetStateMatcher-ef202f69b3573e494859e113989e18fbbe8f3bae71e381584e03be7c7ed4084c9765c4f6eda4e091525aecb0c29d1739f3f1730a692b3a242f2f3cb4ca3ea8f7",
            "file": "src/app/plan/create-scenarios/constraints-panel/constraints-panel.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  FormGroupDirective,\n  NgForm,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { STAND_SIZES } from '../../plan-helpers';\nimport { EXCLUDED_AREAS } from '../../../shared/constants';\nimport { ScenarioConfig } from '../../../types';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport {\n  calculateMaxArea,\n  calculateMinArea,\n  calculateMinBudget,\n  hasEnoughBudget,\n} from '../../../validators/scenarios';\n\nconst customErrors: Record<'notEnoughBudget' | 'budgetOrAreaRequired', string> =\n  {\n    notEnoughBudget: 'notEnoughBudget',\n    budgetOrAreaRequired: 'budgetOrAreaRequired',\n  };\n\n@Component({\n  selector: 'app-constraints-panel',\n  templateUrl: './constraints-panel.component.html',\n  styleUrls: ['./constraints-panel.component.scss'],\n})\nexport class ConstraintsPanelComponent implements OnChanges {\n  constraintsForm: FormGroup = this.createForm();\n  readonly excludedAreasOptions = EXCLUDED_AREAS;\n  readonly standSizeOptions = STAND_SIZES;\n\n  @Input() showWarning = false;\n  @Input() planningAreaAcres = 0;\n\n  budgetStateMatcher = new NotEnoughBudgetStateMatcher();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // update the form when the planningAreaAcres is updated\n    if (changes['planningAreaAcres']) {\n      const maxArea = this.maxArea as FormControl;\n      maxArea.clearValidators();\n      maxArea.addValidators([\n        Validators.min(this.minMaxAreaValue),\n        Validators.max(this.maxMaxAreaValue),\n      ]);\n      // also update the totalBudgetValidator\n      this.constraintsForm.clearValidators();\n      this.constraintsForm.addValidators([\n        this.budgetOrAreaRequiredValidator,\n        this.totalBudgetedValidator(this.planningAreaAcres),\n      ]);\n      // refresh form\n      this.constraintsForm.updateValueAndValidity();\n    }\n  }\n\n  createForm() {\n    let excludedAreasChosen: { [key: string]: (boolean | Validators)[] } = {};\n    EXCLUDED_AREAS.forEach((area) => {\n      excludedAreasChosen[area.key] = [false, Validators.required];\n    });\n    this.constraintsForm = this.fb.group(\n      {\n        budgetForm: this.fb.group({\n          // Estimated cost in $ per acre\n          estimatedCost: [2470, Validators.min(0)],\n          // Max cost of treatment for entire planning area\n          // Initially disabled, estimatedCost is required as input before maxCost is enabled\n          maxCost: ['', Validators.min(0.01)],\n        }),\n        physicalConstraintForm: this.fb.group({\n          // TODO Update if needed once we have confirmation if this is the correct default %\n          // Maximum slope allowed for planning area\n          maxSlope: [, [Validators.min(0), Validators.max(100)]],\n          // Minimum distance from road allowed for planning area\n          minDistanceFromRoad: [, [Validators.min(0), Validators.max(100000)]],\n          // Maximum area to be treated in acres\n          // Using 500 as minimum for now. Ideally the minimum should be based on stand size.\n          maxArea: [\n            '',\n            [\n              Validators.min(this.minMaxAreaValue),\n              Validators.max(this.maxMaxAreaValue),\n            ],\n          ],\n          // Stand Size selection\n          standSize: ['LARGE', Validators.required],\n        }),\n        excludedAreasForm: this.fb.group(excludedAreasChosen),\n        excludeAreasByDegrees: [true],\n        excludeAreasByDistance: [true],\n        planningAreaAcres: [this.planningAreaAcres],\n      },\n      {\n        validators: [\n          this.budgetOrAreaRequiredValidator,\n          this.totalBudgetedValidator,\n        ],\n      }\n    );\n\n    return this.constraintsForm;\n  }\n\n  get minMaxAreaValue() {\n    return calculateMinArea(this.planningAreaAcres);\n  }\n\n  get maxMaxAreaValue() {\n    return calculateMaxArea(this.planningAreaAcres);\n  }\n\n  get maxArea() {\n    return this.constraintsForm?.get('physicalConstraintForm.maxArea');\n  }\n\n  get maxCost() {\n    return this.constraintsForm.get('budgetForm.maxCost');\n  }\n\n  togglMaxAreaAndMaxCost() {\n    if (this.constraintsForm!.get('budgetForm.maxCost')!.value) {\n      (\n        this.constraintsForm!.get('physicalConstraintForm') as FormGroup\n      ).controls['maxArea'].disable();\n    } else {\n      (\n        this.constraintsForm!.get('physicalConstraintForm') as FormGroup\n      ).controls['maxArea'].enable();\n    }\n    if (this.constraintsForm!.get('physicalConstraintForm.maxArea')!.value) {\n      (this.constraintsForm!.get('budgetForm') as FormGroup).controls[\n        'maxCost'\n      ].disable();\n    } else {\n      (this.constraintsForm!.get('budgetForm') as FormGroup).controls[\n        'maxCost'\n      ].enable();\n    }\n  }\n\n  getFormData(): Partial<ScenarioConfig> {\n    let scenarioConfig: ScenarioConfig = {};\n\n    const estimatedCost = this.constraintsForm.get('budgetForm.estimatedCost');\n    const maxCost = this.constraintsForm.get('budgetForm.maxCost');\n    const maxArea = this.constraintsForm.get('physicalConstraintForm.maxArea');\n    const minDistanceFromRoad = this.constraintsForm.get(\n      'physicalConstraintForm.minDistanceFromRoad'\n    );\n    const maxSlope = this.constraintsForm.get(\n      'physicalConstraintForm.maxSlope'\n    );\n\n    scenarioConfig.stand_size = this.constraintsForm.get(\n      'physicalConstraintForm.standSize'\n    )?.value;\n    scenarioConfig.excluded_areas = [];\n    EXCLUDED_AREAS.forEach((area) => {\n      if (\n        this.constraintsForm.get('excludedAreasForm.' + area.key)?.valid &&\n        this.constraintsForm.get('excludedAreasForm.' + area.key)?.value\n      ) {\n        scenarioConfig.excluded_areas?.push(area.key);\n      }\n    });\n    if (estimatedCost?.valid)\n      scenarioConfig.est_cost = parseFloat(estimatedCost.value);\n    if (maxCost?.valid) scenarioConfig.max_budget = parseFloat(maxCost.value);\n    if (maxArea?.valid) {\n      scenarioConfig.max_treatment_area_ratio = parseFloat(maxArea.value);\n    }\n    if (minDistanceFromRoad?.valid) {\n      scenarioConfig.min_distance_from_road = parseFloat(\n        minDistanceFromRoad.value\n      );\n    }\n    if (maxSlope?.valid) scenarioConfig.max_slope = parseFloat(maxSlope.value);\n\n    return scenarioConfig;\n  }\n\n  setFormData(config: ScenarioConfig) {\n    EXCLUDED_AREAS.forEach((area) => {\n      if (\n        config.excluded_areas &&\n        config.excluded_areas.indexOf(area.key) > -1\n      ) {\n        this.constraintsForm\n          .get('excludedAreasForm.' + area.key)\n          ?.setValue(true);\n      } else {\n        this.constraintsForm\n          .get('excludedAreasForm.' + area.key)\n          ?.setValue(false);\n      }\n    });\n\n    if (config.est_cost) {\n      this.constraintsForm\n        .get('budgetForm.estimatedCost')\n        ?.setValue(config.est_cost);\n    }\n    if (config.max_budget) {\n      this.constraintsForm\n        .get('budgetForm.maxCost')\n        ?.setValue(config.max_budget);\n    }\n    if (config.max_treatment_area_ratio) {\n      this.constraintsForm\n        .get('physicalConstraintForm.maxArea')\n        ?.setValue(config.max_treatment_area_ratio);\n    }\n    if (config.min_distance_from_road) {\n      this.constraintsForm\n        .get('physicalConstraintForm.minDistanceFromRoad')\n        ?.setValue(config.min_distance_from_road);\n    }\n    if (config.max_slope) {\n      this.constraintsForm\n        .get('physicalConstraintForm.maxSlope')\n        ?.setValue(config.max_slope);\n    }\n\n    if (config.stand_size) {\n      this.constraintsForm\n        .get('physicalConstraintForm.standSize')\n        ?.setValue(config.stand_size);\n    }\n  }\n\n  /**\n   * checks that one of budget or treatment area constraints is provided.\n   * @param constraintsForm\n   * @private\n   */\n  private budgetOrAreaRequiredValidator(\n    constraintsForm: AbstractControl\n  ): ValidationErrors | null {\n    const maxCost = constraintsForm.get('budgetForm.maxCost');\n    const maxArea = constraintsForm.get('physicalConstraintForm.maxArea');\n    const valid = !!maxCost?.value || !!maxArea?.value;\n    return valid ? null : { [customErrors.budgetOrAreaRequired]: true };\n  }\n\n  /**\n   * Checks that the maxBudget is enough for the selected estimatedCost per acre\n   * @param planningAreaAcres\n   * @private\n   */\n  private totalBudgetedValidator(planningAreaAcres: number): ValidatorFn {\n    return (constraintsForm: AbstractControl): ValidationErrors | null => {\n      const maxCost = constraintsForm.get('budgetForm.maxCost')?.value;\n      const estCostPerAcre = constraintsForm.get('budgetForm.estimatedCost')\n        ?.value;\n      if (!!maxCost) {\n        const hasBudget = hasEnoughBudget(\n          planningAreaAcres,\n          estCostPerAcre,\n          maxCost\n        );\n\n        return hasBudget\n          ? null\n          : {\n              [customErrors.notEnoughBudget]: calculateMinBudget(\n                planningAreaAcres,\n                estCostPerAcre\n              ),\n            };\n      }\n      return null;\n    };\n  }\n}\n\nclass NotEnoughBudgetStateMatcher implements ErrorStateMatcher {\n  isErrorState(\n    control: FormControl | null,\n    form: FormGroupDirective | NgForm | null\n  ): boolean {\n    const hasError = form?.hasError(customErrors.notEnoughBudget);\n    return !!(control && control.touched && (control.invalid || hasError));\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "isErrorState",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ErrorStateMatcher"
            ]
        },
        {
            "name": "PasswordStateMatcher",
            "id": "class-PasswordStateMatcher-1b5f31df35e31bfd15770815d5af3ec601eae358368397c657d29a9c29b260fa5eef5524b320fa081f7e46d814956b548e1584fa3b08e74d0befc34de13141d3",
            "file": "src/app/validators/error-matchers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ErrorStateMatcher } from '@angular/material/core';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { PasswordFieldsErrors } from './passwords';\n\n/** Error when invalid control AND submitted. */\nexport class AfterTouchedOrSubmitErrorStateMatcher\n  implements ErrorStateMatcher\n{\n  isErrorState(\n    control: FormControl | null,\n    form: FormGroupDirective | NgForm | null\n  ): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.touched || isSubmitted));\n  }\n}\n\nexport class PasswordStateMatcher implements ErrorStateMatcher {\n  constructor(private errors: (keyof PasswordFieldsErrors)[]) {}\n\n  isErrorState(\n    control: FormControl | null,\n    form: FormGroupDirective | NgForm | null\n  ): boolean {\n    const isSubmitted = form && form.submitted;\n    const hasError = this.errors.some((error) => form?.hasError(error));\n    return (\n      hasError ||\n      !!(control && control.invalid && (control.touched || isSubmitted))\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "errors",
                        "type": "()[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "errors",
                        "type": "()[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "isErrorState",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ErrorStateMatcher"
            ]
        },
        {
            "name": "WindowRef",
            "id": "class-WindowRef-e0c601a0710698ae4826c7fc4822ac4b6b4eedef1469c546ec52de7e2783a8e16b17bdb885830277a22410c24dfbb31a507db7cc2b91dd3be3aad53b5f347dda",
            "file": "src/app/services/window.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\nimport {\n  ClassProvider,\n  FactoryProvider,\n  InjectionToken,\n  PLATFORM_ID,\n} from '@angular/core';\n\n/**\n * Window service\n * This service provides a way of getting the window object via a dependency injection\n * This allows to mock and provide the window object as well as applying best practices.\n *\n * How it works?\n * The main idea is to provide a token when using window instead of referencing window object directly.\n *\n * Avoid this:\n *\n * ```\n * export class YourComponent {\n *\n *   getAgent() {\n *     window.navigator.userAgent;\n *   }\n * }\n * ```\n *\n * Use this instead:\n *\n * ```\n * export class YourComponent {\n *\n *  constructor(@Inject(WINDOW) private window: Window)\n *\n *   getAgent() {\n *     this.window.navigator.userAgent;\n *   }\n * }\n * ```\n *\n *\n * There are several ways of implementing this idea, this one is taken from\n * https://brianflove.com/2018-01-11/angular-window-provider/\n *\n *\n * Testing\n *\n * You can provide a mock of the window object when declaring your test module\n *\n * await TestBed.configureTestingModule({\n *       declarations: [YourComponent],\n *       providers: [\n *         {\n *           provide: WINDOW,\n *           useValue: { YourWindowMock },\n *         },\n *       ],\n *     }).compileComponents();\n *\n *\n * And then get the window reference on your tests\n *\n * ```\n * const window = TestBed.inject(WINDOW);\n * ```\n */\n\n/* Create a new injection token for injecting the window into a component. */\nexport const WINDOW = new InjectionToken<Window>('WindowToken');\n\n/* Define abstract class for obtaining reference to the global window object. */\nexport abstract class WindowRef {\n  get nativeWindow(): Window | Object {\n    throw new Error('Not implemented.');\n  }\n}\n\n/* Define class that implements the abstract class and returns the native window object. */\nexport class BrowserWindowRef extends WindowRef {\n  constructor() {\n    super();\n  }\n\n  override get nativeWindow(): Window | Object {\n    return window;\n  }\n}\n\n/* Create a factory function that returns the native window object. */\nexport function windowFactory(\n  browserWindowRef: BrowserWindowRef,\n  platformId: Object\n): Window | Object {\n  if (isPlatformBrowser(platformId)) {\n    return browserWindowRef.nativeWindow;\n  }\n  return {};\n}\n\n/* Create an injectable provider for the WindowRef token that uses the BrowserWindowRef class. */\nconst browserWindowProvider: ClassProvider = {\n  provide: WindowRef,\n  useClass: BrowserWindowRef,\n};\n\n/* Create an injectable provider that uses the windowFactory function for returning the native window object. */\nconst windowProvider: FactoryProvider = {\n  provide: WINDOW,\n  useFactory: windowFactory,\n  deps: [WindowRef, PLATFORM_ID],\n};\n\n/* Create an array of providers. */\nexport const WINDOW_PROVIDERS = [browserWindowProvider, windowProvider];\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "accessors": {
                "nativeWindow": {
                    "name": "nativeWindow",
                    "getSignature": {
                        "name": "nativeWindow",
                        "type": "",
                        "returnType": "Window | Object",
                        "line": 73
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "FeatureFlagDirective",
            "id": "directive-FeatureFlagDirective-22157ca7cd0e66e5808c1de2fb8b647dea7cc6b6e4cc2feec288ee6ee087b9fc53e6bc714ba4e9a400a27ec8de52b441b5e0d650d96df16a34eb2b91b5927b72",
            "file": "src/app/features/feature-flag.directive.ts",
            "type": "directive",
            "description": "<p>Directive to show or hide a DOM element based on whether a feature flag is enabled.</p>\n",
            "rawdescription": "\nDirective to show or hide a DOM element based on whether a feature flag is enabled.",
            "sourceCode": "import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport { FeatureService } from './feature.service';\n\n/** Directive to show or hide a DOM element based on whether a feature flag is enabled. */\n@Directive({\n  selector: '[appFeatureFlag]',\n})\nexport class FeatureFlagDirective implements OnInit {\n  @Input() appFeatureFlag!: string;\n  // if provided as true, will hide the content when the flag is true\n  @Input() appFeatureFlagHide = false;\n\n  constructor(\n    private featureService: FeatureService,\n    private templateRef: TemplateRef<any>,\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnInit() {\n    const isEnabled = this.featureService.isFeatureEnabled(this.appFeatureFlag);\n    const shouldShow = this.appFeatureFlagHide ? !isEnabled : isEnabled;\n    if (shouldShow) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n    }\n  }\n}\n",
            "selector": "[appFeatureFlag]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "appFeatureFlag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "appFeatureFlagHide",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "featureService",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "featureService",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TypeSafeMatCellDef",
            "id": "directive-TypeSafeMatCellDef-bbab8a13bb2531528f161990fe4b770b0003a8669a98ad5f03fd3ba5cf11d832cb3de5000e256c9b047bc38175e62156cfe309281e7478651abb5b75a05b4b1a",
            "file": "src/app/shared/type-safe-mat-cell/type-safe-mat-cell-def.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CdkCellDef } from '@angular/cdk/table';\nimport { Directive, Input } from '@angular/core';\nimport {\n  MatLegacyCellDef as MatCellDef,\n  MatLegacyTableDataSource as MatTableDataSource,\n} from '@angular/material/legacy-table';\nimport { Observable } from 'rxjs';\n\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: '[matCellDef]', // same selector as MatCellDef\n  providers: [{ provide: CdkCellDef, useExisting: TypeSafeMatCellDef }],\n})\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nexport class TypeSafeMatCellDef<T> extends MatCellDef {\n  // leveraging syntactic-sugar syntax when we use *matCellDef\n  @Input()\n  matCellDefDataSource!: T[] | Observable<T[]> | MatTableDataSource<T>;\n\n  // ngTemplateContextGuard flag to help with the Language Service\n  static ngTemplateContextGuard<T>(\n    dir: TypeSafeMatCellDef<T>,\n    ctx: unknown\n  ): ctx is { $implicit: T; index: number } {\n    return true;\n  }\n}\n",
            "selector": "[matCellDef]",
            "providers": [
                {
                    "name": "{ provide: CdkCellDef, useExisting: TypeSafeMatCellDef }"
                }
            ],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "matCellDefDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "T[] | Observable<T[]> | MatTableDataSource<T>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngTemplateContextGuard",
                    "args": [
                        {
                            "name": "dir",
                            "type": "TypeSafeMatCellDef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "dir",
                            "type": "TypeSafeMatCellDef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [
                "MatCellDef"
            ]
        }
    ],
    "components": [
        {
            "name": "AboutComponent",
            "id": "component-AboutComponent-d9a653cb7946b0705edb6b6a10f1fd167658c30bf1a30f4c6d9d0f3684ae7fe13730cb4814b265ad38942887c5d8ba9e433968319a45af5384c6901faf13a5d2",
            "file": "src/app/home/about/about.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-planscape-about",
            "styleUrls": [
                "./about.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./about.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bulletPoints",
                    "defaultValue": "[\n    'Open source and free to use, for state and federal planners, as well as the public',\n    'Supports regional planning for fire resilience and ecological benefits across broader landscapes',\n    'Utilizes the latest Regional Resource Kits as the primary data source',\n    'Incorporates the best state and federal science and models',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-planscape-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss'],\n})\nexport class AboutComponent {\n  readonly bulletPoints: string[] = [\n    'Open source and free to use, for state and federal planners, as well as the public',\n    'Supports regional planning for fire resilience and ecological benefits across broader landscapes',\n    'Utilizes the latest Regional Resource Kits as the primary data source',\n    'Incorporates the best state and federal science and models',\n  ];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/colors\";\n@import \"../../../styles/mixins\";\n\n.about-container {\n  gap: 30px;\n  display: flex;\n  flex-direction: column;\n  padding: 100px 60px 80px 60px;\n}\n\nh3 {\n  color: $color-text-dark;\n  text-align: center;\n}\n\np.important {\n  @include important-paragraph();\n  color: $color-dark-gray;\n  margin: auto;\n  text-align: left;\n}\n\n.list-area {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\np.regular {\n  @include regular-paragraph();\n  color: $color-dark-gray;\n  float: left;\n  text-align: left;\n}\n\n.dot-icon {\n  float: left;\n  margin-right: 4px;\n}\n\n.data-info-box {\n  box-sizing: border-box;\n  display: flex;\n  width: 100%;\n  padding: 20px 30px 20px 30px;\n  border-radius: 8px;\n  background-color: white;\n  gap: 20px;\n}\n\np.small {\n  text-align: left;\n}\n",
                    "styleUrl": "./about.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"about-container\">\n  <h3>Planscape is a new wildfire resilience planning tool</h3>\n\n  <p class=\"important\">\n    Designed to bring the best available state & federal data and science\n    together, Planscape guides regional planners in identifying the optimal\n    landscapes to treat in order to mitigate fire risk, maximize ecological\n    benefits, and help California's landscapes adapt to climate change.\n  </p>\n\n  <div class=\"list-area\">\n    <p *ngFor=\"let bullet of bulletPoints\" class=\"regular\">\n      <img src=\"assets/svg/icons/dot-icon.svg\" class=\"dot-icon\" />\n      {{ bullet }}\n    </p>\n  </div>\n\n  <div class=\"data-info-box\">\n    <p class=\"small\">\n      The data used is based on California's Regional Resource Kits, developed\n      by the California Wildfire & Forest Resilience Task Force. You can find\n      more detailed information about these\n      <!-- eslint-disable-next-line prettier/prettier -->\n    <a href='https://wildfiretaskforce.org/regional-resource-kits-page/#kits'>here</a>.\n    </p>\n  </div>\n</div>\n"
        },
        {
            "name": "AccountPageComponent",
            "id": "component-AccountPageComponent-dcf631b9bd0652d3c6ad20fc3662212ef4752fd9807d6b63e6ca098215d6b7f6de71e1f48fc82eac113dbea8caf212d66082c368716191b5e65eb9f9ccad5e37",
            "file": "src/app/account/account-page/account-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-page",
            "styleUrls": [
                "./account-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title$",
                    "defaultValue": "this.route.firstChild?.title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-account-page',\n  templateUrl: './account-page.component.html',\n  styleUrls: ['./account-page.component.scss'],\n})\nexport class AccountPageComponent {\n  constructor(private route: ActivatedRoute) {}\n\n  title$ = this.route.firstChild?.title;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  gap: 6px;\n  height: 100%;\n  box-sizing: border-box;\n}\n\nsection {\n  width: 100%;\n  padding: 20px 40px 0;\n}\n\naside {\n  background-color: #E6E8F3;\n  background-image: url('/assets/png/waves.png');\n  background-repeat: no-repeat;\n  background-position: bottom right;\n  min-width: 242px;\n  padding: 40px 2px 0;\n}\n\nh2 {\n  padding: 20px 40px 4px 0;\n  color: #4A4A4A;\n  border-bottom: 1px solid black;\n  margin-bottom: 30px;\n}\n",
                    "styleUrl": "./account-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<aside>\n  <app-menu></app-menu>\n</aside>\n<section>\n  <h2>{{ title$ | async }}</h2>\n  <router-outlet></router-outlet>\n</section>\n"
        },
        {
            "name": "AccountValidationComponent",
            "id": "component-AccountValidationComponent-aeded7209fb32a43650a521a3b45643d9a6b2b1bbc65c828e317ee59fc9d57df6762db95080d57f0f477d59873aeb7fc135ca390bafa48f3ee770127374c67d6",
            "file": "src/app/account-validation/account-validation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-validation",
            "styleUrls": [
                "./account-validation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-validation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isValidated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkValidation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '@services';\nimport { ActivatedRoute } from '@angular/router';\nimport { take } from 'rxjs';\n\n@Component({\n  selector: 'app-account-validation',\n  templateUrl: './account-validation.component.html',\n  styleUrls: ['./account-validation.component.scss'],\n})\nexport class AccountValidationComponent implements OnInit {\n  protected isValidated = false;\n\n  constructor(\n    private authService: AuthService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    // all we care about here is the isValidated value\n    this.checkValidation();\n  }\n\n  checkValidation(): void {\n    // TODO: here, we're only handling two cases: valid or invalid token\n    // However, we could consider handling a found but expired token differenly\n    const validationToken = this.route.snapshot.paramMap.get('token');\n    this.authService\n      .validateAccount(validationToken!)\n      .pipe(take(1))\n      .subscribe((res) => {\n        this.isValidated = res;\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/colors';\n@import '../../styles/mixins';\n\n:host {\n  display: flex;\n  height: 100%;\n}\n\n.validation-result-container {\n  display: flex;\n  background-image: url('/assets/jpg/planscape-background.jpg');\n  background-repeat: no-repeat;\n  background-size: cover;\n  width: 50%;\n}\n\n.validation-result-subcontainer {\n  flex-direction: column;\n  margin: auto;\n  margin-top: 30%;\n  width: 60%;\n  max-width: 600px;\n  display: flex;\n}\n\n.validation-result-card {\n  gap: 20px;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n  padding: 40px 60px 40px 60px;\n  border: 1px;\n  border-color: $color-original-purple-50pct;\n  border-style: solid;\n  border-radius: 8px;\n  box-shadow: 0px 4px 4px 0px #00000040;\n  text-align: left;\n}\n\nh2 {\n  @include h2();\n\n  &.title {\n    color: $color-dark-gray;\n  }\n}\n\np.regular {\n  @include regular-paragraph();\n  color: $color-dark-gray;\n}\n\n.info-text-container {\n  background-color: $color-soft-purple;\n  display: flex;\n  justify-content: center;\n  width: 50%;\n  background-image: url('/assets/svg/waves-large.svg');\n  background-position: bottom right;\n  background-repeat: no-repeat;\n  background-size: 50%;\n}\n",
                    "styleUrl": "./account-validation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"validation-result-container\">\n  <div class=\"validation-result-subcontainer\">\n    <div class=\"validation-result-card\">\n      <h2 class=\"title\">Account Validation</h2>\n      <div *ngIf=\"isValidated\" class=\"valid-token\">\n        <p class=\"regular\">\n          Your email address was validated. Please\n          <a href=\"login/\">click here</a>\n          to continue.\n        </p>\n      </div>\n      <div *ngIf=\"!isValidated\" class=\"invalid-token\">\n        <p class=\"regular\">This validation token was not recognized.</p>\n      </div>\n    </div>\n  </div>\n  <app-credits-blurb></app-credits-blurb>\n</div>\n\n<div class=\"info-text-container\">\n  <app-planscape-about></app-planscape-about>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c4f08591d9b4c4a27a12192d0ff4ab72fadb4805e19100ee5a03f4b02031eb7628917e618832c57e52f199d02caf96585c2ec964d998a39d528b519c69516fb5",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sidebarOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSidebar",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { take } from 'rxjs';\nimport { AuthService } from './services';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  sidebarOpen = false;\n\n  constructor(private authService: AuthService) {}\n\n  toggleSidebar(event: Event) {\n    this.sidebarOpen = !this.sidebarOpen;\n  }\n\n  ngOnInit(): void {\n    // Refresh the user's logged in status when the app initializes.\n    this.authService.refreshLoggedInUser().pipe(take(1)).subscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'shared/_variables.scss';\n\n:host {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\napp-navigation {\n  height: calc(100% - $toolbar-height);\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Toolbar -->\n<app-top-bar (toggleEvent)=\"toggleSidebar($event)\"></app-top-bar>\n<app-navigation></app-navigation>\n"
        },
        {
            "name": "AreaDetailsComponent",
            "id": "component-AreaDetailsComponent-7304fbc54af93f78f1a667f7deb9bdb35807d8f71cb74531aa9345eb717a0b4afa784b05fd2e9e77dbb74b1243e99fcb947a6a915ba004bd7614f6d6eee8c08b",
            "file": "src/app/plan/area-details/area-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-area-details",
            "styleUrls": [
                "./area-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./area-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "plan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Plan",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Plan } from '../../types';\n\n@Component({\n  selector: 'app-area-details',\n  templateUrl: './area-details.component.html',\n  styleUrls: ['./area-details.component.scss'],\n})\nexport class AreaDetailsComponent {\n  @Input() plan!: Plan;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/colors\";\n@import \"../../../styles/mixins\";\n\n:host {\n  display: block;\n}\n\n.details {\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 16px;\n  letter-spacing: 0.3px;\n  margin-bottom: 8px;\n  padding: 16px;\n  display: flex;\n  gap: 36px;\n  color: $color-md-gray;\n\n  .number {\n    color: $color-brand-green;\n    font-size: 20px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 28px;\n  }\n}\n\n.property {\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  letter-spacing: 0.3px;\n  display: flex;\n  gap: 8px;\n  margin-bottom: 8px;\n\n  .label {\n    font-weight: 600;\n  }\n}\n\n.summary {\n  padding: 0 16px 16px 16px;\n  border-bottom: 1px solid $color-soft-gray\n}\n\n.plan-map-wrapper {\n  padding: 16px;\n}\n",
                    "styleUrl": "./area-details.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"details\">\n  <div>\n    <div class=\"number\">{{ plan.area_acres | number: '1.0-0' }}</div>\n    acres\n  </div>\n  <div>\n    <div class=\"number\">{{ plan.scenario_count }}</div>\n    {{\n      plan.scenario_count\n        ? plan.scenario_count > 1\n          ? 'scenarios'\n          : 'scenario'\n        : 'scenarios'\n    }}\n  </div>\n</div>\n<div class=\"summary\">\n  <div class=\"property\">\n    <div class=\"label\">Region</div>\n    <div>{{ plan.region_name }}</div>\n  </div>\n  <div class=\"property\">\n    <div class=\"label\">Creator</div>\n    <div>{{ plan.creator }}</div>\n  </div>\n  <div class=\"property\">\n    <div class=\"label\">Last activity</div>\n    <div>{{ plan.latest_updated | date: 'MM/dd/yyyy' }}</div>\n  </div>\n</div>\n\n<div class=\"plan-map-wrapper\">\n  <app-plan-map\n    mapHeight=\"300px\"\n    class=\"plan-map small\"\n    [plan]=\"plan\"\n    [mapId]=\"'planning-map'\"\n    [mapPadding]=\"[20, 0]\"\n    [showAttributionAndZoom]=\"false\"></app-plan-map>\n</div>\n"
        },
        {
            "name": "AreaNotesComponent",
            "id": "component-AreaNotesComponent-d82caedc098fab2fd3c4dd14bbe5f1ea5eb4ed9dc2a0fb51838e7853dab5f62ffa21ea64c68f569ab37539e97c1cc3c739e89ab2540603fcbb68193212f59f69",
            "file": "src/app/plan/area-notes/area-notes.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-area-notes",
            "styleUrls": [
                "./area-notes.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./area-notes.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "plan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "Plan",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "note",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "notes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Note[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "saving",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "addNote",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canDelete",
                    "args": [
                        {
                            "name": "note",
                            "type": "Note",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "Note",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadNotes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDeleteNoteDialog",
                    "args": [
                        {
                            "name": "note",
                            "type": "Note",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "Note",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { DeleteNoteDialogComponent } from '../delete-note-dialog/delete-note-dialog.component';\nimport { take } from 'rxjs';\nimport { Plan } from '../../types/plan.types';\nimport { Note, PlanNotesService } from '@services/plan-notes.service';\nimport { AuthService } from '@services';\nimport {\n  SNACK_NOTICE_CONFIG,\n  SNACK_ERROR_CONFIG,\n} from 'src/app/shared/constants';\n\n@Component({\n  selector: 'app-area-notes',\n  templateUrl: './area-notes.component.html',\n  styleUrls: ['./area-notes.component.scss'],\n})\nexport class AreaNotesComponent implements OnInit {\n  constructor(\n    private planNotesService: PlanNotesService,\n    private dialog: MatDialog,\n    private snackbar: MatSnackBar,\n    private authService: AuthService\n  ) {}\n\n  @Input() plan!: Plan;\n  notes: Note[] = [];\n  note = '';\n\n  ngOnInit() {\n    this.loadNotes();\n  }\n\n  loadNotes() {\n    this.planNotesService\n      .getNotes(this.plan?.id)\n      .subscribe((notes) => (this.notes = notes));\n  }\n\n  saving = false;\n\n  openDeleteNoteDialog(note: Note) {\n    const dialogRef = this.dialog.open(DeleteNoteDialogComponent, {});\n    dialogRef\n      .afterClosed()\n      .pipe(take(1))\n      .subscribe((confirmed) => {\n        if (confirmed) {\n          this.planNotesService.deleteNote(this.plan.id, note.id).subscribe({\n            next: () => {\n              this.snackbar.open(\n                `Deleted note`,\n                'Dismiss',\n                SNACK_NOTICE_CONFIG\n              );\n              this.loadNotes();\n            },\n            error: (err) => {\n              this.snackbar.open(\n                `Error: ${err.statusText}`,\n                'Dismiss',\n                SNACK_ERROR_CONFIG\n              );\n            },\n          });\n        }\n      });\n  }\n\n  addNote(event: Event) {\n    if (this.note) {\n      this.saving = true;\n      this.planNotesService\n        .addNote(this.plan.id, this.note)\n        .subscribe((note) => {\n          // add the note\n          this.notes.unshift(note);\n          // but then refresh as well.\n          this.loadNotes();\n          this.saving = false;\n          this.note = '';\n        });\n    }\n    event.preventDefault();\n  }\n\n  canDelete(note: Note) {\n    const userId = this.authService.loggedInUser$.value?.id;\n    return note.user_id === userId || this.plan.user === userId;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/colors\";\n@import \"../../../styles/mixins\";\n\n:host {\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  height: 100%;\n\n  ::ng-deep .mat-form-field-wrapper {\n    margin: 0;\n    padding: 8px;\n\n  }\n\n  ::ng-deep {\n    .mat-form-field-outline-start,\n    .mat-form-field-outline-end {\n      background-color: $color-light-gray;\n    }\n\n    .mat-form-field-infix {\n      padding-bottom: 10px;\n      border-top: 0;\n      top: -2px;\n      padding-top: 21px;\n    }\n  }\n\n  mat-spinner {\n    padding: 2px;\n    top: 2px;\n  }\n\n}\n\n.notes {\n  flex: 1;\n  overflow-y: auto;\n}\n\n.note {\n  padding: 16px;\n  color: $color-black;\n\n}\n\n.note-head {\n  @include small-input-label();\n  display: flex;\n  gap: 8px;\n  margin-bottom: 8px;\n}\n\n.date {\n  color: $color-md-gray;\n  font-weight: 400;\n}\n\n.arrow-up {\n  color: #767575;\n\n  &.active {\n    cursor: pointer;\n    color: $color-standard-blue;\n  }\n}\n\ntextarea {\n  resize: none;\n  overflow: hidden;\n}\n\n.delete-note-menu {\n  width: 100px;\n}\n\n.delete-note-button {\n\n  .delete-icon {\n    color: $color-error;\n    line-height: 20px;\n    width: 20px;\n  }\n\n  color: $color-error;\n  @include regular-paragraph()\n}\n",
                    "styleUrl": "./area-notes.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "planNotesService",
                        "type": "PlanNotesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "planNotesService",
                        "type": "PlanNotesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"notes\">\n  <div *ngFor=\"let note of notes\" class=\"note\">\n    <div class=\"note-head\">\n      <div>{{ note.user_name }}</div>\n      <div class=\"date\">{{ note.created_at | date }}</div>\n      <button\n        *ngIf=\"canDelete(note)\"\n        mat-icon-button\n        [matMenuTriggerFor]=\"menu\"\n        aria-label=\"more note options\"\n        style=\"float: right; position: absolute; right: 4px\">\n        <mat-icon>more_vert</mat-icon>\n      </button>\n      <mat-menu #menu=\"matMenu\">\n        <button\n          mat-menu-item\n          (click)=\"openDeleteNoteDialog(note)\"\n          class=\"delete-note-button\">\n          <mat-icon class=\"delete-icon\">delete_outline</mat-icon>\n          <span>Delete</span>\n        </button>\n      </mat-menu>\n    </div>\n    <div class=\"note-content\">\n      {{ note.content }}\n    </div>\n  </div>\n</div>\n<mat-form-field appearance=\"outline\">\n  <textarea\n    (keydown.enter)=\"addNote($event)\"\n    [(ngModel)]=\"note\"\n    [disabled]=\"saving\"\n    cdkTextareaAutosize\n    matInput\n    placeholder=\"add a note\">\n  </textarea>\n  <mat-spinner diameter=\"20\" matSuffix *ngIf=\"saving\"></mat-spinner>\n  <svg\n    *ngIf=\"!saving\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    class=\"arrow-up\"\n    (click)=\"addNote($event)\"\n    [ngClass]=\"{ active: !!note }\"\n    matSuffix>\n    <g clip-path=\"url(#clip0_229_19311)\">\n      <path\n        d=\"M17 3.33989C18.5083 4.21075 19.7629 5.46042 20.6398 6.96519C21.5167 8.46997 21.9854 10.1777 21.9994 11.9192C22.0135 13.6608 21.5725 15.3758 20.72 16.8946C19.8676 18.4133 18.6332 19.6831 17.1392 20.5782C15.6452 21.4733 13.9434 21.9627 12.2021 21.998C10.4608 22.0332 8.74055 21.6131 7.21155 20.7791C5.68256 19.9452 4.39787 18.7264 3.48467 17.2434C2.57146 15.7604 2.06141 14.0646 2.005 12.3239L2 11.9999L2.005 11.6759C2.061 9.94888 2.56355 8.26585 3.46364 6.79089C4.36373 5.31592 5.63065 4.09934 7.14089 3.25977C8.65113 2.42021 10.3531 1.98629 12.081 2.00033C13.8089 2.01437 15.5036 2.47589 17 3.33989ZM12.02 6.99989L11.857 7.00989L11.771 7.02589L11.629 7.07089L11.516 7.12489L11.446 7.16789L11.351 7.23889L11.293 7.29289L7.293 11.2929L7.21 11.3869C7.05459 11.5879 6.98151 11.8405 7.0056 12.0934C7.02969 12.3463 7.14916 12.5806 7.33972 12.7486C7.53029 12.9167 7.77767 13.0059 8.03162 12.9981C8.28557 12.9904 8.52704 12.8862 8.707 12.7069L11 10.4139V15.9999L11.007 16.1169C11.0371 16.37 11.1627 16.602 11.3582 16.7656C11.5536 16.9292 11.8042 17.012 12.0586 16.9971C12.313 16.9821 12.5522 16.8706 12.7272 16.6853C12.9021 16.4999 12.9997 16.2548 13 15.9999V10.4149L15.293 12.7069L15.387 12.7899C15.588 12.9453 15.8406 13.0184 16.0935 12.9943C16.3464 12.9702 16.5807 12.8507 16.7488 12.6602C16.9168 12.4696 17.006 12.2222 16.9982 11.9683C16.9905 11.7143 16.8863 11.4728 16.707 11.2929L12.707 7.29289L12.625 7.21989L12.536 7.15589L12.423 7.09389L12.342 7.05989L12.229 7.02589L12.117 7.00589L12.019 6.99989H12.02Z\"\n        fill=\"currentColor\" />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_229_19311\">\n        <rect width=\"24\" height=\"24\" fill=\"white\" />\n      </clipPath>\n    </defs>\n  </svg>\n</mat-form-field>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-5f874c4aaedc5c502f501f9d7a0126af853eafb239e8d445b69fd9a4fd28afc4ebf0735aaba7038ff141800936e73883402eaa65ca45c1bfc7ffab9b7db8067f",
            "file": "src/stories/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[sg-button]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "variant",
                    "defaultValue": "'ghost'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe variant used for the button.\n\n",
                    "description": "<p>The variant used for the button.</p>\n",
                    "line": 25,
                    "type": "ButtonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.ghost-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.negative",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.primary-button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\nexport type ButtonVariant =\n  | 'primary'\n  | 'ghost'\n  | 'text'\n  | 'negative'\n  | 'positive';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'button[sg-button]',\n  standalone: true,\n  imports: [CommonModule, MatIconModule],\n  templateUrl: './button.component.html',\n  styleUrl: './button.component.scss',\n})\nexport class ButtonComponent {\n  /**\n   * The variant used for the button.\n   *\n   */\n  @Input() variant: ButtonVariant = 'ghost';\n\n  @HostBinding('class.ghost-button')\n  get isVariantGhost() {\n    return this.variant === 'ghost';\n  }\n\n  @HostBinding('class.primary-button')\n  get isVariantPrimary() {\n    return this.variant === 'primary';\n  }\n\n  @HostBinding('class.negative')\n  get isVariantNegative() {\n    return this.variant === 'negative';\n  }\n}\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isVariantGhost": {
                    "name": "isVariantGhost",
                    "getSignature": {
                        "name": "isVariantGhost",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                },
                "isVariantPrimary": {
                    "name": "isVariantPrimary",
                    "getSignature": {
                        "name": "isVariantPrimary",
                        "type": "",
                        "returnType": "",
                        "line": 33
                    }
                },
                "isVariantNegative": {
                    "name": "isVariantNegative",
                    "getSignature": {
                        "name": "isVariantNegative",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                }
            },
            "templateData": "<mat-icon>archive</mat-icon>\n<ng-content></ng-content>\n"
        },
        {
            "name": "ChangePasswordComponent",
            "id": "component-ChangePasswordComponent-34caa5cf9652addbc26a8e930590653bd9d1aee4c75c6e9eded366d0e8e6504d1e9b91f85894f480b9165288407868c0bf65d24ac4f5ea0714a279076e923cb6",
            "file": "src/app/account/change-password/change-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-change-password",
            "styleUrls": [
                "./change-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./change-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "failed",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "saved",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "confirmPasswordStateMatcher",
                    "defaultValue": "new PasswordStateMatcher([\n    'newPasswordsMustMatch',\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "currentPasswordStateMatcher",
                    "defaultValue": "new PasswordStateMatcher([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "FormMessageType",
                    "defaultValue": "FormMessageType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "passwordStateMatcher",
                    "defaultValue": "new PasswordStateMatcher([\n    'newPasswordMustBeNew',\n    'newPasswordsMustMatch',\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "showHint",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "state",
                    "defaultValue": "'view'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "username$",
                    "defaultValue": "this.authService.loggedInUser$.pipe(\n    map((user) => user?.username)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "edit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '@services';\nimport { map, take } from 'rxjs';\nimport {\n  passwordMustBeNewValidator,\n  passwordsMustMatchValidator,\n} from '../../validators/passwords';\nimport { FormMessageType } from '../../types';\nimport { PasswordStateMatcher } from '../../validators/error-matchers';\n\ntype State = 'view' | 'editing' | 'saving';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss'],\n})\nexport class ChangePasswordComponent {\n  @Input() currentValue = '';\n\n  @Output() saved = new EventEmitter<string>();\n  @Output() failed = new EventEmitter<string>();\n  state: State = 'view';\n  form: FormGroup;\n  error: any;\n  success = false;\n  username$ = this.authService.loggedInUser$.pipe(\n    map((user) => user?.username)\n  );\n\n  currentPasswordStateMatcher = new PasswordStateMatcher([]);\n  passwordStateMatcher = new PasswordStateMatcher([\n    'newPasswordMustBeNew',\n    'newPasswordsMustMatch',\n  ]);\n  confirmPasswordStateMatcher = new PasswordStateMatcher([\n    'newPasswordsMustMatch',\n  ]);\n  showHint = false;\n\n  readonly FormMessageType = FormMessageType;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService\n  ) {\n    this.form = this.createForm();\n  }\n\n  private createForm() {\n    return this.fb.group(\n      {\n        current: this.fb.control('', [Validators.required]),\n        newPassword: this.fb.control('', [\n          Validators.required,\n          Validators.minLength(8),\n        ]),\n        passwordConfirm: this.fb.control('', [Validators.required]),\n      },\n      {\n        validators: [\n          passwordMustBeNewValidator('current', 'newPassword'),\n          passwordsMustMatchValidator('newPassword', 'passwordConfirm'),\n        ],\n      }\n    );\n  }\n\n  saveForm() {\n    if (this.form.invalid) return;\n    this.state = 'saving';\n    this.error = null;\n\n    const current = this.form.get('current');\n    const newPassword = this.form.get('newPassword');\n    const passwordConfirm = this.form.get('passwordConfirm');\n\n    this.authService\n      .changePassword(\n        current?.value,\n        newPassword?.value,\n        passwordConfirm?.value\n      )\n      .pipe(take(1))\n      .subscribe(\n        (_) => {\n          this.error = null;\n          this.success = true;\n          this.state = 'view';\n        },\n        (err: any) => {\n          if (err.error.old_password) {\n            current?.setErrors({ invalid: true });\n          }\n          if (err.error.new_password2) {\n            newPassword?.setErrors({ invalid: true });\n            passwordConfirm?.setErrors({ invalid: true });\n          }\n          this.error = Object.values(err.error);\n          this.state = 'editing';\n        }\n      );\n  }\n\n  cancel() {\n    this.state = 'view';\n    this.resetAll();\n  }\n\n  edit() {\n    this.state = 'editing';\n    this.resetAll();\n  }\n\n  resetAll() {\n    this.error = null;\n    this.success = false;\n    this.form = this.createForm();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n\n.btn-spaced {\n  margin-left: 34px;\n}\n\nform {\n  margin-top: 30px;\n}\n\n.hidden {\n  display: none;\n}\n\napp-form-message {\n  max-width: 306px;\n  display: block;\n}\n\n",
                    "styleUrl": "./change-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-form-message\n  [messageType]=\"FormMessageType.SUCCESS\"\n  *ngIf=\"success\"\n  title=\"Success!\"\n  message=\"Password updated\">\n</app-form-message>\n<h4 class=\"form-field-title\">Password</h4>\n<app-form-message\n  [messageType]=\"FormMessageType.ERROR\"\n  *ngIf=\"error\"\n  title=\"Error!\"\n  message=\"{{ error }}\">\n</app-form-message>\n\n<form\n  [formGroup]=\"form\"\n  (ngSubmit)=\"saveForm()\"\n  *ngIf=\"state === 'editing' || state === 'saving'\">\n  <input\n    type=\"text\"\n    name=\"username\"\n    autocomplete=\"username\"\n    readonly=\"readonly\"\n    [value]=\"username$ | async\"\n    class=\"hidden\"\n    required />\n  <div class=\"form-field-label\">\n    Current Password\n    <div class=\"required-blurb\">required</div>\n  </div>\n  <mat-form-field appearance=\"outline\" class=\"form-field-input\">\n    <input\n      type=\"password\"\n      required\n      formControlName=\"current\"\n      matInput\n      autocomplete=\"current-password\"\n      [errorStateMatcher]=\"currentPasswordStateMatcher\" />\n  </mat-form-field>\n  <div class=\"form-field-label\">\n    New Password\n    <div class=\"required-blurb\">required</div>\n  </div>\n  <mat-form-field appearance=\"outline\" class=\"form-field-input\">\n    <input\n      type=\"password\"\n      required\n      name=\"new-password\"\n      formControlName=\"newPassword\"\n      matInput\n      autocomplete=\"new-password\"\n      (focus)=\"showHint = true\"\n      (blur)=\"showHint = false\"\n      [errorStateMatcher]=\"passwordStateMatcher\" />\n  </mat-form-field>\n  <app-field-alert\n    [messageType]=\"FormMessageType.ALERT\"\n    *ngIf=\"showHint && !form.get('newPassword')?.value\"\n    title=\"Password requirements\"\n    message=\"It needs to be at least 10-characters long and not previously used in other accounts\">\n  </app-field-alert>\n  <app-field-alert\n    [messageType]=\"FormMessageType.ERROR\"\n    *ngIf=\"\n      (!showHint && form.get('newPassword')?.errors?.['minlength']) ||\n      form.errors?.['newPasswordMustBeNew']\n    \"\n    title=\"Password Error\"\n    message=\"It needs to be at least 8-characters long and different from your current password\"></app-field-alert>\n  <div class=\"form-field-label\">\n    Confirm Password\n    <div class=\"required-blurb\">required</div>\n  </div>\n  <mat-form-field appearance=\"outline\" class=\"form-field-input\">\n    <input\n      type=\"password\"\n      name=\"confirm-password\"\n      required\n      formControlName=\"passwordConfirm\"\n      matInput\n      autocomplete=\"new-password\"\n      [errorStateMatcher]=\"confirmPasswordStateMatcher\" />\n  </mat-form-field>\n  <app-form-message\n    [messageType]=\"FormMessageType.ERROR\"\n    *ngIf=\"form.errors?.['newPasswordsMustMatch']\"\n    title=\"Password Error\"\n    message=\"Both entries need to match\"></app-form-message>\n  <div>\n    <button\n      mat-flat-button\n      color=\"primary\"\n      [disabled]=\"state === 'saving' || form.invalid\">\n      SAVE\n    </button>\n    <button\n      type=\"button\"\n      mat-stroked-button\n      color=\"secondary\"\n      (click)=\"cancel()\"\n      class=\"btn-spaced\">\n      Cancel\n    </button>\n  </div>\n</form>\n\n<div *ngIf=\"state === 'view'\">\n  <p class=\"form-field-p\">Change Password</p>\n  <button mat-flat-button color=\"primary\" (click)=\"edit()\">CHANGE</button>\n</div>\n"
        },
        {
            "name": "ChipInputComponent",
            "id": "component-ChipInputComponent-dae0f2fbc70cce02432eb26e6bc17269b0d4d2a2970fbb762cd3a36a1fc2ad5c6f3759b6fc35a1b5ec171d5db20c0fa1e9cda68189fe89d45d77343b1d1d11cc",
            "file": "src/app/home/chip-input/chip-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chip-input",
            "styleUrls": [
                "./chip-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chip-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "emails",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addEmail",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "isInvalid",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeEmail",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addIfValid",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatChipInputEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatChipInputEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatLegacyChipInputEvent as MatChipInputEvent } from '@angular/material/legacy-chips';\nimport { EMAIL_VALIDATION_REGEX } from '../../shared/constants';\n\n@Component({\n  selector: 'app-chip-input',\n  templateUrl: './chip-input.component.html',\n  styleUrls: ['./chip-input.component.scss'],\n})\nexport class ChipInputComponent {\n  @Input() emails: string[] = [];\n  @Input() placeholder = '';\n\n  @Output() addEmail = new EventEmitter<string>();\n  @Output() removeEmail = new EventEmitter<string>();\n  @Output() isInvalid = new EventEmitter<boolean>();\n\n  addIfValid(event: MatChipInputEvent): void {\n    this.isInvalid.emit(false);\n    const value = (event.value || '').trim();\n    if (!value) {\n      return;\n    }\n\n    if (value.match(EMAIL_VALIDATION_REGEX)) {\n      this.addEmail.emit(value);\n    } else {\n      this.isInvalid.emit(true);\n      return;\n    }\n\n    // Clear the input value\n    event.chipInput!.clear();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/mixins\";\n@import \"../../../styles/colors\";\n\n:host {\n  display: block;\n  // material overrides\n  ::ng-deep {\n\n    mat-form-field {\n      display: block;\n    }\n    .mat-chip-list-wrapper {\n      margin: 0;\n      gap: 4px;\n      .mat-input-element {\n        padding: 3px 0;\n        line-height: 28px;\n        margin: 0;\n      }\n    }\n\n    .mat-form-field-appearance-outline .mat-form-field-outline  {\n      top:0;\n    }\n\n    .mat-chip {\n      @include small-input-label();\n      color: $color-dark-gray;\n    }\n\n    .mat-form-field-infix {\n      border-top-width: 4px;\n      padding: 0;\n    }\n    .mat-select-arrow-wrapper{\n      transform: none;\n    }\n\n\n    mat-chip.mat-standard-chip {\n      background-color: white;\n      border: 1px solid $color-dark-gray;\n      margin: 0;\n      padding: 4px 8px;\n      min-height: 30px;\n\n      .mat-chip-remove {\n        opacity: 0.9;\n      }\n    }\n\n    &.mat-form-field-appearance-outline  {\n      .mat-form-field-wrapper {\n        padding: 0;\n        margin: 0;\n      }\n      .mat-form-field-flex {\n        padding: 3px 8px;\n        margin-top: 0;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./chip-input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-form-field appearance=\"outline\">\n  <mat-chip-list #chipList aria-label=\"Emails\">\n    <mat-chip *ngFor=\"let email of emails\" (removed)=\"removeEmail.emit(email)\">\n      {{ email }}\n      <button matChipRemove>\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-chip>\n    <input\n      cdkFocusInitial\n      type=\"email\"\n      matInput\n      [placeholder]=\"placeholder\"\n      [matChipInputFor]=\"chipList\"\n      [matChipInputAddOnBlur]=\"true\"\n      (matChipInputTokenEnd)=\"addIfValid($event)\" />\n  </mat-chip-list>\n</mat-form-field>\n"
        },
        {
            "name": "ConditionTreeComponent",
            "id": "component-ConditionTreeComponent-047322082b7fee417a27bc8adbcf4414a76f5f96ce2fa571cfc250682ec9dd7960aa4d868533c220ea4b2174d412f11a315cf2ebbc2ce753301b9768b8bd7ad8",
            "file": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-condition-tree",
            "styleUrls": [
                "./condition-tree.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./condition-tree.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "conditionsConfig$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "Observable<ConditionsConfig | null>",
                    "decorators": []
                },
                {
                    "name": "dataType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "ConditionTreeType",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "Map",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeConditionLayer",
                    "defaultValue": "new EventEmitter<Map>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_transformer",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "conditionDataSource",
                    "defaultValue": "new MatTreeFlatDataSource(\n    this.treeControl,\n    this.treeFlattener\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "hasChild",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Used to compute whether a node in the condition layer tree has children.</p>\n",
                    "line": 117,
                    "rawdescription": "\nUsed to compute whether a node in the condition layer tree has children."
                },
                {
                    "name": "treeControl",
                    "defaultValue": "new FlatTreeControl<ConditionFlatNode>(\n    (node) => node!.level,\n    (node) => node!.expandable\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "treeFlattener",
                    "defaultValue": "new MatTreeFlattener(\n    this._transformer,\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "methodsClass": [
                {
                    "name": "conditionsConfigToDataFuture",
                    "args": [
                        {
                            "name": "config",
                            "type": "ConditionsConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ConditionsNode[]",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFuture configs are selectable and viewable only at the pillar level.\n",
                    "description": "<p>Future configs are selectable and viewable only at the pillar level.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ConditionsConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "conditionsConfigToDataNormalized",
                    "args": [
                        {
                            "name": "config",
                            "type": "ConditionsConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ConditionsNode[]",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nNormalized configs are selectable at every level (pillar, element, metric).\n",
                    "description": "<p>Normalized configs are selectable at every level (pillar, element, metric).</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ConditionsConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "conditionsConfigToDataRaw",
                    "args": [
                        {
                            "name": "config",
                            "type": "ConditionsConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ConditionsNode[]",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRaw data is selectable only at the metric level.\n",
                    "description": "<p>Raw data is selectable only at the metric level.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ConditionsConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "expandAncestors",
                    "args": [
                        {
                            "name": "node",
                            "type": "ConditionFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFind and expand all the ancestors of a given node in the tree recursively.",
                    "description": "<p>Find and expand all the ancestors of a given node in the tree recursively.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "ConditionFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAndRevealNode",
                    "args": [
                        {
                            "name": "config",
                            "type": "DataLayerConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ConditionsNode",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFind the node matching the given config in the condition tree (if any), and expand its ancestors\n so it becomes visible.\n",
                    "description": "<p>Find the node matching the given config in the condition tree (if any), and expand its ancestors\n so it becomes visible.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "DataLayerConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "node",
                            "type": "ConditionFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "ConditionFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "styleAncestorsSelected",
                    "args": [
                        {
                            "name": "node",
                            "type": "ConditionFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFind and style all the ancestors of a given node in the tree recursively.",
                    "description": "<p>Find and style all the ancestors of a given node in the tree recursively.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "ConditionFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "styleDescendantsDisabled",
                    "args": [
                        {
                            "name": "node",
                            "type": "ConditionFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nVisually indicates that all the descendants of a condition layer node are\n included in the current analysis by setting their style.\n",
                    "description": "<p>Visually indicates that all the descendants of a condition layer node are\n included in the current analysis by setting their style.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "ConditionFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unstyleAndDeselectAllNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUnstyles and deselects all nodes.",
                    "description": "<p>Unstyles and deselects all nodes.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FlatTreeControl } from '@angular/cdk/tree';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n} from '@angular/material/tree';\nimport { filter, Observable, map } from 'rxjs';\nimport {\n  DataLayerConfig,\n  Map,\n  NONE_DATA_LAYER_CONFIG,\n  ConditionsConfig,\n  ConditionTreeType,\n} from 'src/app/types';\nimport { BackendConstants } from './../../../backend-constants';\n\nexport interface ConditionsNode extends DataLayerConfig {\n  children?: ConditionsNode[];\n  disableSelect?: boolean; // Node should not include a radio button\n  disableInfoCard?: boolean; // Node should not have an info button\n}\n\n/** Map Legend Display Strings */\nconst CURRENT_CONDITIONS_RAW_LEGEND = 'Current Condition (Raw)';\nconst CURRENT_CONDITIONS_NORMALIZED_LEGEND = 'Current Condition (Normalized)';\nconst FUTURE_CONDITIONS_LEGEND = 'Future Climate Stability (Normalized)';\n\ninterface ConditionFlatNode {\n  expandable: boolean;\n  level: number;\n  condition: ConditionsNode;\n  infoMenuOpen?: boolean;\n  styleDisabled?: boolean; // Node should be greyed out but still selectable\n  styleDescendantSelected?: boolean; // Node should have a dot indicator\n}\n\n@Component({\n  selector: 'app-condition-tree',\n  templateUrl: './condition-tree.component.html',\n  styleUrls: ['./condition-tree.component.scss'],\n})\nexport class ConditionTreeComponent implements OnInit {\n  @Input() conditionsConfig$!: Observable<ConditionsConfig | null>;\n  @Input() header: string = '';\n  @Input() dataType!: ConditionTreeType;\n  @Input() map!: Map;\n\n  @Output() changeConditionLayer = new EventEmitter<Map>();\n\n  private _transformer = (node: ConditionsNode, level: number) => {\n    return {\n      expandable: !!node!.children && node!.children.length > 0,\n      level: level,\n      condition: node,\n    };\n  };\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children\n  );\n\n  treeControl = new FlatTreeControl<ConditionFlatNode>(\n    (node) => node!.level,\n    (node) => node!.expandable\n  );\n  conditionDataSource = new MatTreeFlatDataSource(\n    this.treeControl,\n    this.treeFlattener\n  );\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.dataType == ConditionTreeType.RAW) {\n      this.conditionsConfig$\n        .pipe(\n          filter((config) => !!config),\n          map((config) => this.conditionsConfigToDataRaw(config!))\n        )\n        .subscribe((data) => {\n          this.conditionDataSource.data = data;\n          this.map.config.dataLayerConfig = this.findAndRevealNode(\n            this.map.config.dataLayerConfig\n          );\n        });\n    } else if (this.dataType == ConditionTreeType.TRANSLATED) {\n      this.conditionsConfig$\n        .pipe(\n          filter((config) => !!config),\n          map((config) => this.conditionsConfigToDataNormalized(config!))\n        )\n        .subscribe((data) => {\n          this.conditionDataSource.data = data;\n          this.map.config.dataLayerConfig = this.findAndRevealNode(\n            this.map.config.dataLayerConfig\n          );\n        });\n    } else if (this.dataType == ConditionTreeType.FUTURE) {\n      this.conditionsConfig$\n        .pipe(\n          filter((config) => !!config),\n          map((config) => this.conditionsConfigToDataFuture(config!))\n        )\n        .subscribe((data) => {\n          this.conditionDataSource.data = data;\n          this.map.config.dataLayerConfig = this.findAndRevealNode(\n            this.map.config.dataLayerConfig\n          );\n        });\n    }\n  }\n\n  /** Used to compute whether a node in the condition layer tree has children. */\n  hasChild = (_: number, node: ConditionFlatNode) => node.expandable;\n\n  onSelect(node: ConditionFlatNode): void {\n    this.unstyleAndDeselectAllNodes();\n    this.styleDescendantsDisabled(node);\n    this.styleAncestorsSelected(node);\n  }\n\n  /** Unstyles and deselects all nodes. */\n  unstyleAndDeselectAllNodes(): void {\n    this.treeControl.dataNodes.forEach((dataNode) => {\n      dataNode.styleDisabled = false;\n      dataNode.styleDescendantSelected = false;\n    });\n  }\n\n  /** Visually indicates that all the descendants of a condition layer node are\n   *  included in the current analysis by setting their style.\n   */\n  private styleDescendantsDisabled(node: ConditionFlatNode): void {\n    this.treeControl.getDescendants(node).forEach((descendant) => {\n      descendant.styleDisabled = true;\n    });\n  }\n\n  /** Find and style all the ancestors of a given node in the tree recursively. */\n  private styleAncestorsSelected(node: ConditionFlatNode): void {\n    const nodeLevel = node.level;\n    const nodeIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n    // Iterate over nodes in reverse order starting from the node preceding\n    // the given node.\n    for (let index = nodeIndex; index >= 0; index--) {\n      const currentNode = this.treeControl.dataNodes[index];\n      if (currentNode.level < nodeLevel) {\n        currentNode.styleDescendantSelected = true;\n        this.styleAncestorsSelected(currentNode);\n        break;\n      }\n    }\n  }\n\n  /** Find the node matching the given config in the condition tree (if any), and expand its ancestors\n   *  so it becomes visible.\n   */\n  private findAndRevealNode(config: DataLayerConfig): ConditionsNode {\n    if (!config.layer || config.layer === NONE_DATA_LAYER_CONFIG.layer)\n      return NONE_DATA_LAYER_CONFIG;\n    for (let node of this.treeControl.dataNodes) {\n      var node_layer = '';\n      if (node.condition.region_geoserver_name) {\n        node_layer =\n          node.condition.region_geoserver_name + node.condition.layer;\n      }\n      if (node_layer === node.condition.region_geoserver_name + config.layer) {\n        this.expandAncestors(node);\n        this.onSelect(node);\n        return node.condition;\n      }\n    }\n    return config;\n  }\n\n  /** Find and expand all the ancestors of a given node in the tree recursively. */\n  private expandAncestors(node: ConditionFlatNode): void {\n    const nodeLevel = node.level;\n    const nodeIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n    // Iterate over nodes in reverse order starting from the node preceding\n    // the given node.\n    for (let index = nodeIndex; index >= 0; index--) {\n      const currentNode = this.treeControl.dataNodes[index];\n      if (currentNode.level < nodeLevel) {\n        this.treeControl.expand(currentNode);\n        this.expandAncestors(currentNode);\n        break;\n      }\n    }\n  }\n\n  /** Raw data is selectable only at the metric level.\n   */\n  private conditionsConfigToDataRaw(\n    config: ConditionsConfig\n  ): ConditionsNode[] {\n    return config.pillars\n      ? config.pillars\n          ?.filter((pillar) => pillar.display)\n          .map((pillar): ConditionsNode => {\n            return {\n              ...pillar,\n              disableSelect: true,\n              disableInfoCard: true,\n              legend_name: CURRENT_CONDITIONS_RAW_LEGEND,\n              normalized: false,\n              children: pillar.elements\n                ?.filter((element) => element.display)\n                .map((element): ConditionsNode => {\n                  return {\n                    ...element,\n                    disableSelect: true,\n                    disableInfoCard: true,\n                    legend_name: CURRENT_CONDITIONS_RAW_LEGEND,\n                    normalized: false,\n                    children: element.metrics?.map((metric): ConditionsNode => {\n                      return {\n                        ...metric,\n                        layer: metric.raw_layer,\n                        region_geoserver_name: config.region_geoserver_name,\n                        legend_name: CURRENT_CONDITIONS_RAW_LEGEND,\n                        normalized: false,\n                        data_download_link: metric.raw_data_download_path\n                          ? BackendConstants.DOWNLOAD_END_POINT +\n                            '/' +\n                            metric.raw_data_download_path\n                          : metric.data_download_link,\n                      };\n                    }),\n                  };\n                }),\n            };\n          })\n      : [];\n  }\n\n  /** Normalized configs are selectable at every level (pillar, element, metric).\n   */\n  private conditionsConfigToDataNormalized(\n    config: ConditionsConfig\n  ): ConditionsNode[] {\n    return config.pillars\n      ? config.pillars\n          ?.filter((pillar) => pillar.display)\n          .map((pillar): ConditionsNode => {\n            return {\n              ...pillar,\n              layer: pillar.normalized_layer,\n              region_geoserver_name: config.region_geoserver_name,\n              data_download_link: pillar.normalized_data_download_path\n                ? BackendConstants.DOWNLOAD_END_POINT +\n                  '/' +\n                  pillar.normalized_data_download_path\n                : undefined,\n              legend_name: CURRENT_CONDITIONS_NORMALIZED_LEGEND,\n              normalized: true,\n              children: pillar.elements?.map((element): ConditionsNode => {\n                return {\n                  ...element,\n                  layer: element.normalized_layer,\n                  region_geoserver_name: config.region_geoserver_name,\n                  data_download_link: element.normalized_data_download_path\n                    ? BackendConstants.DOWNLOAD_END_POINT +\n                      '/' +\n                      element.normalized_data_download_path\n                    : undefined,\n                  legend_name: CURRENT_CONDITIONS_NORMALIZED_LEGEND,\n                  normalized: true,\n                  min_value: undefined,\n                  max_value: undefined,\n                  children: element.metrics?.map((metric): ConditionsNode => {\n                    return {\n                      ...metric,\n                      layer: metric.normalized_layer,\n                      region_geoserver_name: config.region_geoserver_name,\n                      data_download_link: metric.normalized_data_download_path\n                        ? BackendConstants.DOWNLOAD_END_POINT +\n                          '/' +\n                          metric.normalized_data_download_path\n                        : metric.data_download_link,\n                      legend_name: CURRENT_CONDITIONS_NORMALIZED_LEGEND,\n                      normalized: true,\n                      min_value: undefined,\n                      max_value: undefined,\n                    };\n                  }),\n                };\n              }),\n            };\n          })\n      : [];\n  }\n\n  /** Future configs are selectable and viewable only at the pillar level.\n   */\n  private conditionsConfigToDataFuture(\n    config: ConditionsConfig\n  ): ConditionsNode[] {\n    return config.pillars\n      ? config.pillars\n          ?.filter((pillar) => pillar.display)\n          .map((pillar): ConditionsNode => {\n            return {\n              ...pillar,\n              data_download_link: pillar.future_data_download_path\n                ? BackendConstants.DOWNLOAD_END_POINT +\n                  '/' +\n                  pillar.future_data_download_path\n                : pillar.data_download_link,\n              layer: pillar.future_layer,\n              region_geoserver_name: config.region_geoserver_name,\n              legend_name: FUTURE_CONDITIONS_LEGEND,\n              normalized: true,\n              children: [],\n            };\n          })\n      : [];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".layer-panel-header {\n  background-color: #d8d8d8 !important;\n  font-size: 14px;\n  font-weight: 500;\n  height: 40px !important;\n  line-height: 20px;\n}\n\n::ng-deep .mat-expansion-panel-body {\n  padding-bottom: 0px !important;\n}\n\n.condition-tree {\n  margin: 0px -24px;\n}\n\n.condition-tree-invisible {\n  display: none;\n}\n\n.condition-tree ul,\n.condition-tree li {\n  margin-top: 0;\n  margin-bottom: 0;\n  list-style-type: none;\n}\n\n/*\n * Padding for leaf nodes.\n * Leaf nodes need to have padding so as to align with other non-leaf nodes\n * under the same parent.\n */\n.condition-tree div[role='group'] > .mat-tree-node {\n  padding-left: 20px;\n}\n\nmat-tree-node {\n  box-sizing: border-box;\n  border-top: 1px solid #f5f5f5;\n  padding: 0px 8px 0px 12px;\n\n  &[aria-level='1'] {\n    background-color: #f5f5f5;\n    padding-left: 28px;\n  }\n\n  &[aria-level='2'] {\n    padding-left: 44px;\n  }\n\n  &[aria-level='3'] {\n    padding-left: 60px;\n  }\n\n  .disabled {\n    opacity: 0.5;\n  }\n\n  &.selected {\n    background-color: #3367d6;\n\n    span {\n      color: white;\n    }\n\n    mat-icon {\n      color: white;\n    }\n  }\n\n  button {\n    margin-left: auto;\n  }\n}\n\n::ng-deep\n  .mat-radio-button.mat-primary.mat-radio-checked.white\n  .mat-radio-outer-circle {\n  border-color: white !important;\n}\n\n::ng-deep\n  .mat-radio-button.mat-primary.mat-radio-checked.white\n  .mat-radio-inner-circle {\n  background-color: white !important;\n}\n\n::ng-deep\n  .mat-radio-button.mat-primary.mat-radio-checked.white\n  .mat-radio-label-content {\n  color: white !important;\n}\n\n.expandable-condition-node {\n  align-items: center;\n  display: flex;\n  cursor: pointer;\n}\n\n.condition-label {\n  white-space: normal;\n}\n\n.info-button {\n  margin-left: auto;\n  margin-right: 24px;\n}\n\n.selected-dot {\n  background-color: #3367d6;\n  border-radius: 4px;\n  height: 8px;\n  margin-right: 4px;\n  width: 8px;\n\n  &.hidden {\n    visibility: hidden;\n  }\n}\n",
                    "styleUrl": "./condition-tree.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 72
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-expansion-panel expanded=\"false\">\n  <mat-expansion-panel-header class=\"layer-panel-header\">\n    {{ header }}\n  </mat-expansion-panel-header>\n\n  <mat-radio-group\n    name=\"{{ map.id + '-conditions-select' }}\"\n    aria-label=\"Select an option\"\n    color=\"primary\"\n    [(ngModel)]=\"map.config.dataLayerConfig\"\n    (change)=\"changeConditionLayer.emit(map)\">\n    <mat-tree\n      [dataSource]=\"conditionDataSource\"\n      [treeControl]=\"treeControl\"\n      class=\"condition-tree\">\n      <!-- This is the tree node template for leaf nodes -->\n      <!-- There is inline padding applied to this node using styles.\n        This padding value depends on the mat-icon-button width. -->\n      <mat-tree-node\n        *matTreeNodeDef=\"let node\"\n        [class.selected]=\"map.config.dataLayerConfig === node.condition\">\n        <div class=\"mat-tree-node\">\n          <div\n            class=\"selected-dot\"\n            [class.hidden]=\"!node.styleDescendantSelected\"></div>\n          <div [class.disabled]=\"node.styleDisabled\">\n            <mat-radio-button\n              [value]=\"node.condition\"\n              *ngIf=\"!node.condition.disableSelect\"\n              class=\"white\"\n              (change)=\"onSelect(node)\">\n              <span class=\"condition-label\">\n                {{ node.condition.display_name }}\n              </span>\n            </mat-radio-button>\n            <span *ngIf=\"node.condition.disableSelect\">\n              {{ node.condition.display_name }}\n            </span>\n          </div>\n          <button\n            mat-icon-button\n            *ngIf=\"!node.condition.disableInfoCard\"\n            class=\"info-button\"\n            [matMenuTriggerFor]=\"popoverMenu\"\n            (menuOpened)=\"node.infoMenuOpen = true\"\n            (menuClosed)=\"node.infoMenuOpen = false\">\n            <mat-icon color=\"primary\">info_outline</mat-icon>\n          </button>\n          <mat-menu #popoverMenu=\"matMenu\">\n            <app-layer-info-card\n              [dataLayerConfig]=\"node.condition\"></app-layer-info-card>\n          </mat-menu>\n        </div>\n      </mat-tree-node>\n\n      <!-- This is the tree node template for expandable nodes -->\n      <mat-tree-node\n        *matTreeNodeDef=\"let node; when: hasChild\"\n        [class.selected]=\"map.config.dataLayerConfig === node.condition\">\n        <div\n          class=\"mat-tree-node expandable-condition-node\"\n          (click)=\"treeControl.toggle(node)\">\n          <div\n            class=\"selected-dot\"\n            [class.hidden]=\"!node.styleDescendantSelected\"></div>\n          <div [class.disabled]=\"node.styleDisabled\">\n            <mat-radio-button\n              [value]=\"node.condition\"\n              *ngIf=\"!node.condition.disableSelect\"\n              class=\"white\"\n              (change)=\"onSelect(node)\">\n              {{ node.condition.display_name }}\n            </mat-radio-button>\n            <span *ngIf=\"node.condition.disableSelect\">\n              {{ node.condition.display_name }}\n            </span>\n          </div>\n          <!-- TODO: remove disableInfoCard if it is no longer needed -->\n          <button\n            mat-icon-button\n            *ngIf=\"!node.condition.disableInfoCard\"\n            class=\"info-button\"\n            [matMenuTriggerFor]=\"popoverMenu\"\n            (menuOpened)=\"node.infoMenuOpen = true\"\n            (menuClosed)=\"node.infoMenuOpen = false\">\n            <mat-icon color=\"primary\">info_outline</mat-icon>\n            <mat-menu #popoverMenu=\"matMenu\">\n              <app-layer-info-card\n                [dataLayerConfig]=\"node.condition\"></app-layer-info-card>\n            </mat-menu>\n          </button>\n          <button\n            mat-icon-button\n            matTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.condition.display_name\">\n            <mat-icon class=\"mat-icon-rtl-mirror\">\n              {{ treeControl.isExpanded(node) ? 'expand_less' : 'expand_more' }}\n            </mat-icon>\n          </button>\n        </div>\n      </mat-tree-node>\n    </mat-tree>\n  </mat-radio-group>\n</mat-expansion-panel>\n"
        },
        {
            "name": "ConfirmationDialogComponent",
            "id": "component-ConfirmationDialogComponent-449b175c3c82595d1b99f0f5f68612c50d3b53c3fcf96f71b0f973a6d2c8c8937f296f4830942fe5fc5fc18dec79e42e73a632d66fd610d4ec51a2f5b9ebcbc1",
            "file": "src/app/password-reset/confirmation-dialog/confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirmation-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkImageUrl",
                    "defaultValue": "'/assets/png/gm_done_gm_grey_24dp.png'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatLegacyDialogRef as MatDialogRef } from '@angular/material/legacy-dialog';\n\n@Component({\n  selector: 'app-confirmation-dialog',\n  templateUrl: './confirmation-dialog.component.html',\n})\nexport class ConfirmationDialogComponent {\n  protected readonly checkImageUrl = '/assets/png/gm_done_gm_grey_24dp.png';\n\n  constructor(\n    private readonly dialogRef: MatDialogRef<ConfirmationDialogComponent>,\n    private router: Router\n  ) {}\n\n  close() {\n    this.dialogRef.close();\n    this.router.navigate(['login']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-dialog-content>\n  <img src=\"{{ checkImageUrl }}\" alt=\"\" />\n  <h3\n    class=\"gmat-headline-3\"\n    i18n=\"\n      Title text for dialog confirming that the user's password was reset\n      successfully.\n    \">\n    Password reset successfully.\n  </h3>\n  <p\n    class=\"gmat-body-1\"\n    i18n=\"\n      Text indicating that the user successfully reset their password, and will\n      need to login again.\n    \">\n    You password has been updated successfully. Please login to continue using\n    planscape.\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions class=\"dialog-button-container\">\n  <button\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"close()\"\n    i18n=\"Button to acknowledge and close the confirmation dialog\">\n    OK\n  </button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "ConstraintsPanelComponent",
            "id": "component-ConstraintsPanelComponent-ef202f69b3573e494859e113989e18fbbe8f3bae71e381584e03be7c7ed4084c9765c4f6eda4e091525aecb0c29d1739f3f1730a692b3a242f2f3cb4ca3ea8f7",
            "file": "src/app/plan/create-scenarios/constraints-panel/constraints-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-constraints-panel",
            "styleUrls": [
                "./constraints-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./constraints-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "planningAreaAcres",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "showWarning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "budgetStateMatcher",
                    "defaultValue": "new NotEnoughBudgetStateMatcher()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "constraintsForm",
                    "defaultValue": "this.createForm()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "excludedAreasOptions",
                    "defaultValue": "EXCLUDED_AREAS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "standSizeOptions",
                    "defaultValue": "STAND_SIZES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "budgetOrAreaRequiredValidator",
                    "args": [
                        {
                            "name": "constraintsForm",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks that one of budget or treatment area constraints is provided.\n",
                    "description": "<p>checks that one of budget or treatment area constraints is provided.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7810,
                                "end": 7825,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "constraintsForm"
                            },
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7804,
                                "end": 7809,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 7832,
                                "end": 7839,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFormData",
                    "args": [],
                    "optional": false,
                    "returnType": "Partial<ScenarioConfig>",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormData",
                    "args": [
                        {
                            "name": "config",
                            "type": "ScenarioConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ScenarioConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "togglMaxAreaAndMaxCost",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "totalBudgetedValidator",
                    "args": [
                        {
                            "name": "planningAreaAcres",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks that the maxBudget is enough for the selected estimatedCost per acre\n",
                    "description": "<p>Checks that the maxBudget is enough for the selected estimatedCost per acre</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8326,
                                "end": 8343,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "planningAreaAcres"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8320,
                                "end": 8325,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 8350,
                                "end": 8357,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  FormGroupDirective,\n  NgForm,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { STAND_SIZES } from '../../plan-helpers';\nimport { EXCLUDED_AREAS } from '../../../shared/constants';\nimport { ScenarioConfig } from '../../../types';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport {\n  calculateMaxArea,\n  calculateMinArea,\n  calculateMinBudget,\n  hasEnoughBudget,\n} from '../../../validators/scenarios';\n\nconst customErrors: Record<'notEnoughBudget' | 'budgetOrAreaRequired', string> =\n  {\n    notEnoughBudget: 'notEnoughBudget',\n    budgetOrAreaRequired: 'budgetOrAreaRequired',\n  };\n\n@Component({\n  selector: 'app-constraints-panel',\n  templateUrl: './constraints-panel.component.html',\n  styleUrls: ['./constraints-panel.component.scss'],\n})\nexport class ConstraintsPanelComponent implements OnChanges {\n  constraintsForm: FormGroup = this.createForm();\n  readonly excludedAreasOptions = EXCLUDED_AREAS;\n  readonly standSizeOptions = STAND_SIZES;\n\n  @Input() showWarning = false;\n  @Input() planningAreaAcres = 0;\n\n  budgetStateMatcher = new NotEnoughBudgetStateMatcher();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // update the form when the planningAreaAcres is updated\n    if (changes['planningAreaAcres']) {\n      const maxArea = this.maxArea as FormControl;\n      maxArea.clearValidators();\n      maxArea.addValidators([\n        Validators.min(this.minMaxAreaValue),\n        Validators.max(this.maxMaxAreaValue),\n      ]);\n      // also update the totalBudgetValidator\n      this.constraintsForm.clearValidators();\n      this.constraintsForm.addValidators([\n        this.budgetOrAreaRequiredValidator,\n        this.totalBudgetedValidator(this.planningAreaAcres),\n      ]);\n      // refresh form\n      this.constraintsForm.updateValueAndValidity();\n    }\n  }\n\n  createForm() {\n    let excludedAreasChosen: { [key: string]: (boolean | Validators)[] } = {};\n    EXCLUDED_AREAS.forEach((area) => {\n      excludedAreasChosen[area.key] = [false, Validators.required];\n    });\n    this.constraintsForm = this.fb.group(\n      {\n        budgetForm: this.fb.group({\n          // Estimated cost in $ per acre\n          estimatedCost: [2470, Validators.min(0)],\n          // Max cost of treatment for entire planning area\n          // Initially disabled, estimatedCost is required as input before maxCost is enabled\n          maxCost: ['', Validators.min(0.01)],\n        }),\n        physicalConstraintForm: this.fb.group({\n          // TODO Update if needed once we have confirmation if this is the correct default %\n          // Maximum slope allowed for planning area\n          maxSlope: [, [Validators.min(0), Validators.max(100)]],\n          // Minimum distance from road allowed for planning area\n          minDistanceFromRoad: [, [Validators.min(0), Validators.max(100000)]],\n          // Maximum area to be treated in acres\n          // Using 500 as minimum for now. Ideally the minimum should be based on stand size.\n          maxArea: [\n            '',\n            [\n              Validators.min(this.minMaxAreaValue),\n              Validators.max(this.maxMaxAreaValue),\n            ],\n          ],\n          // Stand Size selection\n          standSize: ['LARGE', Validators.required],\n        }),\n        excludedAreasForm: this.fb.group(excludedAreasChosen),\n        excludeAreasByDegrees: [true],\n        excludeAreasByDistance: [true],\n        planningAreaAcres: [this.planningAreaAcres],\n      },\n      {\n        validators: [\n          this.budgetOrAreaRequiredValidator,\n          this.totalBudgetedValidator,\n        ],\n      }\n    );\n\n    return this.constraintsForm;\n  }\n\n  get minMaxAreaValue() {\n    return calculateMinArea(this.planningAreaAcres);\n  }\n\n  get maxMaxAreaValue() {\n    return calculateMaxArea(this.planningAreaAcres);\n  }\n\n  get maxArea() {\n    return this.constraintsForm?.get('physicalConstraintForm.maxArea');\n  }\n\n  get maxCost() {\n    return this.constraintsForm.get('budgetForm.maxCost');\n  }\n\n  togglMaxAreaAndMaxCost() {\n    if (this.constraintsForm!.get('budgetForm.maxCost')!.value) {\n      (\n        this.constraintsForm!.get('physicalConstraintForm') as FormGroup\n      ).controls['maxArea'].disable();\n    } else {\n      (\n        this.constraintsForm!.get('physicalConstraintForm') as FormGroup\n      ).controls['maxArea'].enable();\n    }\n    if (this.constraintsForm!.get('physicalConstraintForm.maxArea')!.value) {\n      (this.constraintsForm!.get('budgetForm') as FormGroup).controls[\n        'maxCost'\n      ].disable();\n    } else {\n      (this.constraintsForm!.get('budgetForm') as FormGroup).controls[\n        'maxCost'\n      ].enable();\n    }\n  }\n\n  getFormData(): Partial<ScenarioConfig> {\n    let scenarioConfig: ScenarioConfig = {};\n\n    const estimatedCost = this.constraintsForm.get('budgetForm.estimatedCost');\n    const maxCost = this.constraintsForm.get('budgetForm.maxCost');\n    const maxArea = this.constraintsForm.get('physicalConstraintForm.maxArea');\n    const minDistanceFromRoad = this.constraintsForm.get(\n      'physicalConstraintForm.minDistanceFromRoad'\n    );\n    const maxSlope = this.constraintsForm.get(\n      'physicalConstraintForm.maxSlope'\n    );\n\n    scenarioConfig.stand_size = this.constraintsForm.get(\n      'physicalConstraintForm.standSize'\n    )?.value;\n    scenarioConfig.excluded_areas = [];\n    EXCLUDED_AREAS.forEach((area) => {\n      if (\n        this.constraintsForm.get('excludedAreasForm.' + area.key)?.valid &&\n        this.constraintsForm.get('excludedAreasForm.' + area.key)?.value\n      ) {\n        scenarioConfig.excluded_areas?.push(area.key);\n      }\n    });\n    if (estimatedCost?.valid)\n      scenarioConfig.est_cost = parseFloat(estimatedCost.value);\n    if (maxCost?.valid) scenarioConfig.max_budget = parseFloat(maxCost.value);\n    if (maxArea?.valid) {\n      scenarioConfig.max_treatment_area_ratio = parseFloat(maxArea.value);\n    }\n    if (minDistanceFromRoad?.valid) {\n      scenarioConfig.min_distance_from_road = parseFloat(\n        minDistanceFromRoad.value\n      );\n    }\n    if (maxSlope?.valid) scenarioConfig.max_slope = parseFloat(maxSlope.value);\n\n    return scenarioConfig;\n  }\n\n  setFormData(config: ScenarioConfig) {\n    EXCLUDED_AREAS.forEach((area) => {\n      if (\n        config.excluded_areas &&\n        config.excluded_areas.indexOf(area.key) > -1\n      ) {\n        this.constraintsForm\n          .get('excludedAreasForm.' + area.key)\n          ?.setValue(true);\n      } else {\n        this.constraintsForm\n          .get('excludedAreasForm.' + area.key)\n          ?.setValue(false);\n      }\n    });\n\n    if (config.est_cost) {\n      this.constraintsForm\n        .get('budgetForm.estimatedCost')\n        ?.setValue(config.est_cost);\n    }\n    if (config.max_budget) {\n      this.constraintsForm\n        .get('budgetForm.maxCost')\n        ?.setValue(config.max_budget);\n    }\n    if (config.max_treatment_area_ratio) {\n      this.constraintsForm\n        .get('physicalConstraintForm.maxArea')\n        ?.setValue(config.max_treatment_area_ratio);\n    }\n    if (config.min_distance_from_road) {\n      this.constraintsForm\n        .get('physicalConstraintForm.minDistanceFromRoad')\n        ?.setValue(config.min_distance_from_road);\n    }\n    if (config.max_slope) {\n      this.constraintsForm\n        .get('physicalConstraintForm.maxSlope')\n        ?.setValue(config.max_slope);\n    }\n\n    if (config.stand_size) {\n      this.constraintsForm\n        .get('physicalConstraintForm.standSize')\n        ?.setValue(config.stand_size);\n    }\n  }\n\n  /**\n   * checks that one of budget or treatment area constraints is provided.\n   * @param constraintsForm\n   * @private\n   */\n  private budgetOrAreaRequiredValidator(\n    constraintsForm: AbstractControl\n  ): ValidationErrors | null {\n    const maxCost = constraintsForm.get('budgetForm.maxCost');\n    const maxArea = constraintsForm.get('physicalConstraintForm.maxArea');\n    const valid = !!maxCost?.value || !!maxArea?.value;\n    return valid ? null : { [customErrors.budgetOrAreaRequired]: true };\n  }\n\n  /**\n   * Checks that the maxBudget is enough for the selected estimatedCost per acre\n   * @param planningAreaAcres\n   * @private\n   */\n  private totalBudgetedValidator(planningAreaAcres: number): ValidatorFn {\n    return (constraintsForm: AbstractControl): ValidationErrors | null => {\n      const maxCost = constraintsForm.get('budgetForm.maxCost')?.value;\n      const estCostPerAcre = constraintsForm.get('budgetForm.estimatedCost')\n        ?.value;\n      if (!!maxCost) {\n        const hasBudget = hasEnoughBudget(\n          planningAreaAcres,\n          estCostPerAcre,\n          maxCost\n        );\n\n        return hasBudget\n          ? null\n          : {\n              [customErrors.notEnoughBudget]: calculateMinBudget(\n                planningAreaAcres,\n                estCostPerAcre\n              ),\n            };\n      }\n      return null;\n    };\n  }\n}\n\nclass NotEnoughBudgetStateMatcher implements ErrorStateMatcher {\n  isErrorState(\n    control: FormControl | null,\n    form: FormGroupDirective | NgForm | null\n  ): boolean {\n    const hasError = form?.hasError(customErrors.notEnoughBudget);\n    return !!(control && control.touched && (control.invalid || hasError));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".area-selection {\n  columns: 2;\n  -webkit-columns: 2;\n  overflow: hidden;\n  margin-top: 10px;\n  gap: 10px;\n  margin-bottom: 20px;\n  margin-left: 30px;\n  min-height: 6em;\n}\n\n.area-column {\n  display: inline-block;\n  flex-direction: column;\n}\n\n.checkbox-column {\n  max-width: 50%;\n}\n\n.constraints-panel {\n  display: flex;\n  flex-direction: column;\n  font-size: 13px;\n  gap: 24px;\n  height: 100%;\n  width: auto;\n}\n\n.constraints-content {\n  overflow-y: auto;\n  margin-top: 10px;\n  border: 1px #a4aae0 solid;\n  border-radius: 10px;\n  display: inline-block;\n  height: auto;\n  width: auto;\n  box-shadow: 0 3px 0 0 #aeb0b8;\n  background-color: white;\n  padding-left: 10px;\n}\n\n.constraints-form {\n  display: flex;\n  flex-direction: column;\n  width: auto;\n}\n\n.flex-row {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n\n  &.space-evenly {\n    gap: 0;\n    justify-content: space-evenly;\n    margin-bottom: 10px;\n  }\n\n}\n\n\n.input-field {\n  padding-top: 4px;\n  width: 180px;\n  border: black;\n\n  &.disabled {\n    opacity: 0.6;\n  }\n}\n\n.right-align {\n  text-align: right;\n}\n\n.subtext {\n  color: #5f6368;\n  font-size: 12px;\n}\n\n.select-field {\n  width: 287px;\n}\n\n.error-text {\n  color: red;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  padding: 0 10px;\n  text-align: center;\n\n}\n\n/** Always show scrollbar. */\n::-webkit-scrollbar {\n  -webkit-appearance: none;\n  height: 0px;\n  width: 7px;\n}\n\n::-webkit-scrollbar-thumb {\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, 0.5);\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 4px;\n}\n\n.flex-column {\n  display: flex;\n  flex-direction: column;\n}\n\n.small-label {\n  margin-right: 10px;\n  font-size: 12px;\n  font-weight: 400;\n  width: fit-content;\n}\n\n.mat-hint {\n  align-items: center;\n  display: flex;\n  font-size: 12px;\n  line-height: 16px;\n\n  .mat-icon {\n    font-size: 16px;\n    height: 16px;\n    margin-right: 8px;\n    width: 16px;\n  }\n}\n\n.optional {\n  color: grey;\n  margin-top: 5px;\n  font-size: 10px;\n}\n\n\n.button-wrapper {\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 20px;\n  align-items: center;\n  justify-content: center;\n}\n\n.mat-button-toggle {\n  align-items: center;\n  vertical-align: center;\n  font-size: 13px;\n  font-weight: 400;\n}\n\n.mat-button-toggle-checked {\n  background-color: #e6e9f4;\n}\n\n.mat-button-toggle-group {\n  width: fit-content;\n  margin-right: 60px;\n}\n\n.mat-button-toggle-group-appearance-standard {\n  border-radius: 16px;\n  height: 30px;\n  border: #cccfd8 solid 2px;\n}\n\n:host {\n  ::ng-deep\n  .mat-button-toggle-appearance-standard\n  .mat-button-toggle-label-content {\n    line-height: 20px;\n    top: 5px;\n    width: 60px;\n  }\n\n  ::ng-deep .mat-select-value,\n  ::ng-deep .mat-option-text {\n    text-align: center;\n  }\n}\n\n.mat-grid-tile-content {\n  width: fit-content;\n}\n\n.suffix {\n  margin-left: 5px;\n}\n\n.excluded-areas-warn {\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./constraints-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "minMaxAreaValue": {
                    "name": "minMaxAreaValue",
                    "getSignature": {
                        "name": "minMaxAreaValue",
                        "type": "",
                        "returnType": "",
                        "line": 115
                    }
                },
                "maxMaxAreaValue": {
                    "name": "maxMaxAreaValue",
                    "getSignature": {
                        "name": "maxMaxAreaValue",
                        "type": "",
                        "returnType": "",
                        "line": 119
                    }
                },
                "maxArea": {
                    "name": "maxArea",
                    "getSignature": {
                        "name": "maxArea",
                        "type": "",
                        "returnType": "",
                        "line": 123
                    }
                },
                "maxCost": {
                    "name": "maxCost",
                    "getSignature": {
                        "name": "maxCost",
                        "type": "",
                        "returnType": "",
                        "line": 127
                    }
                }
            },
            "templateData": "<div class=\"constraints-panel\">\n  <!-- Form -->\n  <form class=\"constraints-form\" [formGroup]=\"constraintsForm!\">\n    <div class=\"constraints-content\">\n      <app-scenario-tooltip\n        area=\"CONSTRAINTS\"\n        title=\"CONSTRAINTS\"></app-scenario-tooltip>\n      <div class=\"flex-row space-evenly\">\n        <div formGroupName=\"physicalConstraintForm\">\n          <div>\n            <mat-form-field\n              class=\"input-field\"\n              appearance=\"outline\"\n              floatLabel=\"always\">\n              <mat-label>Max acres to be treated</mat-label>\n              <input\n                class=\"right-align\"\n                formControlName=\"maxArea\"\n                type=\"text\"\n                mask=\"separator\"\n                thousandSeparator=\",\"\n                matInput\n                (input)=\"togglMaxAreaAndMaxCost()\" />\n            </mat-form-field>\n          </div>\n          <div class=\"error-text\" *ngIf=\"maxArea?.invalid && maxArea?.touched\">\n            Max acres needs to be between\n            {{ minMaxAreaValue | number: '1.0-0' }} and\n            {{ maxMaxAreaValue | number: '1.0-0' }}\n          </div>\n        </div>\n        or\n        <div formGroupName=\"budgetForm\">\n          <div>\n            <mat-form-field\n              class=\"input-field\"\n              appearance=\"outline\"\n              floatLabel=\"always\">\n              <mat-label>Max Budget</mat-label>\n              <input\n                id=\"maxCost\"\n                class=\"right-align\"\n                formControlName=\"maxCost\"\n                matInput\n                type=\"text\"\n                mask=\"separator\"\n                thousandSeparator=\",\"\n                [errorStateMatcher]=\"budgetStateMatcher\"\n                (input)=\"togglMaxAreaAndMaxCost()\" />\n              <span matPrefix>$&nbsp;</span>\n            </mat-form-field>\n          </div>\n          <div\n            class=\"error-text\"\n            *ngIf=\"\n              constraintsForm.hasError('notEnoughBudget') && maxCost?.touched\n            \">\n            Budget needs to be at least\n            {{\n              constraintsForm.getError('notEnoughBudget')\n                | currency: 'USD' : 'symbol' : '1.0-0'\n            }}\n          </div>\n        </div>\n      </div>\n      <div class=\"flex-row\">\n        <div\n          *appFeatureFlag=\"'scenario_constraints'\"\n          formGroupName=\"physicalConstraintForm\">\n          <div>\n            <mat-form-field\n              class=\"input-field\"\n              appearance=\"outline\"\n              floatLabel=\"always\">\n              <mat-label>Max slope</mat-label>\n              <input\n                class=\"right-align\"\n                formControlName=\"maxSlope\"\n                matInput\n                type=\"number\"\n                [value]=\"37\" />\n              <span matSuffix class=\"suffix\">%</span>\n            </mat-form-field>\n          </div>\n        </div>\n        <div formGroupName=\"budgetForm\">\n          <div>\n            <mat-form-field\n              class=\"input-field\"\n              appearance=\"outline\"\n              floatLabel=\"always\">\n              <mat-label>Treatment cost</mat-label>\n              <input\n                id=\"estimatedCost\"\n                class=\"right-align\"\n                formControlName=\"estimatedCost\"\n                matInput\n                type=\"text\"\n                mask=\"separator\"\n                thousandSeparator=\",\" />\n              <span matSuffix class=\"suffix\">/acre</span>\n            </mat-form-field>\n          </div>\n        </div>\n      </div>\n      <div\n        *appFeatureFlag=\"'scenario_constraints'\"\n        formGroupName=\"physicalConstraintForm\"\n        class=\"flex-row\">\n        <div>\n          <mat-form-field\n            class=\"input-field\"\n            appearance=\"outline\"\n            floatLabel=\"always\">\n            <mat-label>Distance from roads</mat-label>\n            <input\n              class=\"right-align\"\n              formControlName=\"minDistanceFromRoad\"\n              matInput\n              type=\"text\"\n              mask=\"separator\"\n              thousandSeparator=\",\"\n              [value]=\"\" />\n            <span matSuffix class=\"suffix\">yds</span>\n          </mat-form-field>\n        </div>\n        <div>\n          <mat-form-field class=\"input-field\" appearance=\"outline\">\n            <mat-label>Stand size</mat-label>\n            <mat-select formControlName=\"standSize\" required>\n              <mat-option *ngFor=\"let size of standSizeOptions\" [value]=\"size\">\n                {{ size }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </div>\n    </div>\n    <div class=\"constraints-content\">\n      <div formGroupName=\"excludedAreasForm\" class=\"flex-column\">\n        <app-scenario-tooltip\n          area=\"EXCLUDE_AREAS\"\n          title=\"EXCLUDE AREAS\"></app-scenario-tooltip>\n\n        <app-form-message class=\"excluded-areas-warn\" *ngIf=\"showWarning\"\n          >Adding exclusion areas reduces the available scenario acreage, and\n          may cause the scenario to fail. If your scenario is failing, please\n          try again with no exclusion areas.\n        </app-form-message>\n        <section class=\"area-selection\">\n          <div class=\"checkbox-column\">\n            <mat-checkbox\n              [color]=\"'primary'\"\n              *ngFor=\"let item of excludedAreasOptions\"\n              [formControlName]=\"item.key\"\n              [value]=\"item.key\">\n              {{ item.label }}\n            </mat-checkbox>\n          </div>\n        </section>\n      </div>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "CreateScenariosComponent",
            "id": "component-CreateScenariosComponent-d89fca2bca56a54939e2a7523e51ab1f7227bdba54445a5b027c1abdf7b46bf204358a2ff49b61c89440924ed97045a5ec828d3fc859f5ee16afb3a58108b521",
            "file": "src/app/plan/create-scenarios/create-scenarios.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-scenarios",
            "styleUrls": [
                "./create-scenarios.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-scenarios.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "acres$",
                    "defaultValue": "this.plan$.pipe(map((plan) => (plan ? plan.area_acres : 0)))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "constraintsPanelComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConstraintsPanelComponent",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "ConstraintsPanelComponent, {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "existingScenarioNames",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "forms",
                    "defaultValue": "this.fb.group({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "generatingScenario",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "plan$",
                    "defaultValue": "new BehaviorSubject<Plan | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "planId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "priorities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "prioritiesComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SetPrioritiesComponent",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SetPrioritiesComponent, {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "project_area_upload_enabled",
                    "defaultValue": "this.featureService.isFeatureEnabled(\n    'upload_project_area'\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "scenarioChartData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "scenarioId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "scenarioNotFound",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "scenarioResults",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioResult | null",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "scenarioState",
                    "defaultValue": "'NOT_STARTED'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioResultStatus",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "selectedTab",
                    "defaultValue": "ScenarioTabs.CONFIG",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "stepper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatStepper | undefined",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatStepper"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tabAnimation",
                    "defaultValue": "this.tabAnimationOptions.off",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "tabAnimationOptions",
                    "defaultValue": "{\n    on: '500ms',\n    off: '0ms',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<\"on\" | \"off\" | string>",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "convertSingleGeoJsonToGeoJsonArray",
                    "args": [
                        {
                            "name": "original",
                            "type": "GeoJSON.GeoJSON",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GeoJSON.GeoJSON[]",
                    "typeParameters": [],
                    "line": 308,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConverts each feature found in a GeoJSON into individual GeoJSONs, else\nreturns the original GeoJSON, which may result in an error upon project area creation.\nOnly polygon or multipolygon feature types are expected in the uploaded shapefile.\n",
                    "description": "<p>Converts each feature found in a GeoJSON into individual GeoJSONs, else\nreturns the original GeoJSON, which may result in an error upon project area creation.\nOnly polygon or multipolygon feature types are expected in the uploaded shapefile.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "original",
                            "type": "GeoJSON.GeoJSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createForms",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCreates the scenario",
                    "description": "<p>Creates the scenario</p>\n"
                },
                {
                    "name": "disableForms",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "drawShapes",
                    "args": [
                        {
                            "name": "shapes",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "shapes",
                            "type": "any | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formValueToScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "Scenario",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "goBackToPlanning",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 329,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pollForChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "processScenarioResults",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProcesses Scenario Results into ChartData format and updates PlanService State with Project Area shapes\n",
                    "description": "<p>Processes Scenario Results into ChartData format and updates PlanService State with Project Area shapes</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { MatStepper } from '@angular/material/stepper';\nimport { BehaviorSubject, catchError, interval, map, NEVER, take } from 'rxjs';\nimport {\n  Plan,\n  Scenario,\n  ScenarioResult,\n  ScenarioResultStatus,\n} from 'src/app/types';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { POLLING_INTERVAL } from '../plan-helpers';\nimport { Router } from '@angular/router';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { PlanStateService, ScenarioService } from '@services';\nimport { SNACK_ERROR_CONFIG } from '../../shared/constants';\nimport { SetPrioritiesComponent } from './set-priorities/set-priorities.component';\nimport { ConstraintsPanelComponent } from './constraints-panel/constraints-panel.component';\nimport { FeatureService } from '../../features/feature.service';\nimport { GoalOverlayService } from './goal-overlay/goal-overlay.service';\n\nenum ScenarioTabs {\n  CONFIG,\n  RESULTS,\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'app-create-scenarios',\n  templateUrl: './create-scenarios.component.html',\n  styleUrls: ['./create-scenarios.component.scss'],\n})\nexport class CreateScenariosComponent implements OnInit {\n  @ViewChild(MatStepper) stepper: MatStepper | undefined;\n  selectedTab = ScenarioTabs.CONFIG;\n  generatingScenario: boolean = false;\n  scenarioId?: string | null;\n  planId?: number | null;\n  plan$ = new BehaviorSubject<Plan | null>(null);\n  acres$ = this.plan$.pipe(map((plan) => (plan ? plan.area_acres : 0)));\n  existingScenarioNames: string[] = [];\n  forms: FormGroup = this.fb.group({});\n\n  project_area_upload_enabled = this.featureService.isFeatureEnabled(\n    'upload_project_area'\n  );\n\n  // this value gets updated once we load the scenario result.\n  scenarioState: ScenarioResultStatus = 'NOT_STARTED';\n  scenarioResults: ScenarioResult | null = null;\n  priorities: string[] = [];\n  scenarioChartData: any[] = [];\n  tabAnimationOptions: Record<'on' | 'off', string> = {\n    on: '500ms',\n    off: '0ms',\n  };\n\n  tabAnimation = this.tabAnimationOptions.off;\n\n  scenarioNotFound = false;\n\n  @ViewChild(SetPrioritiesComponent, { static: true })\n  prioritiesComponent!: SetPrioritiesComponent;\n\n  @ViewChild(ConstraintsPanelComponent, { static: true })\n  constraintsPanelComponent!: ConstraintsPanelComponent;\n\n  constructor(\n    private fb: FormBuilder,\n    private planStateService: PlanStateService,\n    private scenarioService: ScenarioService,\n    private router: Router,\n    private matSnackBar: MatSnackBar,\n    private featureService: FeatureService,\n    private goalOverlayService: GoalOverlayService\n  ) {}\n\n  createForms() {\n    this.forms = this.fb.group({\n      scenarioName: new FormControl('', [\n        Validators.required,\n        (control: AbstractControl) =>\n          scenarioNameMustBeNew(control, this.existingScenarioNames),\n      ]),\n      priorities: this.prioritiesComponent.createForm(),\n      constrains: this.constraintsPanelComponent.createForm(),\n      projectAreas: this.fb.group({\n        generateAreas: [''],\n        uploadedArea: [''],\n      }),\n    });\n  }\n\n  ngOnInit(): void {\n    this.createForms();\n    // Get plan details and current config ID from plan state, then load the config.\n    this.planStateService.planState$\n      .pipe(untilDestroyed(this))\n      .subscribe((planState) => {\n        this.plan$.next(planState.all[planState.currentPlanId!]);\n        this.scenarioId = planState.currentScenarioId;\n        this.planId = planState.currentPlanId;\n        if (this.plan$.getValue()?.region_name) {\n          this.planStateService.setPlanRegion(\n            this.plan$.getValue()?.region_name!\n          );\n        }\n      });\n\n    if (this.scenarioId) {\n      // Has to be outside service subscription or else will cause infinite loop\n      this.scenarioState = 'LOADING';\n      this.loadConfig();\n      this.pollForChanges();\n      // if we have an id go to the results tab.\n      this.selectedTab = ScenarioTabs.RESULTS;\n    } else {\n      // enable animation\n      this.tabAnimation = this.tabAnimationOptions.on;\n    }\n\n    // When an area is uploaded, issue an event to draw it on the map.\n    // If the \"generate areas\" option is selected, remove any drawn areas.\n    this.projectAreasForm?.valueChanges.subscribe((_) => {\n      const generateAreas = this.forms\n        .get('projectAreas')\n        ?.get('generateAreas');\n      const uploadedArea = this.projectAreasForm?.get('uploadedArea');\n      if (generateAreas?.value) {\n        this.drawShapes(null);\n      } else {\n        this.drawShapes(uploadedArea?.value);\n      }\n    });\n\n    if (typeof this.planId === 'number') {\n      this.scenarioService\n        .getScenariosForPlan(this.planId)\n        .pipe(take(1))\n        .subscribe((scenarios) => {\n          this.existingScenarioNames = scenarios.map((s) => s.name);\n        });\n    }\n  }\n\n  pollForChanges() {\n    interval(POLLING_INTERVAL)\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        // only poll when scenario is pending or running\n        if (\n          this.scenarioState === 'PENDING' ||\n          this.scenarioState === 'RUNNING'\n        ) {\n          this.loadConfig();\n        }\n      });\n  }\n\n  loadConfig(): void {\n    this.planStateService.getScenario(this.scenarioId!).subscribe({\n      next: (scenario) => {\n        // if we have the same state do nothing.\n        if (this.scenarioState === scenario.scenario_result?.status) {\n          return;\n        }\n\n        this.disableForms();\n        if (scenario.scenario_result) {\n          this.scenarioResults = scenario.scenario_result;\n          this.scenarioState = scenario.scenario_result?.status;\n          this.priorities =\n            scenario.configuration.treatment_question?.scenario_priorities ||\n            [];\n\n          this.selectedTab = ScenarioTabs.RESULTS;\n          if (this.scenarioState == 'SUCCESS') {\n            this.processScenarioResults(scenario);\n          }\n          // enable animation\n          this.tabAnimation = this.tabAnimationOptions.on;\n        }\n\n        //setting name\n        if (scenario.name) {\n          this.scenarioNameFormField?.setValue(scenario.name);\n        }\n        // setting treatment question\n        if (scenario.configuration.treatment_question) {\n          this.prioritiesComponent.setFormData(\n            scenario.configuration.treatment_question\n          );\n        }\n        // setting constraints\n        this.constraintsPanelComponent.setFormData(scenario.configuration);\n      },\n      error: () => {\n        this.scenarioNotFound = true;\n      },\n    });\n  }\n\n  private formValueToScenario(): Scenario {\n    return {\n      name: this.scenarioNameFormField?.value,\n      planning_area: this.planId ? this.planId.toString() : '', // nope I should have planID\n      status: 'ACTIVE',\n      configuration: {\n        ...this.constraintsPanelComponent.getFormData(),\n        ...this.prioritiesComponent.getFormData(),\n      },\n    };\n  }\n\n  /** Creates the scenario */\n  // TODO Add support for uploaded Project Area shapefiles\n  createScenario(): void {\n    this.forms.markAllAsTouched();\n    if (this.forms.invalid) {\n      return;\n    }\n    this.generatingScenario = true;\n    this.goalOverlayService.close();\n    this.planStateService\n      .createScenario(this.formValueToScenario())\n      .pipe(\n        catchError((error) => {\n          this.generatingScenario = false;\n          this.matSnackBar.open(error.message, 'Dismiss', SNACK_ERROR_CONFIG);\n          return NEVER;\n        })\n      )\n      .subscribe(() => {\n        this.matSnackBar.dismiss();\n        this.scenarioState = 'PENDING';\n        this.disableForms();\n        this.selectedTab = ScenarioTabs.RESULTS;\n        this.pollForChanges();\n      });\n  }\n\n  disableForms() {\n    this.scenarioNameFormField?.disable();\n    this.prioritiesForm?.disable();\n    this.constrainsForm?.disable();\n  }\n\n  /**\n   * Processes Scenario Results into ChartData format and updates PlanService State with Project Area shapes\n   */\n  processScenarioResults(scenario: Scenario) {\n    var scenario_output_fields_paths =\n      scenario?.configuration.treatment_question?.scenario_output_fields_paths!;\n    var labels: string[][] = [];\n    if (scenario && this.scenarioResults) {\n      this.planStateService\n        .getMetricData(scenario_output_fields_paths)\n        .pipe(take(1))\n        .subscribe((metric_data) => {\n          for (let metric in metric_data) {\n            let displayName = metric_data[metric]['display_name'];\n            let dataUnits =\n              metric_data[metric]['output_units'] ||\n              metric_data[metric]['data_units'];\n            let metricLayer = metric_data[metric]['raw_layer'];\n            let metricName = metric_data[metric]['metric_name'];\n            let metricData: string[] = [];\n            if (!metric_data[metric]['hide_chart']) {\n              this.scenarioResults?.result.features.map((featureCollection) => {\n                const props = featureCollection.properties;\n\n                metricData.push(props[metric]);\n              });\n              labels.push([\n                displayName,\n                dataUnits,\n                metricLayer,\n                metricData,\n                metricName,\n              ]);\n            }\n          }\n          this.scenarioChartData = labels.map((label, _) => ({\n            label: label[0],\n            measurement: label[1],\n            metric_layer: label[2],\n            values: label[3],\n            key: label[4],\n          }));\n        });\n      this.planStateService.updateStateWithShapes(\n        this.scenarioResults?.result.features\n      );\n    }\n  }\n\n  /**\n   * Converts each feature found in a GeoJSON into individual GeoJSONs, else\n   * returns the original GeoJSON, which may result in an error upon project area creation.\n   * Only polygon or multipolygon feature types are expected in the uploaded shapefile.\n   */\n  convertSingleGeoJsonToGeoJsonArray(\n    original: GeoJSON.GeoJSON\n  ): GeoJSON.GeoJSON[] {\n    const geometries: GeoJSON.GeoJSON[] = [];\n    if (original.type === 'FeatureCollection' && original.features) {\n      original.features.forEach((feat) => {\n        geometries.push({\n          type: 'FeatureCollection',\n          features: [feat],\n        });\n      });\n    } else {\n      geometries.push(original);\n    }\n    return geometries;\n  }\n\n  private drawShapes(shapes: any | null): void {\n    this.planStateService.updateStateWithShapes(shapes);\n  }\n\n  goBackToPlanning() {\n    this.router.navigate(['plan', this.plan$.value?.id]);\n  }\n\n  get projectAreasForm(): FormGroup {\n    return this.forms.get('projectAreas') as FormGroup;\n  }\n\n  get scenarioNameFormField() {\n    return this.forms.get('scenarioName');\n  }\n\n  get prioritiesForm() {\n    return this.forms.get('priorities');\n  }\n\n  get constrainsForm() {\n    return this.forms.get('constrains');\n  }\n}\n\nfunction scenarioNameMustBeNew(\n  nameControl: AbstractControl,\n  existingNames: string[]\n): { [key: string]: any } | null {\n  if (existingNames.includes(nameControl.value)) {\n    return { duplicate: true };\n  }\n  return null;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-scenarios-panel {\n  box-sizing: border-box;\n}\n\n.create-scenarios-panel-expand-button {\n  align-items: center;\n  background-color: white;\n  border-radius: 8px;\n  display: flex;\n  height: 64px;\n  position: absolute;\n  right: -24px;\n  top: 12px;\n\n  &.collapsed {\n    transform: rotate(180deg);\n  }\n}\n\n.create-scenarios-panel-content {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 100%;\n\n  width: 100%;\n  z-index: 5;\n  top: 0;\n  left: 0;\n}\n\n/** Always show scrollbar. */\n::-webkit-scrollbar {\n  -webkit-appearance: none;\n  height: 0px;\n  width: 7px;\n}\n\n::-webkit-scrollbar-thumb {\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, 0.5);\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 4px;\n}\n\n.stepper {\n  width: 100%;\n}\n\n.create-scenarios-inner-wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n.step-label-header {\n  font-size: 20px;\n}\n\n.step-label-description {\n  font-size: 13px;\n  margin-top: 10px;\n  opacity: 0.66;\n}\n\n// Needed to keep tabs steady on switch\n.tab-container {\n  display: block;\n  width: 100%;\n  height: 100%;\n\n  box-sizing: border-box;\n}\n\n:host {\n  ::ng-deep .mat-tab-body-wrapper {\n\n    background-color: #e6e9f4;\n    flex-grow: 1;\n  }\n\n  ::ng-deep .mat-tab-group {\n    height: 100%;\n  }\n\n  ::ng-deep mat-tab-header {\n    padding: 0 32px;\n  }\n\n  ::ng-deep .mat-tab-body {\n    padding-bottom: 10px;\n  }\n\n  ::ng-deep .mat-tab-body-content {\n    padding: 0 20px;\n\n  }\n}\n\n\n.flex-row {\n  align-items: center;\n  display: flex;\n}\n\n.gap-12 {\n  gap: 12px;\n  margin-top: 30px;\n}\n\n.scenario-name {\n  display: block;\n  flex-direction: row;\n  height: fit-content;\n  width: 100%;\n  padding: 10px 16px 0 32px;\n  box-sizing: border-box;\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  background: white;\n\n}\n\n.scenario-name-input {\n  width: 100%;\n  height: 40px;\n  font-weight: bold;\n}\n\n.error {\n  color: #f44336;\n}\n\n\n.hidden {\n  display: none;\n}\n",
                    "styleUrl": "./create-scenarios.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "featureService",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "goalOverlayService",
                        "type": "GoalOverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "featureService",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "goalOverlayService",
                        "type": "GoalOverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "projectAreasForm": {
                    "name": "projectAreasForm",
                    "getSignature": {
                        "name": "projectAreasForm",
                        "type": "",
                        "returnType": "FormGroup",
                        "line": 333
                    }
                },
                "scenarioNameFormField": {
                    "name": "scenarioNameFormField",
                    "getSignature": {
                        "name": "scenarioNameFormField",
                        "type": "",
                        "returnType": "",
                        "line": 337
                    }
                },
                "prioritiesForm": {
                    "name": "prioritiesForm",
                    "getSignature": {
                        "name": "prioritiesForm",
                        "type": "",
                        "returnType": "",
                        "line": 341
                    }
                },
                "constrainsForm": {
                    "name": "constrainsForm",
                    "getSignature": {
                        "name": "constrainsForm",
                        "type": "",
                        "returnType": "",
                        "line": 345
                    }
                }
            },
            "templateData": "<app-resource-unavailable\n  resource=\"scenario\"\n  *ngIf=\"scenarioNotFound\"></app-resource-unavailable>\n\n<div\n  class=\"create-scenarios-panel mat-elevation-z2\"\n  [ngClass]=\"{ hidden: scenarioNotFound }\">\n  <div class=\"create-scenarios-panel-content\">\n    <div class=\"scenario-name\">\n      <form [formGroup]=\"forms!\">\n        <mat-form-field class=\"scenario-name-input\">\n          <input\n            formControlName=\"scenarioName\"\n            matInput\n            placeholder=\"Scenario Name:\" />\n        </mat-form-field>\n      </form>\n      <div\n        *ngIf=\"\n          scenarioNameFormField?.invalid &&\n          scenarioNameFormField?.touched &&\n          scenarioNameFormField?.errors?.['required']\n        \"\n        class=\"error\">\n        Please enter scenario name above\n      </div>\n      <div *ngIf=\"scenarioNameFormField?.errors?.['duplicate']\" class=\"error\">\n        This name is already used by another scenario.\n      </div>\n    </div>\n    <div class=\"tab-container\">\n      <mat-tab-group\n        [selectedIndex]=\"selectedTab\"\n        [animationDuration]=\"tabAnimation\">\n        <mat-tab label=\"Configuration\">\n          <div class=\"create-scenarios-inner-wrapper\">\n            <app-set-priorities></app-set-priorities>\n            <app-identify-project-areas\n              *ngIf=\"project_area_upload_enabled\"\n              [formGroup]=\"projectAreasForm\"></app-identify-project-areas>\n            <app-constraints-panel\n              [planningAreaAcres]=\"(acres$ | async) || 0\"\n              [showWarning]=\"\n                scenarioState !== 'SUCCESS'\n              \"></app-constraints-panel>\n            <div class=\"flex-row gap-12\">\n              <button\n                mat-raised-button\n                color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"\n                  scenarioNameFormField?.invalid ||\n                  prioritiesForm?.invalid ||\n                  constrainsForm?.invalid ||\n                  generatingScenario\n                \"\n                (click)=\"createScenario()\">\n                {{ generatingScenario ? 'GENERATING SCENARIO...' : 'GENERATE' }}\n              </button>\n              <div *ngIf=\"project_area_upload_enabled\">\n                Estimated time ??????\n              </div>\n            </div>\n          </div>\n        </mat-tab>\n        <mat-tab label=\"Results\">\n          <ng-container *ngIf=\"scenarioState === 'LOADING'\"></ng-container>\n          <app-scenario-not-started\n            *ngIf=\"scenarioState === 'NOT_STARTED'\"></app-scenario-not-started>\n          <app-scenario-pending\n            *ngIf=\"scenarioState === 'PENDING'\"></app-scenario-pending>\n          <app-scenario-pending\n            *ngIf=\"scenarioState === 'RUNNING'\"></app-scenario-pending>\n          <app-scenario-results\n            *ngIf=\"scenarioState === 'SUCCESS'\"\n            [results]=\"scenarioResults\"\n            [scenarioChartData]=\"scenarioChartData\"\n            [priorities]=\"priorities\"\n            [scenarioName]=\"scenarioNameFormField?.value\"\n            [scenarioId]=\"scenarioId!\">\n          </app-scenario-results>\n          <app-scenario-failure\n            *ngIf=\"\n              scenarioState === 'FAILURE' ||\n              scenarioState === 'PANIC' ||\n              scenarioState === 'TIMED_OUT'\n            \"\n            (goBack)=\"goBackToPlanning()\"\n            [scenarioName]=\"scenarioNameFormField?.value\"\n            [scenarioId]=\"scenarioId!\"></app-scenario-failure>\n        </mat-tab>\n      </mat-tab-group>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CredentialsComponent",
            "id": "component-CredentialsComponent-f10b07e15814b9186e9cfcf0a0a02ee6016f5a65682a2fe387df3822118a902abe2fdacdc715bcb1ba39efdfe03088d12abdc5b4b09b404a6cfceab8670799a6",
            "file": "src/app/account/credentials/credentials.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-credentials",
            "styleUrls": [
                "./credentials.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./credentials.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-credentials',\n  templateUrl: './credentials.component.html',\n  styleUrls: ['./credentials.component.scss'],\n})\nexport class CredentialsComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./credentials.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<app-change-password></app-change-password>\n"
        },
        {
            "name": "CreditsBlurbComponent",
            "id": "component-CreditsBlurbComponent-f78073680ac36d4ccef5271ab5c8aaf5f31c59f56350f64f9561bdb68c21851d91ab04cf1f45cb18082eff5b077cbe3d7776bbec50dd36297d071028f42ae25b",
            "file": "src/app/shared/credits-blurb/credits-blurb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-credits-blurb",
            "styleUrls": [
                "./credits-blurb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./credits-blurb.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-credits-blurb',\n  templateUrl: './credits-blurb.component.html',\n  styleUrls: ['./credits-blurb.component.scss'],\n})\nexport class CreditsBlurbComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  bottom: 0px;\n  box-sizing: border-box;\n  padding: 1.5em 2em;\n  position: absolute;\n  width: 50%;\n  background-color: rgba(0, 0, 0, 0.5);\n\n  a {\n    color: #82d8fd;\n    text-decoration: none;\n  }\n\n  a:hover,\n  a:active {\n    text-decoration: underline;\n  }\n\n  p {\n    color: white;\n    font-size: 13px;\n    font-weight: 500;\n    line-height: 20px;\n    margin: 0;\n    text-align: center;\n  }\n}\n",
                    "styleUrl": "./credits-blurb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "templateData": "<div>\n  <p>\n    Planscape is a collaborative effort by the California Natural Resources\n    Agency (CNRA), The USDA Forest Service, The University of California,\n    <a href=\"https://sig-gis.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\n      >Spatial Informatics Group (SIG)</a\n    >, and\n    <a href=\"https://www.google.org/\" target=\"_blank\" rel=\"noopener noreferrer\"\n      >Google.org</a\n    >.\n  </p>\n</div>\n"
        },
        {
            "name": "DeleteAccountComponent",
            "id": "component-DeleteAccountComponent-bafe5e0536dff05d3ba2d895a79409da3068dad381c592e1a15817a1d1d37ded366590dfb922956830ad00c9cb4ecec0fc4bb278fc218a085ac902a6da856227",
            "file": "src/app/account/delete-account/delete-account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-account",
            "styleUrls": [
                "./delete-account.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-account.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openDeleteAccountDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AuthService } from '@services';\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\nimport { Router } from '@angular/router';\nimport { DeleteAccountDialogComponent } from '../delete-account-dialog/delete-account-dialog.component';\n\n@Component({\n  selector: 'app-delete-account',\n  templateUrl: './delete-account.component.html',\n  styleUrls: ['./delete-account.component.scss'],\n})\nexport class DeleteAccountComponent {\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private dialog: MatDialog\n  ) {}\n\n  openDeleteAccountDialog(): void {\n    this.dialog\n      .open(DeleteAccountDialogComponent, {\n        data: {\n          user: this.authService.loggedInUser$.value,\n        },\n      })\n      .afterClosed()\n      .subscribe((data) => {\n        if (data?.deletedAccount) {\n          this.router.navigate(['login']);\n        }\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/mixins\";\n@import \"../../../styles/colors\";\n\n:host {\n  .mat-icon {\n    line-height: 21px;\n  }\n}\n\n",
                    "styleUrl": "./delete-account.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h3>Are you sure you want to deactivate your account?</h3>\n<p class=\"mat-body-2\">\n  This will deactivate your account, including any plans that you own\n</p>\n\n<button\n  mat-stroked-button\n  color=\"secondary\"\n  (click)=\"openDeleteAccountDialog()\">\n  <mat-icon>delete_outline</mat-icon>\n  Deactivate Account\n</button>\n"
        },
        {
            "name": "DeleteAccountDialogComponent",
            "id": "component-DeleteAccountDialogComponent-1aa19db27845e53423488d292b92a8d49cd998a737796b4d9bdd10126131b542e3fc9a9111a72b6c0de4072164d7d1f139b3471d07ae41eb8959fba940c5d567",
            "file": "src/app/account/delete-account-dialog/delete-account-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-account-dialog",
            "styleUrls": [
                "./delete-account-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-account-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "deleteAccountForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "disableDeleteButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA,\n  MatLegacyDialogRef as MatDialogRef,\n} from '@angular/material/legacy-dialog';\nimport { AuthService } from 'src/app/services';\nimport { User } from 'src/app/types';\n\n@Component({\n  selector: 'app-delete-account-dialog',\n  templateUrl: './delete-account-dialog.component.html',\n  styleUrls: ['./delete-account-dialog.component.scss'],\n})\nexport class DeleteAccountDialogComponent {\n  deleteAccountForm: FormGroup;\n  disableDeleteButton: boolean = false;\n  error: any;\n\n  constructor(\n    private authService: AuthService,\n    @Inject(MAT_DIALOG_DATA) private data: { user: User },\n    private fb: FormBuilder,\n    private dialogRef: MatDialogRef<DeleteAccountDialogComponent>\n  ) {\n    this.deleteAccountForm = this.fb.group({\n      currentPassword: this.fb.control('', [Validators.required]),\n    });\n  }\n\n  cancel(): void {\n    this.dialogRef.close();\n  }\n\n  deleteAccount(): void {\n    this.disableDeleteButton = true;\n    this.authService\n      .deleteUser(\n        this.data.user,\n        this.deleteAccountForm.get('currentPassword')?.value\n      )\n      .subscribe(\n        (_) => {\n          this.dialogRef.close({\n            deletedAccount: true,\n          });\n        },\n        (err) => {\n          this.error = err.error;\n          this.disableDeleteButton = false;\n        }\n      );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".delete-account-dialog {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  padding: 24px;\n}\n\n.warning-icon {\n  color: #f3b300;\n  font-size: 60px;\n  height: 60px;\n  width: 60px;\n}\n\np {\n  font-size: 18px;\n  font-weight: 400;\n  line-height: 32px;\n  text-align: center;\n}\n\n.button-row {\n  display: flex;\n  gap: 24px;\n}\n",
                    "styleUrl": "./delete-account-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteAccountDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteAccountDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"delete-account-dialog\">\n  <mat-icon class=\"warning-icon\">warning</mat-icon>\n\n  <p>\n    <b>Are you sure you want to deactivate your account?</b>\n    <br />\n    This will deactivate your account, including any plans that you own.\n    <br />\n    <a href=\"/home\">View my plans</a>\n  </p>\n\n  <form [formGroup]=\"deleteAccountForm\">\n    <mat-form-field>\n      <mat-label>Password</mat-label>\n      <input\n        type=\"password\"\n        required\n        formControlName=\"currentPassword\"\n        matInput />\n    </mat-form-field>\n\n    <div class=\"button-row\">\n      <button\n        mat-raised-button\n        color=\"warn\"\n        (click)=\"deleteAccount()\"\n        [disabled]=\"disableDeleteButton\">\n        DEACTIVATE\n      </button>\n\n      <button mat-raised-button (click)=\"cancel()\">CANCEL</button>\n    </div>\n  </form>\n\n  <p *ngIf=\"error\">{{ error }}</p>\n</div>\n"
        },
        {
            "name": "DeleteDialogComponent",
            "id": "component-DeleteDialogComponent-64da0ae4894cf0a0e1016ec60aba51c5b05f5910f5ad6da177f2de2a4ecef495e8966aeefdd5202de439583fbb658bb24c08a0fc9a33c1d3795e1352c1b3f224",
            "file": "src/app/delete-dialog/delete-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-dialog",
            "styleUrls": [
                "./delete-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<DeleteDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport {\n  MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA,\n  MatLegacyDialogRef as MatDialogRef,\n} from '@angular/material/legacy-dialog';\n\n@Component({\n  selector: 'app-delete-dialog',\n  templateUrl: './delete-dialog.component.html',\n  styleUrls: ['./delete-dialog.component.scss'],\n})\nexport class DeleteDialogComponent {\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { name: string },\n    public dialogRef: MatDialogRef<DeleteDialogComponent>\n  ) {}\n\n  cancel(): void {\n    this.dialogRef.close(false);\n  }\n\n  confirm(): void {\n    this.dialogRef.close(true);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".button-row {\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  width: 100%;\n}\n\n.warning {\n  margin-bottom: 20px;\n}\n",
                    "styleUrl": "./delete-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h1>Delete {{ data.name }} ?</h1>\n<p>Are you sure?</p>\n<p class=\"warning\">\n  <b>Warning</b>\n  : This operation cannot be reversed.\n</p>\n<div class=\"button-row\">\n  <button mat-raised-button (click)=\"cancel()\">CANCEL</button>\n  <button mat-raised-button (click)=\"confirm()\" color=\"error\" cdkFocusInitial>\n    YES, DELETE\n  </button>\n</div>\n"
        },
        {
            "name": "DeleteNoteDialogComponent",
            "id": "component-DeleteNoteDialogComponent-c7671756d157a44a3a903810a8cd1adb59794079a9057e7dfb1c7a11f57d1e6f7a8c495b1907e2cbe923e1aa80257d7478ef0af7b3f4269e8042dfeb35986e31",
            "file": "src/app/plan/delete-note-dialog/delete-note-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-note-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./delete-note-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disableDeleteButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatLegacyDialogRef as MatDialogRef } from '@angular/material/legacy-dialog';\n\n@Component({\n  selector: 'app-delete-note-dialog',\n  templateUrl: './delete-note-dialog.component.html',\n  styleUrl: './delete-note-dialog.component.scss',\n})\nexport class DeleteNoteDialogComponent {\n  disableDeleteButton = false;\n  constructor(private dialogRef: MatDialogRef<DeleteNoteDialogComponent>) {}\n\n  cancel(): void {\n    this.dialogRef.close(false);\n  }\n\n  deleteNote(): void {\n    this.disableDeleteButton = true;\n    this.dialogRef.close(true);\n  }\n}\n",
            "styleUrl": "./delete-note-dialog.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteNoteDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteNoteDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"delete-note-dialog\">\n  <p class=\"dialog-heading\">\n    <b>Permanently delete note?</b>\n    <br />\n    Are you sure you want to delete this note?\n    <br />\n  </p>\n  <div class=\"button-row\">\n    <button mat-raised-button (click)=\"cancel()\">CANCEL</button>\n    <button\n      mat-raised-button\n      color=\"warn\"\n      (click)=\"deleteNote()\"\n      [disabled]=\"disableDeleteButton\">\n      DELETE\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DetailsComponent",
            "id": "component-DetailsComponent-598c05515c6c2140d01d97e65cbaa4a718a25356094291247627f267c62a011b443284d30d44bd0cebcf94b553947b4607e6bda71fbc1395e3d869711ca9befb",
            "file": "src/app/account/details/details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-details",
            "styleUrls": [
                "./details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMsg",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "FormMessageType",
                    "defaultValue": "FormMessageType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "successMsg",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "user$",
                    "defaultValue": "this.authService.loggedInUser$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AuthService } from '@services';\nimport { FormMessageType } from '../../types';\n\n@Component({\n  selector: 'app-details',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss'],\n})\nexport class DetailsComponent {\n  user$ = this.authService.loggedInUser$;\n  successMsg: string | null = null;\n  errorMsg: string | null = null;\n\n  readonly FormMessageType = FormMessageType;\n\n  constructor(private authService: AuthService) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "app-edit-user-field {\n  margin-bottom: 30px;\n}\n\n// temp\nsection {\n  border: 1px solid black;\n  padding: 20px;\n  margin: 20px 0;\n}\n\napp-form-message {\n  max-width: 306px;\n  display: block;\n}\n",
                    "styleUrl": "./details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-form-message\n  [messageType]=\"FormMessageType.SUCCESS\"\n  *ngIf=\"successMsg\"\n  title=\"Success!\"\n  message=\"{{ successMsg }}\">\n</app-form-message>\n\n<app-form-message\n  [messageType]=\"FormMessageType.ERROR\"\n  *ngIf=\"errorMsg\"\n  title=\"Error!\"\n  message=\"{{ errorMsg }}\">\n</app-form-message>\n\n<app-edit-user-field\n  userField=\"firstName\"\n  [currentValue]=\"(user$ | async)?.firstName || ''\"\n  (saved)=\"successMsg = $event\"\n  (failed)=\"errorMsg = $event\"></app-edit-user-field>\n<app-edit-user-field\n  userField=\"lastName\"\n  [currentValue]=\"(user$ | async)?.lastName || ''\"\n  (saved)=\"successMsg = $event\"\n  (failed)=\"errorMsg = $event\"></app-edit-user-field>\n"
        },
        {
            "name": "EditUserFieldComponent",
            "id": "component-EditUserFieldComponent-aec39d441b22ec35478b5653370d9217cce12391c517d9d86c5263d8ab952d46b6d8d9a817a5eced3b3e6ac077ac95bcaff00ef093cf8ad4c39dbb24996f5a74",
            "file": "src/app/account/edit-user-field/edit-user-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-user-field",
            "styleUrls": [
                "./edit-user-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-user-field.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userField",
                    "defaultValue": "'firstName'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "AvailableUserFields",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "failed",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "saved",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "labels",
                    "defaultValue": "{\n    firstName: 'First Name',\n    lastName: 'Last Name',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<AvailableUserFields | string>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "'view'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "saveForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { User } from '../../types';\nimport { take } from 'rxjs';\nimport { AuthService } from '@services';\n\ntype AvailableUserFields = keyof Pick<User, 'firstName' | 'lastName'>;\ntype State = 'view' | 'editing' | 'saving' | 'error';\n\n@Component({\n  selector: 'app-edit-user-field',\n  templateUrl: './edit-user-field.component.html',\n  styleUrls: ['./edit-user-field.component.scss'],\n})\nexport class EditUserFieldComponent {\n  @Input() currentValue = '';\n  @Input() userField: AvailableUserFields = 'firstName';\n  @Output() saved = new EventEmitter<string>();\n  @Output() failed = new EventEmitter<string>();\n  state: State = 'view';\n  form: FormGroup;\n\n  readonly labels: Record<AvailableUserFields, string> = {\n    firstName: 'First Name',\n    lastName: 'Last Name',\n  };\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService\n  ) {\n    this.form = this.fb.group({\n      name: this.fb.control('', Validators.required),\n    });\n  }\n\n  saveForm() {\n    if (this.form.invalid) return;\n    this.state = 'saving';\n    let user: Partial<User> = {};\n    user[this.userField] = this.form.get('name')?.value;\n\n    this.authService\n      .updateUserInfo(user)\n      .pipe(take(1))\n      .subscribe(\n        (_) => {\n          this.state = 'view';\n          this.saved.emit(this.labels[this.userField] + ' Changed');\n        },\n        (err) => {\n          this.state = 'error';\n          this.failed.emit(err);\n        }\n      );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n\n.btn-spaced {\n  margin-left: 34px;\n}\n\nform {\n  margin-top: 30px;\n}\n",
                    "styleUrl": "./edit-user-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h4 class=\"form-field-title\">{{ labels[userField] }}</h4>\n<p class=\"form-field-p\">\n  Current <span class=\"lowercase\">{{ labels[userField] }}</span\n  >: {{ currentValue }}\n</p>\n\n<form\n  [formGroup]=\"form\"\n  (ngSubmit)=\"saveForm()\"\n  *ngIf=\"state === 'editing' || state === 'saving'\">\n  <div class=\"form-field-label\">\n    {{ labels[userField] }}\n    <div class=\"required-blurb\">required</div>\n  </div>\n  <mat-form-field appearance=\"outline\" class=\"form-field-input\">\n    <input type=\"text\" required formControlName=\"name\" matInput />\n  </mat-form-field>\n  <div>\n    <button\n      mat-flat-button\n      color=\"primary\"\n      [disabled]=\"form.invalid || state === 'saving'\">\n      SAVE\n    </button>\n    <button\n      type=\"button\"\n      mat-stroked-button\n      color=\"secondary\"\n      (click)=\"state = 'view'\"\n      class=\"btn-spaced\">\n      Cancel\n    </button>\n  </div>\n</form>\n\n<div *ngIf=\"state === 'view'\">\n  <button mat-flat-button color=\"primary\" (click)=\"state = 'editing'\">\n    EDIT\n  </button>\n</div>\n"
        },
        {
            "name": "ExploreComponent",
            "id": "component-ExploreComponent-cb41aff009fb821536b063af6c43639ca68eda92063f46a95826ace916f3c89d745460df0adf25303a576d0ebe7be7dce49722552e61ecdef27ea939e45b3ba3",
            "file": "src/app/plan/explore/explore/explore.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-explore",
            "styleUrls": [
                "./explore.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./explore.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "planId",
                    "defaultValue": "this.route.snapshot.paramMap.get('id')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-explore',\n  templateUrl: './explore.component.html',\n  styleUrls: ['./explore.component.scss'],\n})\nexport class ExploreComponent {\n  planId = this.route.snapshot.paramMap.get('id');\n\n  constructor(private route: ActivatedRoute) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./explore.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-map [planId]=\"planId\"></app-map>\n"
        },
        {
            "name": "FieldAlertComponent",
            "id": "component-FieldAlertComponent-80cec64830d141cd44384a1b72286e24b016e3637ec9e76b0ab6130fda9f0d6ab706c657b505e29fa8a7eee1946418d913d64145620158b444f5191ebfc1eadc",
            "file": "src/app/shared/field-alert/field-alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-field-alert",
            "styleUrls": [
                "./field-alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./field-alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "messageType",
                    "defaultValue": "FormMessageType.ERROR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormMessageType",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boxClass",
                    "defaultValue": "{\n    [FormMessageType.SUCCESS]: 'success',\n    [FormMessageType.ERROR]: 'error',\n    [FormMessageType.ALERT]: 'alert',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<FormMessageType | string>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "icons",
                    "defaultValue": "{\n    [FormMessageType.SUCCESS]: 'assets/svg/icons/checkmark-round-fill.svg',\n    [FormMessageType.ERROR]: 'assets/svg/icons/warning-icon-fill.svg',\n    [FormMessageType.ALERT]: 'assets/svg/icons/exclamation-square-fill.svg',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<FormMessageType | string>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormMessageType } from '../../types/data.types';\n\n@Component({\n  selector: 'app-field-alert',\n  templateUrl: './field-alert.component.html',\n  styleUrls: ['./field-alert.component.scss'],\n})\nexport class FieldAlertComponent {\n  @Input() message!: string | null;\n  @Input() title!: string;\n  @Input() messageType: FormMessageType = FormMessageType.ERROR;\n\n  icons: Record<FormMessageType, string> = {\n    [FormMessageType.SUCCESS]: 'assets/svg/icons/checkmark-round-fill.svg',\n    [FormMessageType.ERROR]: 'assets/svg/icons/warning-icon-fill.svg',\n    [FormMessageType.ALERT]: 'assets/svg/icons/exclamation-square-fill.svg',\n  };\n\n  boxClass: Record<FormMessageType, string> = {\n    [FormMessageType.SUCCESS]: 'success',\n    [FormMessageType.ERROR]: 'error',\n    [FormMessageType.ALERT]: 'alert',\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_mixins';\n@import '../../../styles/_colors';\n\n.field-alert-box {\n  position: absolute;\n  padding: 12px 10px 12px 10px;\n  background: white;\n  width: 255px;\n  margin-left: 1em;\n  margin-top: -5px;\n  border-radius: 5px;\n  z-index: 10000;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  border-width: 1px;\n  border-style: solid;\n  border-color: $color-error;\n  box-shadow: 3px 3px 10px 0px rgba(0, 0, 0, 0.5);\n  /* CSS trick for pointer on top */\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    bottom: 100%;\n    left: 19px;\n    border: 16px solid transparent;\n    border-bottom-color: $color-error;\n  }\n\n  &::after {\n    left: 21px;\n    border: 14px solid transparent;\n    border-bottom-color: white;\n  }\n}\n\n.field-alert-box.alert {\n  border-color: black;\n\n  &::before,\n  &::after {\n    border-bottom-color: black;\n  }\n\n  &::after {\n    border-bottom-color: white;\n  }\n}\n\n.field-alert-box.success {\n  border-color: $color-brand-teal;\n\n  &::before,\n  &::after {\n    border-bottom-color: $color-brand-teal;\n  }\n\n  &::after {\n    border-bottom-color: white;\n  }\n}\n\n.field-alert-header {\n  height: 1em;\n  width: 100%;\n}\n\n.field-alert-title {\n  text-transform: uppercase;\n  color: $color-error;\n}\n\n.field-alert-box.alert .title-text,\n.field-alert-box.success .title-text {\n  color: $color-dark-gray;\n}\n\n.field-alert-icon {\n  float: left;\n  margin-right: 8px;\n}\n\n.title-text {\n  @include top-level-label();\n  float: left;\n}\n\n.field-alert-box .field-alert-details {\n  margin-top: 2em;\n  width: 100%;\n}\n",
                    "styleUrl": "./field-alert.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"field-alert-box\" [ngClass]=\"boxClass[messageType]\">\n  <div class=\"field-alert-header\">\n    <div class=\"field-alert-title\">\n      <img\n        [src]=\"icons[messageType]\"\n        alt=\"field-alert-icon\"\n        class=\"field-alert-icon\" />\n      <p class=\"title-text\">{{ title }}</p>\n    </div>\n  </div>\n  <div class=\"field-alert-details\">\n    {{ message }}\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "FileUploaderComponent",
            "id": "component-FileUploaderComponent-d511f4064a16e33eedf3d3ec69939bed2707cc2ef15b93dbd47e2ff7a03996005a3f30625856322702a963ac10a22c4d4b0d79fbb6978040cdb14d5aa3dee5b9",
            "file": "src/app/shared/file-uploader/file-uploader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-file-uploader",
            "styleUrls": [
                "./file-uploader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-uploader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "requiredFileType",
                    "defaultValue": "'application/zip'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fileEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFile uploaded event.",
                    "description": "<p>File uploaded event.</p>\n",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "file",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "fileName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "emitEvent",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits a file upload event to the parent component.\n",
                    "description": "<p>Emits a file upload event to the parent component.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileUploaded",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-file-uploader',\n  templateUrl: './file-uploader.component.html',\n  styleUrls: ['./file-uploader.component.scss'],\n})\nexport class FileUploaderComponent {\n  /** File uploaded event. */\n  @Output() fileEvent = new EventEmitter<any>();\n\n  fileName = '';\n  file: File | null = null;\n\n  @Input()\n  requiredFileType: string = 'application/zip';\n\n  onFileUploaded(event: Event) {\n    const target = event.target as HTMLInputElement;\n    const files = target.files as FileList;\n    if (target.files) {\n      this.file = files.item(0);\n      this.fileName = this.file?.name || '';\n      this.emitEvent(this.file!);\n    }\n  }\n\n  /**\n   * Emits a file upload event to the parent component.\n   */\n  private emitEvent(file: File) {\n    this.fileEvent.emit({ type: 'area_upload', value: file });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// The plain file input element is hidden because it's hard to style\n.file-input {\n  display: none;\n}\n\n.file-uploader-wrapper {\n  align-items: flex-start;\n  background-color: #ffffff;\n  display: flex;\n  flex-direction: column;\n  height: 120px;\n  padding: 0px 20px 0px 20px;\n  z-index: 2;\n}\n\n.title {\n  color: #575757;\n  font-size: 13px;\n  font-weight: 500;\n  padding: 10px 0px 10px 0px;\n}\n\n.upload-outline {\n  align-items: center;\n  border-radius: 4px;\n  border: 1px solid #bdbdbd;\n  color: #575757;\n  display: flex;\n  height: 36px;\n  padding: 0px 0px 0px 10px;\n  width: 240px;\n}\n\n.upload-button {\n  float: right;\n  margin-left: auto;\n}\n\n.caption {\n  color: #575757;\n  font-size: 12px;\n  font-weight: 400;\n}\n",
                    "styleUrl": "./file-uploader.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"file-uploader-wrapper mat-elevation-z4\">\n  <div class=\"title\">Upload area shape file</div>\n  <input\n    type=\"file\"\n    class=\"file-input\"\n    [accept]=\"requiredFileType\"\n    (change)=\"onFileUploaded($event)\"\n    #fileUpload />\n  <div class=\"upload-outline\">\n    <mat-icon *ngIf=\"!file\">upload</mat-icon>\n    {{ fileName || 'Select a file' }}\n    <button mat-flat-button class=\"upload-button\" (click)=\"fileUpload.click()\">\n      UPLOAD\n    </button>\n  </div>\n  <span class=\"caption\">only .zip of shapefile allowed</span>\n</div>\n"
        },
        {
            "name": "ForgetPasswordComponent",
            "id": "component-ForgetPasswordComponent-363dec30f7ee8df5885ca2275cf13a544d9b3dba7f1fa418554b32b8cb23017d8712af8aadffafd9ab494b63590fe012d36b8706fbd5f540f4ec5e6f88625361",
            "file": "src/app/forget-password/forget-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forget-password",
            "styleUrls": [
                "./forget-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forget-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accountError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "emailError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "FormMessageType",
                    "defaultValue": "FormMessageType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "RESET_ERROR",
                    "defaultValue": "signInMessages.MSG_RESET_PASSWORD_ERROR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "resetText",
                    "defaultValue": "`\n    Enter the email address associated with your account, and we'll email you a link to reset your password.\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkEmailErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearEmailErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '@services';\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\nimport { ResetPasswordDialogComponent } from './reset-password-dialog/reset_password_dialog.component';\nimport * as signInMessages from '../shared/constants';\nimport { EMAIL_VALIDATION_REGEX } from '../../app/shared/constants';\nimport { FormMessageType } from '../types/data.types';\n\n@Component({\n  selector: 'app-forget-password',\n  templateUrl: './forget-password.component.html',\n  styleUrls: ['./forget-password.component.scss'],\n})\nexport class ForgetPasswordComponent {\n  readonly resetText: string = `\n    Enter the email address associated with your account, and we'll email you a link to reset your password.\n  `;\n  protected readonly RESET_ERROR = signInMessages.MSG_RESET_PASSWORD_ERROR;\n  protected accountError = '';\n  protected emailError: string = '';\n  form: FormGroup;\n  FormMessageType = FormMessageType;\n\n  constructor(\n    private authService: AuthService,\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private readonly dialog: MatDialog\n  ) {\n    this.form = this.formBuilder.group({\n      email: this.formBuilder.control('', [\n        Validators.required,\n        Validators.pattern(EMAIL_VALIDATION_REGEX),\n      ]),\n    });\n  }\n\n  checkEmailErrors() {\n    if (this.form.controls['email'].errors !== null) {\n      this.emailError = 'Email must be in a proper format.';\n    }\n  }\n  clearEmailErrors() {\n    if (this.emailError !== '') {\n      this.emailError = '';\n    }\n  }\n\n  submit() {\n    if (!this.form.valid) return;\n\n    const email: string = this.form.get('email')?.value;\n    this.authService.sendPasswordResetEmail(email).subscribe({\n      next: () => {\n        this.dialog.open(ResetPasswordDialogComponent);\n      },\n      error: (err) => {\n        this.accountError = this.RESET_ERROR;\n      },\n    });\n  }\n\n  cancel() {\n    this.router.navigate(['login']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/colors';\n@import '../../styles/mixins';\n@import '../../styles/forms';\n\n.forget-password-root {\n  display: flex;\n  height: 100%;\n}\n\n.forget-password-container {\n  background-image: url('/assets/jpg/planscape-background.jpg');\n  background-repeat: no-repeat;\n  background-size: cover;\n  display: flex;\n  width: 50%;\n}\n\n.forget-password-subcontainer {\n  flex-direction: column;\n  margin: auto;\n  height: 400px;\n  width: 500px;\n  padding: 20px 0px 20px 0px;\n  gap: 20px;\n  display: flex;\n  margin-top: 180px;\n}\n\n.planscape-white-logo {\n  margin: auto;\n  height: 42px;\n  width: 246px;\n}\n\n.forget-password-card {\n  align-items: stretch;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: auto;\n  padding: 40px 60px 40px 60px;\n  width: 300px;\n  height: 330px;\n  border: 1px $color-original-purple-50pct solid;\n  border-radius: 8px;\n  box-shadow: 0px 4px 4px 0px #00000040;\n}\n\nh1 {\n  @include h1();\n\n  &.title {\n    margin-bottom: 30px;\n    text-align: center;\n    color: $color-dark-gray;\n  }\n}\n\n/*standard label*/\n.standard-label {\n  @include standard-input-label();\n  color: $color-dark-gray;\n}\n\n.required-blurb {\n  @include italic-sm();\n}\n\nmat-form-field {\n  width: 100%;\n}\n\n.reset-form-buttons {\n  @include button-text;\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  margin-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  width: 80%;\n}\n\n.cancel-button {\n  background-color: white;\n}\n\n.info-text-container {\n  background-color: $color-soft-purple;\n  width: 50%;\n}\n",
                    "styleUrl": "./forget-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"forget-password-root\">\n  <div class=\"forget-password-container\">\n    <div class=\"forget-password-subcontainer\">\n      <div class=\"signin-card-logo\">\n        <div class=\"planscape-white-logo\">\n          <img src=\"assets/svg/planscape-white-logo.svg\" alt=\"planscape logo\" />\n        </div>\n      </div>\n      <div class=\"forget-password-card\">\n        <h1 class=\"title\">Reset Password</h1>\n\n        <form [formGroup]=\"form\" (ngSubmit)=\"submit()\" class=\"email-form\">\n          <mat-label class=\"form-field-label\"\n            >Email\n            <span class=\"required-blurb\">required</span>\n          </mat-label>\n          <mat-form-field class=\"form-field-input\" appearance=\"outline\">\n            <input\n              type=\"text\"\n              required\n              formControlName=\"email\"\n              matInput\n              (blur)=\"checkEmailErrors()\"\n              (keyup)=\"clearEmailErrors()\" />\n          </mat-form-field>\n\n          <app-field-alert\n            *ngIf=\"\n              this.emailError !== '' &&\n              this.form.controls['email'].errors !== null\n                ? true\n                : false\n            \"\n            message=\"{{ emailError }}\"\n            title=\"email error\"></app-field-alert>\n\n          <div class=\"reset-form-buttons\">\n            <button\n              mat-flat-button\n              color=\"primary\"\n              type=\"submit\"\n              [disabled]=\"!form.valid\"\n              class=\"send-email-button\">\n              SEND EMAIL\n            </button>\n\n            <button\n              mat-stroked-button\n              color=\"secondary\"\n              type=\"cancel\"\n              class=\"cancel-button\"\n              (click)=\"cancel()\">\n              Cancel\n            </button>\n          </div>\n\n          <app-form-message\n            [messageType]=\"FormMessageType.ERROR\"\n            *ngIf=\"accountError\"\n            title=\"Password Reset Error\"\n            message=\"{{ accountError }}\">\n          </app-form-message>\n        </form>\n      </div>\n    </div>\n  </div>\n  <app-credits-blurb></app-credits-blurb>\n\n  <div class=\"info-text-container\">\n    <app-planscape-about></app-planscape-about>\n  </div>\n</div>\n"
        },
        {
            "name": "FormMessageBoxComponent",
            "id": "component-FormMessageBoxComponent-de35861eb0bf35b599f4c7f26a627cae409b862cb6fd7868396f95f8cc4e740dbbec4b9e5b83cdd8bc5065a0d6e5bf3e325f18b8eb13b571a125ce2f1fd83c17",
            "file": "src/app/shared/form-message-box/form-message-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-message",
            "styleUrls": [
                "./form-message-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-message-box.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "messageType",
                    "defaultValue": "FormMessageType.ALERT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormMessageType",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boxClass",
                    "defaultValue": "{\n    [FormMessageType.SUCCESS]: 'success',\n    [FormMessageType.ERROR]: 'error',\n    [FormMessageType.ALERT]: 'alert',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<FormMessageType | string>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "icons",
                    "defaultValue": "{\n    [FormMessageType.SUCCESS]: 'assets/svg/icons/checkmark-round-fill.svg',\n    [FormMessageType.ERROR]: 'assets/svg/icons/warning-icon-fill.svg',\n    [FormMessageType.ALERT]: 'assets/svg/icons/exclamation-square-fill.svg',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<FormMessageType | string>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormMessageType } from '../../types/data.types';\n\n@Component({\n  selector: 'app-form-message',\n  templateUrl: './form-message-box.component.html',\n  styleUrls: ['./form-message-box.component.scss'],\n})\nexport class FormMessageBoxComponent {\n  @Input() title?: string | null;\n  @Input() message?: string | null;\n  @Input() messageType: FormMessageType = FormMessageType.ALERT;\n\n  icons: Record<FormMessageType, string> = {\n    [FormMessageType.SUCCESS]: 'assets/svg/icons/checkmark-round-fill.svg',\n    [FormMessageType.ERROR]: 'assets/svg/icons/warning-icon-fill.svg',\n    [FormMessageType.ALERT]: 'assets/svg/icons/exclamation-square-fill.svg',\n  };\n\n  boxClass: Record<FormMessageType, string> = {\n    [FormMessageType.SUCCESS]: 'success',\n    [FormMessageType.ERROR]: 'error',\n    [FormMessageType.ALERT]: 'alert',\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/colors';\n@import '../../../styles/mixins';\n\n.message-box {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  padding: 12px 10px 12px 10px;\n  background-color: $color-soft-purple-30pct;\n  margin-top: 5px;\n  margin-bottom: 1em;\n  border-radius: 2px;\n  border: 1px solid $color-dark-gray;\n}\n\n.message-box.success {\n  border-color: $color-brand-teal;\n}\n\n.message-box.error {\n  border-color: $color-error;\n}\n\n.message-box.inline {\n  flex-direction: row;\n\n  .message-icon {\n    margin-top: 4px;\n  }\n\n}\n\n.message-icon {\n  float: left;\n  margin-right: 8px;\n}\n\n.message-title {\n  @include top-level-label();\n  text-transform: uppercase;\n  float: left;\n  text-align: left;\n  vertical-align: middle;\n  line-height: 20px;\n  color: $color-black;\n}\n\n.message-box.error .message-title {\n  color: $color-error;\n}\n\n.message-details {\n  text-align: left;\n  vertical-align: middle;\n  color: $color-dark-gray;\n}\n",
                    "styleUrl": "./form-message-box.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  class=\"message-box {{ boxClass[messageType] }}\"\n  [ngClass]=\"{ inline: !title }\">\n  <div class=\"title\">\n    <img [src]=\"icons[messageType]\" alt=\"message-icon\" class=\"message-icon\" />\n    <p class=\"message-title\">{{ title }}</p>\n  </div>\n  <div class=\"message-details\">\n    {{ message }}\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "GoalOverlayComponent",
            "id": "component-GoalOverlayComponent-4600bf21859f6fb7f89fde4bc1ff28a277f44276164f1d0e009d078667f673ac04279d466e31f46da213f04c6864bcbb6b9637f71d825f3ba959788be7ff4f9b",
            "file": "src/app/plan/create-scenarios/goal-overlay/goal-overlay.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-goal-overlay",
            "styleUrls": [
                "./goal-overlay.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./goal-overlay.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "goal$",
                    "defaultValue": "this.service.selectedQuestion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { GoalOverlayService } from './goal-overlay.service';\n\n@Component({\n  selector: 'app-goal-overlay',\n  templateUrl: './goal-overlay.component.html',\n  styleUrls: ['./goal-overlay.component.scss'],\n})\nexport class GoalOverlayComponent {\n  goal$ = this.service.selectedQuestion$;\n\n  constructor(private service: GoalOverlayService) {}\n\n  close() {\n    this.service.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/colors\";\n@import \"../../../../styles/mixins\";\n\n:host {\n  display: block;\n  max-width: 540px;\n  position: absolute;\n  top: 110px;\n  left: 0;\n  z-index: 200;\n  margin: 0 8px;\n\n  @media screen and (max-width: 800px) {\n    right: initial;\n    top: initial;\n    left: 0;\n    bottom: 0;\n    position: fixed;\n    max-width: initial;\n    width: 100%;\n    margin: 0;\n  }\n\n}\n\nh4 {\n  margin: 0;\n}\n\nheader {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 11px 16px 11px 24px;\n  border-bottom: 1px solid $color-soft-gray;\n}\n\nmat-card {\n  padding: 0;\n}\n\nsection {\n  padding: 24px;\n}\n\n\np {\n  margin-bottom: 16px;\n}\n\np:last-child {\n  margin-bottom: 0;\n}\n",
                    "styleUrl": "./goal-overlay.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "GoalOverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "GoalOverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-card *ngIf=\"goal$ | async as goal\">\n  <header>\n    <h4>{{ goal?.short_question_text }}</h4>\n    <button mat-icon-button (click)=\"close()\" aria-label=\"close\">\n      <mat-icon class=\"close-btn\">close</mat-icon>\n    </button>\n  </header>\n  <section>\n    <p>{{ goal?.long_question_text }}</p>\n    <p *ngFor=\"let p of goal?.description\" [innerHTML]=\"p\"></p>\n    <p>\n      For more information, see the\n      <a\n        href=\"https://www.planscape.org/documentation/user-guide/#treatment\"\n        target=\"_blank\"\n        >User Guide</a\n      >.\n    </p>\n  </section>\n</mat-card>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-2c955a2b0e4ca114da364e1116d6a62899486d08371fd435119b2f1ebecb012e90d09aad6d74e99a582c212e518083be83b6a2858007d837bb61924ac8d722db",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loggedIn$",
                    "defaultValue": "this.authService.loggedInStatus$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AuthService } from '@services';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent {\n  loggedIn$ = this.authService.loggedInStatus$;\n\n  constructor(private authService: AuthService) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  box-sizing: border-box;\n  background-image: url('/assets/png/planscape_home_bg.png');\n  background-size: cover;\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-welcome *ngIf=\"(loggedIn$ | async) === false\"></app-welcome>\n<app-planning-areas *ngIf=\"loggedIn$ | async\"></app-planning-areas>\n"
        },
        {
            "name": "HorizonalCardComponent",
            "id": "component-HorizonalCardComponent-3e0d762f51ec3da254f6ff270a1973415b677ee940cec21ce78bc7a562f083e48ae36c58e230b8e588e7904c1342234994a837f70a84b6dd3df76d2f626af29b",
            "file": "src/app/home/horizonal-card/horizonal-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-horizonal-card",
            "styleUrls": [
                "./horizonal-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./horizonal-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "content",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconsrc",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "outboundLink",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-horizonal-card',\n  templateUrl: './horizonal-card.component.html',\n  styleUrls: ['./horizonal-card.component.scss'],\n})\nexport class HorizonalCardComponent {\n  @Input() title: string = '';\n  @Input() content: string = '';\n  @Input() iconsrc: string = '';\n  @Input() outboundLink: string = '';\n\n  constructor() {}\n\n  handleClick() {\n    window.open(this.outboundLink, '_blank');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/colors';\n@import '../../../styles/mixins';\n\n.horizontal-card {\n  margin-left: auto;\n  margin-right: auto;\n  border: 1px solid $color-soft-gray;\n  width: 80%;\n  height: 120px;\n  box-shadow: 0px 4px 4px 0px #00000017;\n  display: flex;\n  flex-direction: row;\n  background-color: white;\n\n  &:hover {\n    border: 1px solid $color-dark-gray;\n  }\n}\n\n.icon-box {\n  display: flex;\n  align-content: center;\n  justify-content: center;\n  width: 80px;\n  height: 80px;\n  margin: 10px;\n  padding: 10px;\n  background-color: $color-soft-purple;\n}\n\n.icon-box-icon {\n  margin: auto;\n}\n\n.card-content {\n  padding: 20px 10px 20px 10px;\n  gap: 20px;\n  width: 380px;\n  float: left;\n}\n\n.title {\n  @include top-level-label();\n  text-transform: uppercase;\n  color: $color-dark-gray;\n}\n\n.details {\n  padding-top: 1em;\n}\n\n.small-paragraph {\n  color: $color-md-gray;\n}\n",
                    "styleUrl": "./horizonal-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "extends": [],
            "templateData": "<div class=\"horizontal-card\" (click)=\"handleClick()\">\n  <div class=\"icon-box\">\n    <img [src]=\"iconsrc\" class=\"icon-box-icon\" />\n    <ng-content class=\"icon-box-icon\"></ng-content>\n  </div>\n  <div class=\"card-content\">\n    <div class=\"title\">{{ title }}</div>\n    <div class=\"details\">\n      <p class=\"small\">{{ content }}</p>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "IdentifyProjectAreasComponent",
            "id": "component-IdentifyProjectAreasComponent-051b5192bbdcc1f6a48d999d9c405605e8462be0d91d09a67581fe93755117dd5f56aea0453d41cea00597a0948f187183e99cbc0b3be8ad46a998a919396c30",
            "file": "src/app/plan/create-scenarios/identify-project-areas/identify-project-areas.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-identify-project-areas",
            "styleUrls": [
                "./identify-project-areas.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./identify-project-areas.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "formBackEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "formNextEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filename",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showErrorText",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showSuccessText",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "showUploader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "loadFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUpload a shapefile and add it to the form.",
                    "description": "<p>Upload a shapefile and add it to the form.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateFormRequirements",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUpdates validators for the form based on radio button selection.\n If the \"generate areas\" radio button is selected, uploading an area isn't required.\n If the \"upload area\" radio button is selected, uploading an area is required.\n",
                    "description": "<p>Updates validators for the form based on radio button selection.\n If the &quot;generate areas&quot; radio button is selected, uploading an area isn&#39;t required.\n If the &quot;upload area&quot; radio button is selected, uploading an area is required.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FormGroup, Validators } from '@angular/forms';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport * as shp from 'shpjs';\n\n@Component({\n  selector: 'app-identify-project-areas',\n  templateUrl: './identify-project-areas.component.html',\n  styleUrls: ['./identify-project-areas.component.scss'],\n})\nexport class IdentifyProjectAreasComponent {\n  @Input() formGroup: FormGroup | undefined;\n  @Output() formNextEvent = new EventEmitter<void>();\n  @Output() formBackEvent = new EventEmitter<void>();\n\n  filename: string = '';\n  showErrorText: boolean = false;\n  showSuccessText: boolean = false;\n  showUploader: boolean = false;\n\n  /** Updates validators for the form based on radio button selection.\n   *  If the \"generate areas\" radio button is selected, uploading an area isn't required.\n   *  If the \"upload area\" radio button is selected, uploading an area is required.\n   */\n  validateFormRequirements() {\n    const generateAreas = this.formGroup?.get('generateAreas');\n    const uploadedArea = this.formGroup?.get('uploadedArea');\n    if (generateAreas?.value) {\n      uploadedArea?.clearValidators();\n      uploadedArea?.updateValueAndValidity();\n    } else {\n      uploadedArea?.setValidators(Validators.required);\n      uploadedArea?.updateValueAndValidity();\n    }\n  }\n\n  /** Upload a shapefile and add it to the form. */\n  async loadFile(event: { type: string; value: File }) {\n    const file = event.value;\n    if (file) {\n      const reader = new FileReader();\n      const fileAsArrayBuffer: ArrayBuffer = await new Promise((resolve) => {\n        reader.onload = () => {\n          resolve(reader.result as ArrayBuffer);\n        };\n        reader.readAsArrayBuffer(file);\n      });\n      try {\n        const geojson = (await shp.parseZip(\n          fileAsArrayBuffer\n        )) as GeoJSON.GeoJSON;\n        if (geojson.type == 'FeatureCollection') {\n          this.formGroup?.get('uploadedArea')?.setValue(geojson);\n          this.showUploader = false;\n          this.showErrorText = false;\n          this.showSuccessText = true;\n          this.filename = file.name;\n          this.formGroup?.get('generateAreas')?.setValue(false);\n        } else {\n          this.showErrorText = true;\n        }\n      } catch (e) {\n        this.showErrorText = true;\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: auto;\n\n  mat-radio-group mat-radio-button {\n    margin-bottom: 28px;\n\n    button {\n      margin-left: 12px;\n    }\n  }\n\n  mat-radio-group mat-radio-button:last-child {\n    margin-bottom: 0px;\n  }\n}\n\n.form-content {\n  margin-top: 10px;\n  border: 1px #a4aae0 solid;\n  border-radius: 10px;\n  display: inline-block;\n  height: auto;\n  width: auto;\n  box-shadow: 0px 3px 0px 0px #aeb0b8;\n  background-color: white;\n  padding-bottom: 5px;\n}\n\n.form-label {\n  display: block;\n  font-size: 15px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  margin-top: 10px;\n  margin-right: 10px;\n}\n\n.top-label {\n  flex-direction: row;\n  display: inline-flex;\n  align-items: center;\n}\n\n.success-text {\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  font-weight: 400;\n  line-height: 20px;\n}\n\n.success-icon {\n  color: #00c752;\n  margin-right: 4px;\n}\n\n.flex-row {\n  display: flex;\n}\n\n.flex-column {\n  display: flex;\n  margin-left: 20px;\n  flex-direction: column;\n}\n\n.form .mat-radio-group .mat-radio-button {\n  margin-bottom: 1px;\n}\n\n:host {\n  ::ng-deep .mat-radio-label {\n    width: fit-content;\n  }\n}\n\n\n",
                    "styleUrl": "./identify-project-areas.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\n  <form [formGroup]=\"formGroup!\" class=\"form\">\n    <div class=\"form-content\">\n      <mat-radio-group\n        formControlName=\"generateAreas\"\n        (change)=\"validateFormRequirements()\"\n        class=\"flex-column\">\n        <div class=\"top-label\">\n          <label class=\"form-label\">PROJECT AREAS</label>\n        </div>\n        <mat-radio-button [color]=\"'primary'\" [value]=\"true\">\n          Define them for me\n        </mat-radio-button>\n        <mat-radio-button [color]=\"'primary'\" [value]=\"false\">\n          Upload exising areas\n          <button\n            mat-stroked-button\n            color=\"primary\"\n            (click)=\"showUploader = true\">\n            <mat-icon color=\"primary\">upload</mat-icon>\n            UPLOAD SHAPE FILES\n          </button>\n        </mat-radio-button>\n      </mat-radio-group>\n\n      <!-- File uploader -->\n      <app-file-uploader\n        *ngIf=\"showUploader\"\n        class=\"file-uploader\"\n        requiredFileType=\"application/zip\"\n        (fileEvent)=\"loadFile($event)\"></app-file-uploader>\n\n      <mat-error *ngIf=\"showErrorText\">\n        [Error] Not a valid shapefile!\n      </mat-error>\n      <div class=\"success-text\" *ngIf=\"showSuccessText\">\n        <mat-icon class=\"success-icon\">check_circle</mat-icon>\n        {{ filename }} uploaded\n      </div>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "InfoCardComponent",
            "id": "component-InfoCardComponent-cae729d1282a6cfdf0b16b4d78dab22f4a1c9c0c09ce9f9865879d9f769808f2ac5528e8407877f189c30cfa5e1502a6c8c8475d73ec1797014e3a0af539d80f",
            "file": "src/app/signup/info-card/info-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info-card",
            "styleUrls": [
                "./info-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./info-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-info-card',\n  templateUrl: './info-card.component.html',\n  styleUrls: ['./info-card.component.scss'],\n})\nexport class InfoCardComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/colors';\n@import '../../../styles/mixins';\n\n:host {\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 16%;\n}\n\n.info-card {\n  background-color: white;\n  border-radius: 8px;\n  border: 1px $color-original-purple solid;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  justify-content: center;\n  padding: 40px 40px 30px 40px;\n  gap: 8px;\n}\n.list-icon {\n  height: 20px;\n  width: 20px;\n  padding-right: 4px;\n  float: left;\n}\n\nh3 {\n  @include h3();\n  color: $color-dark-gray;\n}\n\n/* regular paragraph */\n.listed-text {\n  @include regular-paragraph();\n  float: left;\n  color: $color-dark-gray;\n}\n\n.caveat {\n  font-size: 16px;\n  line-height: 26px;\n  font-weight: 400;\n  color: $color-md-gray;\n}\n\n.conditions-link {\n  @include standard-link();\n  color: $color-standard-blue;\n}\n",
                    "styleUrl": "./info-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "templateData": "<div class=\"info-card\">\n  <h3>With a Planscape account, you can:</h3>\n\n  <p class=\"listed-text\">\n    <img\n      src=\"assets/svg/icons/checkbox.svg\"\n      alt=\"checkbox icon\"\n      class=\"list-icon\" />\n    Create plans, scenarios and project areas\n  </p>\n\n  <p class=\"listed-text\">\n    <img\n      src=\"assets/svg/icons/checkbox.svg\"\n      alt=\"checkbox icon\"\n      class=\"list-icon\" />\n    Test different land management options and view outcomes\n  </p>\n\n  <p class=\"listed-text\">\n    <img\n      src=\"assets/svg/icons/checkbox.svg\"\n      alt=\"checkbox icon\"\n      class=\"list-icon\" />\n    Save planning areas\n  </p>\n\n  <p class=\"listed-text\">\n    <img\n      src=\"assets/svg/icons/checkbox.svg\"\n      alt=\"checkbox icon\"\n      class=\"list-icon\" />\n    Download shapefiles and metadata from your plans\n  </p>\n\n  <p class=\"listed-text\">\n    <img\n      src=\"assets/svg/icons/checkbox.svg\"\n      alt=\"checkbox icon\"\n      class=\"list-icon\" />\n    Share work with collaborators\n  </p>\n\n  <h3>As a guest user, you can:</h3>\n  <p class=\"listed-text\">\n    <img\n      src=\"assets/svg/icons/checkbox.svg\"\n      alt=\"checkbox icon\"\n      class=\"list-icon\" />\n    Explore data from the Regional Resource Kits\n  </p>\n  <p class=\"listed-text\">\n    <img\n      src=\"assets/svg/icons/checkbox.svg\"\n      alt=\"checkbox icon\"\n      class=\"list-icon\" />\n    View publicly available plans and scenarios*\n  </p>\n  <p class=\"caveat\">*Accessible only via direct links</p>\n  <p class=\"listed-text\">\n    Review Planscape\n    <a\n      class=\"conditions-link\"\n      href=\"https://www.planscape.org/conditions-of-use/\"\n      target=\"_blank\"\n      >Conditions of Use</a\n    >\n  </p>\n</div>\n"
        },
        {
            "name": "InvalidLinkDialogComponent",
            "id": "component-InvalidLinkDialogComponent-80cee01e91a65fa5e8e33ea3f87e23dfe8c693debefa34d997479483a83e965d5b7d6c1ae5f951d6da9cf3857201c8edcbc50be16bef4463077b5a6c101e6803",
            "file": "src/app/map/invalid-link-dialog/invalid-link-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invalid-link-dialog",
            "styleUrls": [
                "./invalid-link-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./invalid-link-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatLegacyDialogRef as MatDialogRef } from '@angular/material/legacy-dialog';\n\n@Component({\n  selector: 'app-invalid-link-dialog',\n  templateUrl: './invalid-link-dialog.component.html',\n  styleUrls: ['./invalid-link-dialog.component.scss'],\n})\nexport class InvalidLinkDialogComponent {\n  constructor(private dialogRef: MatDialogRef<InvalidLinkDialogComponent>) {}\n\n  cancel(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/mixins\";\n@import \"../../../styles/colors\";\n\n:host {\n  display: block;\n  max-width: 535px;\n}\n\nh4 {\n  text-align: center;\n  margin-top: 16px;\n  margin-bottom: 8px;\n}\n\n.error-icon {\n  border-radius: 50px;\n  background: rgba(213, 0, 0, 0.20);\n  color: $color-error;\n  width: 44px;\n  height: 44px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: auto;\n}\n\np {\n  text-align: center;\n}\n\n.close {\n  margin: 36px auto 0;\n  display: block;\n\n}\n",
                    "styleUrl": "./invalid-link-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<InvalidLinkDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<InvalidLinkDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"error-icon\">\n  <mat-icon class=\"close-btn\">close</mat-icon>\n</div>\n\n<h4>Invalid Link</h4>\n<p>\n  The link you are trying to accessed is invalid or may have expired. To access\n  the map, please contact the person who shared the link with you.\n</p>\n\n<button\n  mat-flat-button\n  type=\"button\"\n  (click)=\"cancel()\"\n  color=\"primary\"\n  class=\"close\">\n  CLOSE\n</button>\n"
        },
        {
            "name": "LayerInfoCardComponent",
            "id": "component-LayerInfoCardComponent-72d8bb04bf0bed816ad964b439a6dd0b24c8d3618f94b29ecde01ac7211a3b96a335e4059a03e552cf82450e017e6d851224b5b260277d33977312623058d33c",
            "file": "src/app/map/layer-info-card/layer-info-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layer-info-card",
            "styleUrls": [
                "./layer-info-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layer-info-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "dataLayerConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "DataLayerConfig | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "computeMinMax",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dataUnits",
                    "args": [],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasDataProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasDownloadLink",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasMinMax",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasReferenceLink",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasSource",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { DataLayerConfig, MetricConfig } from 'src/app/types';\n\n@Component({\n  selector: 'app-layer-info-card',\n  templateUrl: './layer-info-card.component.html',\n  styleUrls: ['./layer-info-card.component.scss'],\n})\nexport class LayerInfoCardComponent {\n  @Input() dataLayerConfig?: DataLayerConfig | null;\n\n  hasDataProvider(): boolean {\n    return !!this.dataLayerConfig?.data_provider;\n  }\n\n  hasDownloadLink(): boolean {\n    return !!this.dataLayerConfig?.data_download_link;\n  }\n\n  hasMinMax(): boolean {\n    return (\n      this.dataLayerConfig?.min_value != undefined &&\n      this.dataLayerConfig?.max_value != undefined\n    );\n  }\n\n  hasReferenceLink(): boolean {\n    return !!this.dataLayerConfig?.reference_link;\n  }\n\n  hasSource(): boolean {\n    return !!this.dataLayerConfig?.source && !!this.dataLayerConfig.source_link;\n  }\n\n  computeMinMax(): number[] {\n    if (this.dataLayerConfig?.normalized) {\n      return [-1, 1];\n    } else {\n      return [\n        this.dataLayerConfig?.min_value!,\n        this.dataLayerConfig?.max_value!,\n      ];\n    }\n  }\n\n  dataUnits(): string | undefined {\n    if (this.dataLayerConfig?.normalized) {\n      return 'Normalized';\n    } else {\n      return (this.dataLayerConfig as MetricConfig)?.data_units;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".layer-info-card {\n  padding: 12px;\n}\n",
                    "styleUrl": "./layer-info-card.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"layer-info-card\">\n  <h4>{{ dataLayerConfig?.display_name }}</h4>\n\n  <p *ngIf=\"dataUnits()\">DATA UNITS: {{ dataUnits() }}</p>\n\n  <p *ngIf=\"hasMinMax()\">VALUE RANGE: {{ computeMinMax() }}</p>\n\n  <p>\n    <span *ngIf=\"hasSource()\">\n      SOURCE:\n      <a [href]=\"dataLayerConfig?.source_link\" target=\"_blank\">\n        {{ dataLayerConfig?.source }}\n      </a>\n    </span>\n  </p>\n\n  <div *ngIf=\"hasDownloadLink()\">\n    <div *ngIf=\"hasDataProvider()\">\n      <p>PROVIDER: {{ dataLayerConfig?.data_provider }}</p>\n    </div>\n    <p>\n      DATA:\n      <a [href]=\"dataLayerConfig?.data_download_link\" target=\"_blank\">\n        Download\n      </a>\n    </p>\n  </div>\n\n  <a\n    mat-raised-button\n    color=\"primary\"\n    *ngIf=\"hasReferenceLink()\"\n    [href]=\"dataLayerConfig?.reference_link\"\n    target=\"_blank\">\n    Learn more\n  </a>\n</div>\n"
        },
        {
            "name": "LearnMoreComponent",
            "id": "component-LearnMoreComponent-282a3be52a705ffe1f72772b47ccf0d4d64ebf8d97dcfb8b019594478ac461168d0fd7fe455bdb8423e09a47a489fea9c65eae10b705de2e33cf051868db68b7",
            "file": "src/app/home/learn-more/learn-more.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-learn-more",
            "styleUrls": [
                "./learn-more.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./learn-more.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-learn-more',\n  templateUrl: './learn-more.component.html',\n  styleUrls: ['./learn-more.component.scss'],\n})\nexport class LearnMoreComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/colors';\n@import '../../../styles/mixins';\n\n:host {\n  width: 100%;\n  gap: 40px;\n  padding: 40px 0px 40px 0px;\n}\n\n.learn-more-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 500px;\n  padding: 0px 20px 40px 20px;\n  gap: 30px;\n}\n\n.logo-container {\n\n    display: flex;\n    justify-content: center;\n}\n\n.learn-more-title {\n  @include h3();\n  text-align: center;\n}\n\n",
                    "styleUrl": "./learn-more.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "templateData": "<div class=\"logo-container\">\n  <img src=\"../../../assets/svg/planscape-color-logo.svg\" />\n</div>\n\n<div class=\"learn-more-container\">\n  <div class=\"learn-more-title\">Learn More</div>\n\n  <app-horizonal-card\n    title=\"Learn more about planscape\"\n    content=\"Visit our FAQs to learn more\"\n    iconsrc=\"../../assets/svg/icons/info-circle-dark.svg\"\n    outboundLink=\"https://www.planscape.org/faqs\">\n  </app-horizonal-card>\n  <app-horizonal-card\n    title=\"Planscape user guide\"\n    content=\"Visit our Github account\"\n    iconsrc=\"../../assets/svg/icons/github-logo-dark.svg\"\n    outboundLink=\"https://github.com/OurPlanscape/Planscape\">\n  </app-horizonal-card>\n  <app-horizonal-card\n    title=\"Website\"\n    content=\"Visit the Planscape website\"\n    iconsrc=\"../../assets/svg/icons/planscape-line-logo-dark.svg\"\n    outboundLink=\"https://www.planscape.org/\">\n  </app-horizonal-card>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-73144d61a0fe389d0711c2eda2dc47a8f187278d2cef72d403a541847edd40772c8683181e4102d99cd1344a8232d81413410ab25ebf6a9c4a51430c125340d0",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emailError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "FormMessageType",
                    "defaultValue": "FormMessageType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "loginError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "offerReverify",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "passwordError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkEmailErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearEmailErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resendVerification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { AuthService } from '@services';\nimport { FormMessageType } from '../types/data.types';\n\nimport {\n  EMAIL_VALIDATION_REGEX,\n  SNACK_ERROR_CONFIG,\n  SNACK_NOTICE_CONFIG,\n} from '../../app/shared/constants';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n  protected offerReverify: boolean = false;\n  protected loginError = '';\n  protected passwordError: string = '';\n  protected emailError: string = '';\n  form: FormGroup;\n  FormMessageType = FormMessageType;\n\n  constructor(\n    private authService: AuthService,\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private snackbar: MatSnackBar\n  ) {\n    this.form = this.formBuilder.group({\n      email: this.formBuilder.control('', [\n        Validators.required,\n        Validators.pattern(EMAIL_VALIDATION_REGEX),\n      ]),\n      password: this.formBuilder.control('', Validators.required),\n    });\n  }\n\n  checkEmailErrors() {\n    if (this.form.controls['email'].errors !== null) {\n      this.emailError = 'Email must be in a proper format.';\n    }\n  }\n\n  clearEmailErrors() {\n    if (this.emailError !== '') {\n      this.emailError = '';\n    }\n  }\n\n  resendVerification() {\n    const email = this.form.get('email')?.value;\n    this.authService.resendValidationEmail(email).subscribe({\n      next: () => {\n        this.offerReverify = false;\n        this.snackbar.open(\n          'Sent verification email.',\n          'Dismiss',\n          SNACK_NOTICE_CONFIG\n        );\n      },\n      error: (err: String) => {\n        this.snackbar.open(`Error: ${err}`, 'Dismiss', SNACK_ERROR_CONFIG);\n      },\n    });\n  }\n\n  login() {\n    if (!this.form.valid) return;\n\n    const email: string = this.form.get('email')?.value;\n    const password: string = this.form.get('password')?.value;\n\n    this.authService.login(email, password).subscribe(\n      (redirect) => {\n        this.router.navigate([redirect]);\n      },\n      (error) => {\n        // determine the cause of the error...\n        // errors from the backend can be in a variety of formats\n\n        // present the user with the strings that we decided for UX, rather than\n        //  the errors provided by the backend and dj-rest-auth\n        var errorMsg: string = '';\n\n        if (error.error.email) {\n          this.form.controls['email'].setErrors({\n            email: 'Email must be in the proper format.',\n          });\n        }\n        if (error.error.global) {\n          errorMsg = error.error.global[0];\n          this.form.setErrors({ error: errorMsg });\n          if (errorMsg === 'E-mail is not verified.') {\n            this.loginError = 'Please check your email to verify your account.';\n            this.offerReverify = true;\n          } else if (\n            errorMsg === 'Unable to log in with provided credentials.'\n          ) {\n            this.loginError =\n              'Either the user name or password that you have entered is incorrect. Please try again.';\n            this.offerReverify = false;\n          } else {\n            this.loginError = errorMsg;\n          }\n        }\n      }\n    );\n  }\n\n  signup() {\n    this.router.navigate(['signup']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/colors';\n@import '../../styles/mixins';\n\n.signin-root {\n  display: flex;\n  height: 100%;\n}\n\n:host {\n  ::ng-deep .mat-form-field-outline {\n    background-color: $color-light-gray;\n  }\n}\n\n.signin-card-container {\n  background-image: url('/assets/jpg/planscape-background.jpg');\n  background-repeat: no-repeat;\n  background-size: cover;\n  display: flex;\n  width: 50%;\n}\n\n.signin-subcontainer {\n  flex-direction: column;\n  margin: auto;\n  margin-top: 10%;\n}\n\n.signin-card-logo {\n  display: flex;\n  padding: 1em;\n}\n\n.planscape-white-logo {\n  margin: auto;\n  height: 42px;\n  width: 246px;\n}\n\n.signin-card {\n  margin: auto;\n  width: 300px;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 40px 60px;\n  background-color: white;\n  border: 1px solid rgba(72, 84, 192, 0.5);\n}\n\nh1 {\n  &.signin-title {\n    @include h1();\n    margin-bottom: 48px;\n    text-align: center;\n    text-align: center;\n    vertical-align: middle;\n    color: $color-text-dark;\n  }\n}\n\n.forget-link {\n  text-align: center;\n}\n\nmat-label {\n  text-align: left;\n  vertical-align: middle;\n  padding-bottom: 1em;\n  padding-right: 1em;\n}\n\n.standard-label {\n  @include standard-input-label();\n}\n\n.required-blurb {\n  @include italic-sm();\n  color: $color-text-gray;\n}\n\nbutton {\n  width: 100%;\n}\n\nmat-divider {\n  margin: 28px 0px;\n}\n\nmat-form-field {\n  width: 100%;\n}\n\n\n.forget-password {\n  text-align: center;\n  vertical-align: middle;\n  margin-top: 20px;\n}\n\n.forget-password-link {\n  @include standard-link();\n  text-decoration: underline;\n  color: $color-standard-blue;\n  padding-top: 26px;\n}\n\n.info-text-container {\n  background-color: $color-soft-purple;\n  width: 50%;\n}\n\n.login-form-buttons {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n}\n\n.login-form-button {\n  width: 80px;\n  height: 36px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.guest-button {\n  width: 160px;\n}\n\n.mat-error {\n  margin-top: 10px;\n  text-align: center;\n}\n\n.post-error-option {\n  padding: 1em;\n  text-align: center;\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"signin-root\">\n  <div class=\"signin-card-container\">\n    <div class=\"signin-subcontainer\">\n      <div class=\"signin-card-logo\">\n        <div class=\"planscape-white-logo\">\n          <img src=\"assets/svg/planscape-white-logo.svg\" alt=\"planscape logo\" />\n        </div>\n      </div>\n\n      <div class=\"signin-card\">\n        <h1 class=\"signin-title\">Sign in to Planscape</h1>\n\n        <form [formGroup]=\"form\" (ngSubmit)=\"login()\" autocomplete=\"on\">\n          <mat-label class=\"standard-label\"\n            >Email\n            <span class=\"required-blurb\">required</span>\n          </mat-label>\n          <mat-form-field appearance=\"outline\">\n            <input\n              type=\"text\"\n              required\n              formControlName=\"email\"\n              matInput\n              (blur)=\"checkEmailErrors()\"\n              (keyup)=\"clearEmailErrors()\"\n              autocomplete=\"email\" />\n          </mat-form-field>\n          <app-field-alert\n            *ngIf=\"\n              this.emailError &&\n              this.form.controls['email'].errors &&\n              this.form.controls['email'].dirty\n            \"\n            message=\"{{ emailError }}\"\n            title=\"email error\"></app-field-alert>\n\n          <mat-label class=\"standard-label\"\n            >Password\n            <span class=\"required-blurb\">required</span>\n          </mat-label>\n          <mat-form-field appearance=\"outline\">\n            <input\n              type=\"password\"\n              required\n              formControlName=\"password\"\n              autocomplete=\"current-password\"\n              matInput />\n          </mat-form-field>\n          <app-field-alert\n            *ngIf=\"passwordError\"\n            message=\"{{ passwordError }}\"\n            title=\"password error\"></app-field-alert>\n\n          <app-form-message\n            [messageType]=\"FormMessageType.ERROR\"\n            *ngIf=\"loginError ? true : false\"\n            title=\"Credentials error\"\n            message=\"{{ loginError }}\">\n            <div *ngIf=\"offerReverify\">\n              <a [routerLink]=\"[]\" (click)=\"resendVerification()\"\n                >Click here to re-send your verification email.</a\n              >\n            </div>\n          </app-form-message>\n\n          <mat-card-actions class=\"login-form-buttons\">\n            <button\n              mat-flat-button\n              color=\"primary\"\n              type=\"submit\"\n              [disabled]=\"!form.valid\"\n              class=\"login-form-button\">\n              LOG IN\n            </button>\n          </mat-card-actions>\n\n          <p class=\"forget-password\">\n            <a\n              i18n=\"Text on a button to reset password\"\n              href=\"reset/\"\n              class=\"forget-password-link\"\n              >Forgot your password?</a\n            >\n          </p>\n\n          <div class=\"login-form-buttons\">\n            <button\n              mat-stroked-button\n              color=\"primary\"\n              data-id=\"explore\"\n              [routerLink]=\"'/map'\"\n              class=\"login-form-button guest-button\">\n              Explore\n            </button>\n            <button\n              mat-stroked-button\n              color=\"primary\"\n              data-id=\"create-account\"\n              [routerLink]=\"'/signup'\"\n              class=\"login-form-button guest-button\">\n              Create an Account\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n    <app-credits-blurb></app-credits-blurb>\n  </div>\n\n  <div class=\"info-text-container\">\n    <app-planscape-about></app-planscape-about>\n  </div>\n</div>\n"
        },
        {
            "name": "MapComponent",
            "id": "component-MapComponent-831503dbc885fd925839edc7e3581aa0daa2716c8ef38fecb817c63d9b9b9339c19df1da062ce1fb6289fe4dba3dce265f02f1df302a0927854493e7b1b66289",
            "file": "src/app/map/map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map",
            "styleUrls": [
                "./map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "planId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "applicationRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationRef",
                    "optional": false,
                    "description": "",
                    "line": 146,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "AreaCreationAction",
                    "defaultValue": "AreaCreationAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "boundaryConfig$",
                    "defaultValue": "this.mapService.boundaryConfig$\n    .asObservable()\n    .pipe(untilDestroyed(this))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "breadcrumbs$",
                    "defaultValue": "new BehaviorSubject<Breadcrumb[]>([{ name: 'New Plan' }])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "conditionsConfig$",
                    "defaultValue": "this.mapService.conditionsConfig$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "conditionsUpdated$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "drawingLayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.GeoJSON | undefined",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "drawRegionEnabled$",
                    "defaultValue": "this.regionService.drawRegionEnabled$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "legend",
                    "defaultValue": "LEGEND",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Legend",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "mapHasDataLayer$",
                    "defaultValue": "combineLatest([\n    this.selectedMap$,\n    this.conditionsUpdated$,\n  ]).pipe(map(([selectedMap]) => !!selectedMap?.config.dataLayerConfig.layer))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether the currently selected map has a data layer active.</p>\n",
                    "line": 127,
                    "rawdescription": "\nWhether the currently selected map has a data layer active."
                },
                {
                    "name": "mapManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MapManager",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "mapNameplateWidths",
                    "defaultValue": "Array(4)\n    .fill(null)\n    .map((_) => new BehaviorSubject<number | null>(null))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "maps",
                    "defaultValue": "['map1', 'map2', 'map3', 'map4'].map(\n    (id: string, index: number) => {\n      return {\n        id: id,\n        name: `${index + 1}`,\n        config: defaultMapConfig(),\n      };\n    }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map[]",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "mapViewOptions$",
                    "defaultValue": "new BehaviorSubject<MapViewOptions>(\n    defaultMapViewOptions()\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "regionRecord",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "selectedAreaCreationAction",
                    "defaultValue": "AreaCreationAction.NONE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "selectedMap$",
                    "defaultValue": "this.mapViewOptions$.pipe(\n    map((options) => this.maps[options.selectedMapIndex])\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "selectedMapOpacity$",
                    "defaultValue": "this.selectedMap$.pipe(\n    map(\n      (selectedMap) =>\n        selectedMap.config.dataLayerConfig.opacity ||\n        this.mapManager.defaultOpacity\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "selectedRegion$",
                    "defaultValue": "this.sessionService.region$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "showConfirmAreaButton$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "showUploader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                }
            ],
            "methodsClass": [
                {
                    "name": "addDrawingControlToAllMaps",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 567,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "backHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 755,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "beforeUnload",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable | boolean",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:beforeunload'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "cancelAreaCreationAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 555,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changeBaseLayer",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 635,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles which base layer is shown.",
                    "description": "<p>Toggles which base layer is shown.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeConditionsLayer",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 657,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nChanges which condition scores layer (if any) is shown.",
                    "description": "<p>Changes which condition scores layer (if any) is shown.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeMapCount",
                    "args": [
                        {
                            "name": "mapCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 676,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nChange how many maps are displayed in the viewport.",
                    "description": "<p>Change how many maps are displayed in the viewport.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "mapCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeOpacity",
                    "args": [
                        {
                            "name": "opacity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 667,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nChange the opacity of the currently shown data layer on all maps (if any).",
                    "description": "<p>Change the opacity of the currently shown data layer on all maps (if any).</p>\n",
                    "jsdoctags": [
                        {
                            "name": "opacity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDetailCardCallback",
                    "args": [
                        {
                            "name": "features",
                            "type": "Feature<Geometry, any>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "onInitialized",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 461,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "features",
                            "type": "Feature<Geometry, any>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onInitialized",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawPlanningArea",
                    "args": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opacity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoundaryLayerVector",
                    "args": [
                        {
                            "name": "vectorName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<L.Layer>",
                    "typeParameters": [],
                    "line": 474,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "vectorName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initMap",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "center",
                            "type": "L.LatLngTuple",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "zoom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 404,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInitializes the map with controls and the layer options specified in its config.",
                    "description": "<p>Initializes the map with controls and the layer options specified in its config.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "center",
                            "type": "L.LatLngTuple",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "zoom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMapVisible",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 734,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether the map at given index should be visible.\n\n WARNING: This function is run constantly and shouldn't do any heavy lifting!\n",
                    "description": "<p>Whether the map at given index should be visible.</p>\n<p> WARNING: This function is run constantly and shouldn&#39;t do any heavy lifting!</p>\n",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadArea",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 583,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConverts and adds the editable shapefile to the map.",
                    "description": "<p>Converts and adds the editable shapefile to the map.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMapDataFromLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPlanAndDrawPlanningArea",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAreaCreationActionChange",
                    "args": [
                        {
                            "name": "option",
                            "type": "AreaCreationAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 525,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandles the area creation action change.",
                    "description": "<p>Handles the area creation action change.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "AreaCreationAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCreatePlanDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 481,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the user is signed in, configures and opens the Create Plan dialog.\n If the user is signed out, configure and open the Sign In dialog.\n",
                    "description": "<p>If the user is signed in, configures and opens the Create Plan dialog.\n If the user is signed out, configure and open the Sign In dialog.</p>\n"
                },
                {
                    "name": "openPlanCreateDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 515,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "openSignInDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 509,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "restoreSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 375,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectMap",
                    "args": [
                        {
                            "name": "mapIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 695,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelect a map and update which map contains the drawing layer.",
                    "description": "<p>Select a map and update which map contains the drawing layer.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "mapIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRegionBoundaryOnMap",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectedRegion",
                            "type": "Region | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 624,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedRegion",
                            "type": "Region | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showUploadError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 616,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleBoundaryLayer",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 644,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles which boundary layer is shown.",
                    "description": "<p>Toggles which boundary layer is shown.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleExistingProjectsLayer",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 652,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles whether existing projects from CalMapper are shown.",
                    "description": "<p>Toggles whether existing projects from CalMapper are shown.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBoundaryConfigFromMapConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 351,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nwe need to find the same config instance from boundaryConfig$ as the one\nsaved in map.config, so the map config panel shows the same right selection.\nTODO: avoid this, save only the boundary config id or something that we can\neasily identify rather than the whole object (which drives this issue)\n\nISSUE this is happening with the \"old\" boundary config.\nProbably the same happens with the other stuff.\n",
                    "description": "<p>we need to find the same config instance from boundaryConfig$ as the one\nsaved in map.config, so the map config panel shows the same right selection.\nTODO: avoid this, save only the boundary config id or something that we can\neasily identify rather than the whole object (which drives this issue)</p>\n<p>ISSUE this is happening with the &quot;old&quot; boundary config.\nProbably the same happens with the other stuff.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateMapNameplateWidth",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 455,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:beforeunload",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 138
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import * as L from 'leaflet';\nimport { LatLngTuple } from 'leaflet';\n\nimport {\n  AfterViewInit,\n  ApplicationRef,\n  ChangeDetectorRef,\n  Component,\n  createComponent,\n  DoCheck,\n  EnvironmentInjector,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Feature, FeatureCollection, Geometry } from 'geojson';\nimport { BehaviorSubject, combineLatest, map, Observable, take } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport * as shp from 'shpjs';\n\nimport {\n  AuthService,\n  MapService,\n  PlanStateService,\n  PopupService,\n  RegionService,\n  SessionService,\n  ShareMapService,\n} from '@services';\nimport {\n  Legend,\n  Map,\n  MapConfig,\n  MapViewOptions,\n  NONE_BOUNDARY_CONFIG,\n  Plan,\n  Region,\n} from '../types';\nimport { MapManager } from './map-manager';\nimport { PlanCreateDialogComponent } from './plan-create-dialog/plan-create-dialog.component';\nimport { ProjectCardComponent } from './project-card/project-card.component';\nimport { SignInDialogComponent } from './sign-in-dialog/sign-in-dialog.component';\nimport { AreaCreationAction, LEGEND } from './map.constants';\nimport { SNACK_ERROR_CONFIG } from '../../app/shared/constants';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport {\n  addGeoJSONToMap,\n  defaultMapConfig,\n  defaultMapViewOptions,\n  getMapNameplateWidth,\n  regionMapCenters,\n} from './map.helper';\nimport { changeMapBaseStyle } from './map.tiles';\nimport { OutsideRegionDialogComponent } from './outside-region-dialog/outside-region-dialog.component';\nimport { updateLegendWithColorMap } from './map.legends';\nimport {\n  addRegionLayer,\n  createDrawingLayer,\n  hideRegionLayer,\n  showRegionLayer,\n} from './map.layers';\nimport { Breadcrumb } from '../shared/nav-bar/nav-bar.component';\nimport { getPlanPath } from '../plan/plan-helpers';\nimport { InvalidLinkDialogComponent } from './invalid-link-dialog/invalid-link-dialog.component';\nimport { Location } from '@angular/common';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss'],\n})\nexport class MapComponent implements AfterViewInit, OnDestroy, OnInit, DoCheck {\n  @Input() planId: string | null = null;\n\n  readonly AreaCreationAction = AreaCreationAction;\n  readonly legend: Legend = LEGEND;\n  readonly maps: Map[] = ['map1', 'map2', 'map3', 'map4'].map(\n    (id: string, index: number) => {\n      return {\n        id: id,\n        name: `${index + 1}`,\n        config: defaultMapConfig(),\n      };\n    }\n  );\n\n  mapManager: MapManager;\n  regionRecord: string = '';\n\n  selectedAreaCreationAction = AreaCreationAction.NONE;\n  showUploader = false;\n  drawingLayer: L.GeoJSON | undefined;\n\n  mapViewOptions$ = new BehaviorSubject<MapViewOptions>(\n    defaultMapViewOptions()\n  );\n  mapNameplateWidths = Array(4)\n    .fill(null)\n    .map((_) => new BehaviorSubject<number | null>(null));\n\n  boundaryConfig$ = this.mapService.boundaryConfig$\n    .asObservable()\n    .pipe(untilDestroyed(this));\n  conditionsConfig$ = this.mapService.conditionsConfig$.asObservable();\n  selectedRegion$ = this.sessionService.region$.asObservable();\n\n  conditionsUpdated$ = new BehaviorSubject(false);\n\n  selectedMap$ = this.mapViewOptions$.pipe(\n    map((options) => this.maps[options.selectedMapIndex])\n  );\n  selectedMapOpacity$ = this.selectedMap$.pipe(\n    map(\n      (selectedMap) =>\n        selectedMap.config.dataLayerConfig.opacity ||\n        this.mapManager.defaultOpacity\n    )\n  );\n  /** Whether the currently selected map has a data layer active. */\n\n  mapHasDataLayer$ = combineLatest([\n    this.selectedMap$,\n    this.conditionsUpdated$,\n  ]).pipe(map(([selectedMap]) => !!selectedMap?.config.dataLayerConfig.layer));\n\n  showConfirmAreaButton$ = new BehaviorSubject(false);\n  breadcrumbs$ = new BehaviorSubject<Breadcrumb[]>([{ name: 'New Plan' }]);\n\n  drawRegionEnabled$ = this.regionService.drawRegionEnabled$;\n\n  @HostListener('window:beforeunload')\n  beforeUnload(): Observable<boolean> | boolean {\n    // save map state before leaving page\n    this.sessionService.setMapConfigs(this.maps.map((map: Map) => map.config));\n    this.sessionService.setMapViewOptions(this.mapViewOptions$.getValue());\n    return true;\n  }\n\n  constructor(\n    public applicationRef: ApplicationRef,\n    private authService: AuthService,\n    private mapService: MapService,\n    private dialog: MatDialog,\n    private matSnackBar: MatSnackBar,\n    private environmentInjector: EnvironmentInjector,\n    private popupService: PopupService,\n    private sessionService: SessionService,\n    private planStateService: PlanStateService,\n    private router: Router,\n    private http: HttpClient,\n    private cdr: ChangeDetectorRef,\n    private regionService: RegionService,\n    private route: ActivatedRoute,\n    private shareMapService: ShareMapService,\n    private location: Location\n  ) {\n    this.sessionService.mapViewOptions$\n      .pipe(take(1))\n      .subscribe((mapViewOptions: MapViewOptions | null) => {\n        if (mapViewOptions) {\n          this.mapViewOptions$.next(mapViewOptions);\n        }\n      });\n\n    this.mapManager = new MapManager(\n      this.matSnackBar,\n      this.maps,\n      this.mapViewOptions$,\n      this.popupService,\n      this.sessionService,\n      this.http\n    );\n    this.mapManager.polygonsCreated$\n      .pipe(untilDestroyed(this))\n      .subscribe(this.showConfirmAreaButton$);\n  }\n\n  ngOnInit(): void {\n    this.selectedRegion$.pipe(take(1)).subscribe((region) => {\n      this.regionRecord = region!;\n    });\n    const link = this.route.snapshot.queryParams['link'];\n    if (link) {\n      this.loadMapDataFromLink(link);\n    } else {\n      this.restoreSession();\n    }\n\n    /** Save map configurations in the user's session every X ms. */\n    this.sessionService.sessionInterval$\n      .pipe(untilDestroyed(this))\n      .subscribe((_) => {\n        this.sessionService.setMapViewOptions(this.mapViewOptions$.getValue());\n        this.sessionService.setMapConfigs(\n          this.maps.map((map: Map) => map.config)\n        );\n      });\n  }\n\n  ngDoCheck(): void {\n    this.selectedRegion$.pipe(take(1)).subscribe((region) => {\n      if (this.regionRecord != region) {\n        this.regionRecord = region!;\n        this.sessionService.mapConfigs$\n          .pipe(take(1))\n          .subscribe((mapConfigs: Record<Region, MapConfig[]> | null) => {\n            if (mapConfigs && region) {\n              var regionMaps = mapConfigs[region];\n              if (regionMaps) {\n                regionMaps.forEach((mapConfig, index) => {\n                  this.maps[index].config = mapConfig;\n                  this.boundaryConfig$\n                    .pipe(filter((config) => !!config))\n                    .subscribe((config) => {\n                      // Ensure the radio button corresponding to the saved selection is selected.\n                      const boundaryConfig = config?.find(\n                        (boundary) =>\n                          boundary.boundary_name ===\n                          mapConfig.boundaryLayerConfig.boundary_name\n                      );\n                      this.maps[index].config.boundaryLayerConfig =\n                        boundaryConfig ? boundaryConfig : NONE_BOUNDARY_CONFIG;\n                    });\n                });\n              }\n            }\n          });\n        this.maps.forEach((map: Map) => {\n          this.initMap(map, map.id);\n        });\n        this.mapManager.syncVisibleMaps(this.isMapVisible.bind(this));\n      }\n    });\n    this.cdr.detectChanges();\n  }\n\n  ngAfterViewInit(): void {\n    const center = this.mapViewOptions$.value.center as LatLngTuple;\n    this.maps.forEach((map: Map) => {\n      this.initMap(map, map.id, center, this.mapViewOptions$.value.zoom);\n    });\n    this.mapManager.syncVisibleMaps(this.isMapVisible.bind(this));\n  }\n\n  private loadPlanAndDrawPlanningArea() {\n    // if planID is provided load planning area\n    if (this.planId) {\n      const plan$ = this.planStateService.getPlan(this.planId).pipe(take(1));\n\n      plan$.subscribe({\n        next: (plan) => {\n          if (this.regionRecord != plan.region_name) {\n            this.sessionService.setRegion(plan.region_name);\n            this.mapService.setConfigs();\n          }\n\n          this.drawPlanningArea(plan);\n          this.breadcrumbs$.next([\n            { name: plan.name, path: getPlanPath(plan.id) },\n          ]);\n        },\n        error: (error) => {\n          // this.planNotFound = true;\n        },\n      });\n    }\n  }\n\n  private drawPlanningArea(plan: Plan, color?: string, opacity?: number) {\n    if (!plan.geometry) return;\n\n    if (!!this.drawingLayer) {\n      this.drawingLayer.remove();\n    }\n\n    this.maps.forEach((map) => {\n      if (map.instance && plan.geometry) {\n        this.drawingLayer = createDrawingLayer(plan.geometry, color, opacity);\n        addGeoJSONToMap(this.drawingLayer, map.instance);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    // save map state before removing this component\n    this.maps.forEach((map: Map) => map.instance?.remove());\n    this.sessionService.setMapConfigs(this.maps.map((map: Map) => map.config));\n  }\n\n  loadMapDataFromLink(link: string) {\n    this.shareMapService.getMapDataFromLink(link).subscribe({\n      next: (result) => {\n        // if the region is different, update it and retrieve configs (boundaries/RRK) again.\n        if (result.region !== this.regionRecord) {\n          this.regionRecord = result.region;\n          this.sessionService.setRegion(result.region);\n          this.mapService.setConfigs();\n        }\n        this.sessionService.setMapConfigs(result.mapConfig, result.region);\n\n        this.sessionService.region$.pipe(take(1)).subscribe((region) => {\n          if (result.mapViewOptions) {\n            this.changeMapCount(result.mapViewOptions?.numVisibleMaps);\n            this.mapViewOptions$.next(result.mapViewOptions);\n          }\n\n          result.mapConfig.forEach((mapConfig, index) => {\n            this.maps[index].config = mapConfig;\n            this.initMap(\n              this.maps[index],\n              this.maps[index].id,\n              result.mapViewOptions!.center,\n              this.mapViewOptions$.value.zoom\n            );\n          });\n          this.mapManager.syncVisibleMaps(this.isMapVisible.bind(this));\n\n          this.boundaryConfig$.subscribe((_) =>\n            this.updateBoundaryConfigFromMapConfig()\n          );\n\n          // pretty bad, but doing this to reload conditions on panels\n          this.mapService.conditionsConfig$.next(\n            this.mapService.conditionsConfig$.value\n          );\n          this.cdr.detectChanges();\n        });\n        this.cdr.detectChanges();\n      },\n      error: () => {\n        this.location.replaceState(location.pathname, '');\n        this.dialog.open(InvalidLinkDialogComponent);\n      },\n    });\n  }\n\n  /** we need to find the same config instance from boundaryConfig$ as the one\n   * saved in map.config, so the map config panel shows the same right selection.\n   * TODO: avoid this, save only the boundary config id or something that we can\n   * easily identify rather than the whole object (which drives this issue)\n   *\n   * ISSUE this is happening with the \"old\" boundary config.\n   * Probably the same happens with the other stuff.\n   */\n  private updateBoundaryConfigFromMapConfig() {\n    this.boundaryConfig$\n      .pipe(filter((config) => !!config))\n      .subscribe((config) => {\n        if (config) {\n          if (config[0].region_name != this.regionRecord) {\n            return;\n          }\n        }\n\n        // Ensure the radio button corresponding to the saved selection is selected.\n        this.maps.forEach((map) => {\n          const boundaryConfig = config?.find(\n            (boundary) =>\n              boundary.boundary_name ===\n              map.config.boundaryLayerConfig.boundary_name\n          );\n          map.config.boundaryLayerConfig = boundaryConfig\n            ? boundaryConfig\n            : NONE_BOUNDARY_CONFIG;\n        });\n      });\n  }\n\n  private restoreSession() {\n    this.sessionService.mapViewOptions$\n      .pipe(take(1))\n      .subscribe((mapViewOptions: MapViewOptions | null) => {\n        if (mapViewOptions) {\n          this.mapViewOptions$.next(mapViewOptions);\n        }\n      });\n    this.sessionService.mapConfigs$\n      .pipe(take(1))\n      .subscribe((mapConfigs: Record<Region, MapConfig[]> | null) => {\n        this.selectedRegion$\n          .pipe(take(1))\n          .subscribe((region: Region | null) => {\n            if (mapConfigs && region) {\n              var regionMaps = mapConfigs[region];\n              if (regionMaps) {\n                regionMaps.forEach((mapConfig, index) => {\n                  this.maps[index].config = mapConfig;\n                });\n              }\n            }\n          });\n        this.updateBoundaryConfigFromMapConfig();\n      });\n    this.cdr.detectChanges();\n  }\n\n  /** Initializes the map with controls and the layer options specified in its config. */\n  private initMap(map: Map, id: string, center?: L.LatLngTuple, zoom?: number) {\n    this.mapManager.initLeafletMap(\n      map,\n      id,\n      this.createDetailCardCallback.bind(this),\n      this.getBoundaryLayerVector.bind(this)\n    );\n    this.loadPlanAndDrawPlanningArea();\n\n    // Renders the selected region on the map.\n    this.selectedRegion$\n      .pipe(take(1))\n      .subscribe((selectedRegion: Region | null) => {\n        const centerCoords = center || regionMapCenters(selectedRegion!);\n        map.instance?.setView(\n          new L.LatLng(centerCoords[0], centerCoords[1]),\n          zoom\n        );\n        // Region highlighting disabled for now\n        this.setRegionBoundaryOnMap(map, selectedRegion);\n      });\n\n    this.showConfirmAreaButton$.subscribe((value: boolean) => {\n      if (\n        !value &&\n        this.selectedAreaCreationAction === AreaCreationAction.UPLOAD\n      ) {\n        const selectedMapIndex =\n          this.mapViewOptions$.getValue().selectedMapIndex;\n        this.mapManager.removeDrawingControl(\n          this.maps[selectedMapIndex].instance!\n        );\n        this.showUploader = true;\n      }\n    });\n\n    // Mark the map as selected when the user clicks anywhere on it.\n    map.instance?.addEventListener('click', () => {\n      this.selectMap(this.maps.indexOf(map));\n    });\n\n    // Initialize the legend with colormap values.\n    updateLegendWithColorMap(map, map.config.dataLayerConfig.colormap, [\n      map.config.dataLayerConfig.min_value,\n      map.config.dataLayerConfig.max_value,\n    ]);\n\n    // Calculate the maximum width of the map nameplate.\n    this.updateMapNameplateWidth(map);\n  }\n\n  private updateMapNameplateWidth(map: Map) {\n    this.mapNameplateWidths[this.maps.indexOf(map)].next(\n      getMapNameplateWidth(map)\n    );\n  }\n\n  private createDetailCardCallback(\n    features: Feature<Geometry, any>[],\n    onInitialized: () => void\n  ): any {\n    let component = createComponent(ProjectCardComponent, {\n      environmentInjector: this.environmentInjector,\n    });\n    component.instance.initializedEvent.subscribe((_) => onInitialized());\n    component.instance.features = features;\n    this.applicationRef.attachView(component.hostView);\n    return component.location.nativeElement;\n  }\n\n  private getBoundaryLayerVector(vectorName: string): Observable<L.Layer> {\n    return this.mapService.getBoundaryShapes(vectorName);\n  }\n\n  /** If the user is signed in, configures and opens the Create Plan dialog.\n   *  If the user is signed out, configure and open the Sign In dialog.\n   */\n  openCreatePlanDialog() {\n    if (!this.authService.loggedInStatus$.value) {\n      this.openSignInDialog();\n      return;\n    }\n    const selectedMapIndex = this.mapViewOptions$.getValue().selectedMapIndex;\n    const regionBoundary = this.maps[\n      selectedMapIndex\n    ].regionLayerRef?.toGeoJSON() as FeatureCollection;\n    if (regionBoundary) {\n      const inRegion = this.mapManager.checkIfDrawingInRegion(regionBoundary);\n\n      if (!inRegion) {\n        showRegionLayer(this.maps[selectedMapIndex]);\n        this.dialog.open(OutsideRegionDialogComponent, { maxWidth: '560px' });\n        return;\n      }\n    }\n\n    this.openPlanCreateDialog()\n      .afterClosed()\n      .subscribe((id) => {\n        if (id) {\n          this.router.navigate(['plan', id]);\n        }\n      });\n  }\n\n  private openSignInDialog() {\n    return this.dialog.open(SignInDialogComponent, {\n      maxWidth: '560px',\n    });\n  }\n\n  private openPlanCreateDialog() {\n    return this.dialog.open(PlanCreateDialogComponent, {\n      maxWidth: '560px',\n      data: {\n        shape: this.mapManager.convertToPlanningArea(),\n      },\n    });\n  }\n\n  /** Handles the area creation action change. */\n  onAreaCreationActionChange(option: AreaCreationAction) {\n    const selectedMapIndex = this.mapViewOptions$.getValue().selectedMapIndex;\n    this.selectedAreaCreationAction = option;\n\n    if (!this.authService.loggedInStatus$.value) {\n      this.cancelAreaCreationAction();\n      this.openSignInDialog();\n      return;\n    }\n\n    if (option === AreaCreationAction.DRAW) {\n      this.addDrawingControlToAllMaps();\n      this.mapManager.enablePolygonDrawingTool(\n        this.maps[selectedMapIndex].instance!\n      );\n      this.showUploader = false;\n      this.changeMapCount(1);\n    }\n    if (option === AreaCreationAction.UPLOAD) {\n      if (!this.showConfirmAreaButton$.value) {\n        this.maps[selectedMapIndex].instance!.pm.removeControls();\n      }\n      this.mapManager.disablePolygonDrawingTool(\n        this.maps[selectedMapIndex].instance!\n      );\n      this.showUploader = !this.showUploader;\n    }\n    showRegionLayer(this.maps[selectedMapIndex]);\n  }\n\n  cancelAreaCreationAction() {\n    const selectedMapIndex = this.mapViewOptions$.getValue().selectedMapIndex;\n    this.mapManager.removeDrawingControl(this.maps[selectedMapIndex].instance!);\n    this.mapManager.disablePolygonDrawingTool(\n      this.maps[selectedMapIndex].instance!\n    );\n    this.mapManager.clearAllDrawings();\n    hideRegionLayer(this.maps[selectedMapIndex]);\n    this.selectedAreaCreationAction = AreaCreationAction.NONE;\n    this.showUploader = false;\n  }\n\n  private addDrawingControlToAllMaps() {\n    this.maps.forEach((map: Map) => {\n      const selectedMapIndex = this.mapViewOptions$.getValue().selectedMapIndex;\n      // Only add drawing controls to the selected map\n      if (selectedMapIndex === this.maps.indexOf(map)) {\n        this.mapManager.addDrawingControl(\n          this.maps[selectedMapIndex].instance!\n        );\n      } else {\n        // Show a copy of the drawing layer on the other maps\n        this.mapManager.showClonedDrawing(map);\n      }\n    });\n  }\n\n  /** Converts and adds the editable shapefile to the map. */\n  async loadArea(event: { type: string; value: File }) {\n    const file = event.value;\n    if (file) {\n      const reader = new FileReader();\n      const fileAsArrayBuffer: ArrayBuffer = await new Promise((resolve) => {\n        reader.onload = () => {\n          resolve(reader.result as ArrayBuffer);\n        };\n        reader.readAsArrayBuffer(file);\n      });\n      try {\n        const geojson = (await shp.parseZip(\n          fileAsArrayBuffer\n        )) as GeoJSON.GeoJSON;\n        if (geojson.type == 'FeatureCollection') {\n          const selectedMapIndex =\n            this.mapViewOptions$.getValue().selectedMapIndex;\n          this.mapManager.addGeoJsonToDrawing(\n            geojson,\n            this.maps[selectedMapIndex]\n          );\n\n          this.showUploader = false;\n          this.addDrawingControlToAllMaps();\n        } else {\n          this.showUploadError();\n        }\n      } catch (e) {\n        this.showUploadError();\n      }\n    }\n  }\n\n  private showUploadError() {\n    this.matSnackBar.open(\n      '[Error] Not a valid shapefile!',\n      'Dismiss',\n      SNACK_ERROR_CONFIG\n    );\n  }\n\n  private setRegionBoundaryOnMap(map: Map, selectedRegion: Region | null) {\n    if (!selectedRegion) return;\n    if (!map.instance) return;\n    this.mapService\n      .getRegionBoundary(selectedRegion)\n      .subscribe((boundary: GeoJSON.GeoJSON) => {\n        addRegionLayer(map, boundary);\n      });\n  }\n\n  /** Toggles which base layer is shown. */\n  changeBaseLayer(map: Map) {\n    changeMapBaseStyle(map);\n\n    // Changing the base layer may change the attribution, so the map nameplate\n    // width should be recalculated.\n    this.updateMapNameplateWidth(map);\n  }\n\n  /** Toggles which boundary layer is shown. */\n  toggleBoundaryLayer(map: Map) {\n    this.mapManager.toggleBoundaryLayer(\n      map,\n      this.getBoundaryLayerVector.bind(this)\n    );\n  }\n\n  /** Toggles whether existing projects from CalMapper are shown. */\n  toggleExistingProjectsLayer(map: Map) {\n    this.mapManager.toggleExistingProjectsLayer(map);\n  }\n\n  /** Changes which condition scores layer (if any) is shown. */\n  changeConditionsLayer(map: Map) {\n    this.mapManager.changeConditionsLayer(map);\n    this.conditionsUpdated$.next(true);\n    updateLegendWithColorMap(map, map.config.dataLayerConfig.colormap, [\n      map.config.dataLayerConfig.min_value,\n      map.config.dataLayerConfig.max_value,\n    ]);\n  }\n\n  /** Change the opacity of the currently shown data layer on all maps (if any). */\n  changeOpacity(opacity: number) {\n    this.mapManager.defaultOpacity = opacity;\n    this.maps.forEach((map: Map) => {\n      map.config.dataLayerConfig.opacity = opacity;\n      this.mapManager.changeOpacity(map);\n    });\n  }\n\n  /** Change how many maps are displayed in the viewport. */\n  changeMapCount(mapCount: number) {\n    const mapViewOptions = this.mapViewOptions$.getValue();\n    mapViewOptions.numVisibleMaps = mapCount;\n    this.mapViewOptions$.next(mapViewOptions);\n\n    this.mapManager.syncVisibleMaps(this.isMapVisible.bind(this));\n    setTimeout(() => {\n      this.maps.forEach((map: Map) => {\n        map.instance?.invalidateSize();\n        if (this.drawingLayer && this.maps[0].instance) {\n          this.maps[0].instance.fitBounds(this.drawingLayer.getBounds());\n        }\n        // Recalculate the map nameplate size.\n        this.updateMapNameplateWidth(map);\n      });\n    }, 0);\n  }\n\n  /** Select a map and update which map contains the drawing layer. */\n  selectMap(mapIndex: number) {\n    const mapViewOptions = this.mapViewOptions$.getValue();\n    const previousMapIndex = mapViewOptions.selectedMapIndex;\n\n    if (previousMapIndex !== mapIndex) {\n      mapViewOptions.selectedMapIndex = mapIndex;\n      this.mapViewOptions$.next(mapViewOptions);\n      this.sessionService.setMapViewOptions(mapViewOptions);\n\n      // Toggle the cloned layer on if the map is not the current selected map.\n      // Toggle on the drawing layer and control on the selected map.\n      if (\n        this.selectedAreaCreationAction === AreaCreationAction.DRAW ||\n        this.showConfirmAreaButton$.value\n      ) {\n        this.mapManager.disablePolygonDrawingTool(\n          this.maps[previousMapIndex].instance!\n        );\n        this.mapManager.removeDrawingControl(\n          this.maps[previousMapIndex].instance!\n        );\n        this.mapManager.showClonedDrawing(this.maps[previousMapIndex]);\n        this.mapManager.addDrawingControl(this.maps[mapIndex].instance!);\n        this.mapManager.hideClonedDrawing(this.maps[mapIndex]);\n      }\n      this.mapManager.syncVisibleMaps(this.isMapVisible.bind(this));\n      setTimeout(() => {\n        this.maps.forEach((map: Map) => {\n          map.instance?.invalidateSize();\n        });\n      }, 0);\n    }\n  }\n\n  /**\n   * Whether the map at given index should be visible.\n   *\n   *  WARNING: This function is run constantly and shouldn't do any heavy lifting!\n   */\n  isMapVisible(index: number): boolean {\n    if (index === this.mapViewOptions$.getValue().selectedMapIndex) return true;\n\n    switch (this.mapViewOptions$.getValue().numVisibleMaps) {\n      case 4:\n        return true;\n      case 1:\n        // Only 1 map is visible and this one is not selected\n        return false;\n      case 2:\n      default:\n        // In 2 map view, if the 1st or 2nd map are selected, show maps 1 and 2\n        // Otherwise, show maps 3 and 4\n        // TODO: 2 map view might go away or the logic here might change\n        return (\n          Math.floor(this.mapViewOptions$.getValue().selectedMapIndex / 2) ===\n          Math.floor(index / 2)\n        );\n    }\n  }\n\n  backHome() {\n    this.router.navigate(['home']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../shared/_variables.scss';\n\n.root-container {\n  display: flex;\n  flex-direction: row;\n  height: calc(100% - $navbar-height);\n  width: 100%;\n}\n\n.maps-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  position: relative;\n  width: 100%;\n}\n\n.map-grid {\n  display: grid;\n  width: 100%;\n  height: 100%;\n  grid-template-columns: 1fr 1fr;\n\n  &.one-column {\n    grid-template-columns: 1fr;\n  }\n}\n\n.map-box {\n  border: 1px solid black;\n  box-sizing: border-box;\n  height: 100%;\n  position: relative;\n  width: 100%;\n  z-index: 1;\n}\n\n.map-box.selected::after {\n  display: block;\n  position: absolute;\n  inset: 0;\n  content: '';\n  border: 7px solid #2491ff;\n  z-index: 200;\n  pointer-events: none;\n}\n\n.map {\n  height: 100%;\n  width: 100%;\n  z-index: 1;\n}\n\n// Styling for the actions bar above the maps\n.map-actions-bar {\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: row;\n  height: $toolbar-height;\n  position: absolute;\n  width: 100%;\n  z-index: 2;\n}\n\n// Styling for legend on mousehover\n::ng-deep .legend:hover {\n  width: 100%;\n  overflow-y: scroll;\n  text-overflow: ellipsis;\n  height: auto;\n  max-width: auto;\n  max-height: 80%;\n  opacity: 1;\n  transition-duration: 0.8s;\n}\n\n// Setting heights for built-in leaflet styles to be able to configure relative max-height\n::ng-deep .leaflet-left .leaflet-control {\n  height: auto;\n  max-height: 75%;\n}\n\n// Setting heights for built-in leaflet styles to be able to configure relative max-height\n::ng-deep .leaflet-top {\n  height: 100%;\n}\n\n// Default styling for legend\n::ng-deep .legend {\n  top: 40px;\n  bottom: 40px;\n  margin: 10px;\n  font-weight: bold;\n  color: solid #2491ff;\n  text-align: left;\n  height: auto;\n  width: 65px;\n  text-overflow: ellipsis;\n  overflow-x: hidden;\n  line-height: 18px;\n  background: white;\n  white-space: nowrap;\n  opacity: 0.7;\n  display: inline-block;\n  border: 2px #aaa solid;\n  border-radius: 5px;\n  transition: width 0.8s;\n}\n\n// Parent legend class\n::ng-deep .parentlegend {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n// Legend line\n::ng-deep .legendline {\n  white-space: nowrap;\n  display: inline-block;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  width: auto;\n}\n\n// // Legend color entry\n::ng-deep .legend i {\n  margin-left: 8px;\n}\n\n// Legend text entry\n::ng-deep .legend label {\n  opacity: 0.7;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  flex: 1;\n  white-space: nowrap;\n  max-width: 65px;\n}\n\n// Legend header\n::ng-deep .legend b {\n  text-align: center;\n  font-size: small;\n  margin: 10px;\n  margin-top: 6px;\n  width: auto;\n  height: 10px;\n  display: flex;\n  flex-direction: row;\n}\n\n.actions-bar-text {\n  align-items: center;\n  color: #ffffff;\n  display: flex;\n  font-size: 13px;\n  font-weight: 500;\n  margin: 8px 0px 0px 20px;\n}\n\n.draw-area-button,\n.upload-area-button {\n  background-color: #3367d6;\n  box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.12),\n  0px 2px 2px rgba(0, 0, 0, 0.2),\n  0px 1px 1px rgba(0, 0, 0, 0.14);\n  color: #ffffff;\n  font-size: 13px;\n  height: 32px;\n  margin: 10px 0px 0px 12px;\n  pointer-events: auto;\n  width: fit-content;\n\n  &:hover {\n    background-color: #b9b9b9;\n  }\n\n  &:disabled {\n    background-color: #b9b9b9;\n  }\n\n  mat-icon {\n    line-height: 20px;\n  }\n}\n\n.selected {\n  background-color: #ffffff;\n  color: #3367d6;\n}\n\n.deselected {\n  background-color: transparent;\n  box-shadow: none;\n  color: #ffffff;\n}\n\n.upload-wrapper {\n  position: relative;\n\n  .file-uploader {\n    left: 0;\n    position: absolute;\n    top: 50px;\n  }\n}\n\n.done-button {\n  background-color: #3367d6;\n  box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.12),\n  0px 2px 2px rgba(0, 0, 0, 0.2),\n  0px 1px 1px rgba(0, 0, 0, 0.14);\n  color: #ffffff;\n  font-size: 13px;\n  height: 32px;\n  margin: 10px 12px 0px 0px;\n  pointer-events: auto;\n  width: fit-content;\n\n  &:disabled {\n    background-color: #b9b9b9;\n  }\n}\n\n.cancel-button {\n  color: #ffffff;\n  font-size: 13px;\n  margin: 10px 20px 0px 20px;\n  margin-left: auto;\n  pointer-events: auto;\n  width: fit-content;\n}\n\n.config-summary {\n  display: none;\n}\n\n@media print {\n  .config-summary {\n    display: flex;\n    gap: 30px;\n    padding: 10px;\n  }\n  .root-container {\n    flex-direction: column;\n  }\n\n  app-map-control-panel,\n  app-nav-bar,\n  .map-actions-bar {\n    display: none;\n  }\n  .map-box.selected {\n    border: 1px solid black;\n  }\n}\n",
                    "styleUrl": "./map.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "applicationRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "environmentInjector",
                        "type": "EnvironmentInjector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "popupService",
                        "type": "PopupService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "regionService",
                        "type": "RegionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "shareMapService",
                        "type": "ShareMapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 143,
                "jsdoctags": [
                    {
                        "name": "applicationRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "environmentInjector",
                        "type": "EnvironmentInjector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "popupService",
                        "type": "PopupService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "regionService",
                        "type": "RegionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shareMapService",
                        "type": "ShareMapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy",
                "OnInit",
                "DoCheck"
            ],
            "templateData": "<app-nav-bar\n  (goBack)=\"backHome()\"\n  [breadcrumbs]=\"(breadcrumbs$ | async) || []\"\n  area=\"EXPLORE\"></app-nav-bar>\n<div class=\"root-container\">\n  <!-- Map control panel -->\n  <app-map-control-panel\n    [boundaryConfig]=\"boundaryConfig$ | async\"\n    [conditionsConfig$]=\"conditionsConfig$\"\n    [mapHasDataLayer]=\"mapHasDataLayer$ | async\"\n    [maps]=\"maps\"\n    [mapViewOptions]=\"mapViewOptions$ | async\"\n    [selectedMap]=\"selectedMap$ | async\"\n    [selectedMapOpacity]=\"selectedMapOpacity$ | async\"\n    [disableRegion]=\"\n      !!planId || selectedAreaCreationAction !== AreaCreationAction.NONE\n    \"\n    (changeBaseLayer)=\"changeBaseLayer($event)\"\n    (changeBoundaryLayer)=\"toggleBoundaryLayer($event)\"\n    (changeConditionLayer)=\"changeConditionsLayer($event)\"\n    (changeMapCount)=\"changeMapCount($event)\"\n    (changeOpacity)=\"changeOpacity($event)\"\n    (selectMap)=\"selectMap($event)\"\n    (toggleExistingProjectsLayer)=\"\n      toggleExistingProjectsLayer($event)\n    \"></app-map-control-panel>\n\n  <!-- Display containers for leaflet maps (up to 4) -->\n  <div class=\"maps-container\">\n    <!-- Actions bar above the maps -->\n    <div class=\"map-actions-bar\" *ngIf=\"!this.planId\">\n      <div class=\"actions-bar-text\">START PLANNING:</div>\n\n      <!-- Draw a planning area -->\n      <div\n        matTooltip=\"This feature is not available at this time.\"\n        [matTooltipDisabled]=\"(drawRegionEnabled$ | async) || false\">\n        <button\n          mat-button\n          [disabled]=\"(drawRegionEnabled$ | async) === false || false\"\n          class=\"draw-area-button\"\n          [ngClass]=\"{\n            selected: selectedAreaCreationAction === AreaCreationAction.DRAW,\n            deselected: selectedAreaCreationAction === AreaCreationAction.UPLOAD\n          }\"\n          (click)=\"onAreaCreationActionChange(AreaCreationAction.DRAW)\">\n          <mat-icon>draw</mat-icon>\n          DRAW AREA\n        </button>\n      </div>\n\n      <!-- Upload a planning area -->\n      <div class=\"upload-wrapper\">\n        <div\n          matTooltip=\"This feature is not available at this time.\"\n          [matTooltipDisabled]=\"(drawRegionEnabled$ | async) || false\">\n          <button\n            mat-button\n            [disabled]=\"(drawRegionEnabled$ | async) === false || false\"\n            class=\"upload-area-button\"\n            [ngClass]=\"{\n              selected:\n                selectedAreaCreationAction === AreaCreationAction.UPLOAD,\n              deselected: selectedAreaCreationAction === AreaCreationAction.DRAW\n            }\"\n            (click)=\"onAreaCreationActionChange(AreaCreationAction.UPLOAD)\">\n            <mat-icon>upload_file</mat-icon>\n            UPLOAD AREA\n          </button>\n          <app-file-uploader\n            *ngIf=\"showUploader\"\n            class=\"file-uploader\"\n            requiredFileType=\"application/zip\"\n            (fileEvent)=\"loadArea($event)\"></app-file-uploader>\n        </div>\n      </div>\n\n      <!-- Cancel button -->\n      <button\n        *ngIf=\"\n          selectedAreaCreationAction === AreaCreationAction.DRAW ||\n          selectedAreaCreationAction === AreaCreationAction.UPLOAD\n        \"\n        mat-button\n        type=\"button\"\n        class=\"cancel-button\"\n        (click)=\"cancelAreaCreationAction()\">\n        CANCEL\n      </button>\n\n      <!-- Done (confirm area) button -->\n      <button\n        *ngIf=\"\n          selectedAreaCreationAction === AreaCreationAction.DRAW ||\n          selectedAreaCreationAction === AreaCreationAction.UPLOAD\n        \"\n        mat-button\n        type=\"button\"\n        class=\"done-button\"\n        [disabled]=\"(showConfirmAreaButton$ | async) === false\"\n        (click)=\"openCreatePlanDialog()\">\n        DONE\n      </button>\n    </div>\n\n    <!-- Maps (1, 2, or 4) -->\n    <div\n      class=\"map-grid\"\n      [ngClass]=\"{\n        'one-column': mapViewOptions$.getValue().numVisibleMaps === 1\n      }\">\n      <div\n        class=\"map-box\"\n        [ngClass]=\"{\n          selected: (mapViewOptions$ | async)?.selectedMapIndex === 0\n        }\"\n        [hidden]=\"!isMapVisible(0)\"\n        data-testid=\"map1\">\n        <app-map-nameplate\n          [map]=\"maps[0]\"\n          [selected]=\"(mapViewOptions$ | async)?.selectedMapIndex === 0\"\n          [width$]=\"mapNameplateWidths[0]\"></app-map-nameplate>\n        <div id=\"map1\" class=\"map\"></div>\n      </div>\n      <div\n        class=\"map-box\"\n        [ngClass]=\"{\n          selected: (mapViewOptions$ | async)?.selectedMapIndex === 1\n        }\"\n        [hidden]=\"!isMapVisible(1)\"\n        data-testid=\"map2\">\n        <app-map-nameplate\n          [map]=\"maps[1]\"\n          [selected]=\"(mapViewOptions$ | async)?.selectedMapIndex === 1\"\n          [width$]=\"mapNameplateWidths[1]\"></app-map-nameplate>\n        <div id=\"map2\" class=\"map\"></div>\n      </div>\n\n      <div\n        class=\"map-box\"\n        [ngClass]=\"{\n          selected: (mapViewOptions$ | async)?.selectedMapIndex === 2\n        }\"\n        [hidden]=\"!isMapVisible(2)\"\n        data-testid=\"map3\">\n        <app-map-nameplate\n          [map]=\"maps[2]\"\n          [selected]=\"(mapViewOptions$ | async)?.selectedMapIndex === 2\"\n          [width$]=\"mapNameplateWidths[2]\"></app-map-nameplate>\n        <div id=\"map3\" class=\"map\"></div>\n      </div>\n      <div\n        class=\"map-box\"\n        [ngClass]=\"{\n          selected: (mapViewOptions$ | async)?.selectedMapIndex === 3\n        }\"\n        [hidden]=\"!isMapVisible(3)\"\n        data-testid=\"map4\">\n        <app-map-nameplate\n          [map]=\"maps[3]\"\n          [selected]=\"(mapViewOptions$ | async)?.selectedMapIndex === 3\"\n          [width$]=\"mapNameplateWidths[3]\"></app-map-nameplate>\n        <div id=\"map4\" class=\"map\"></div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Used to display a summary when printing-->\n  <app-map-config-summary\n    class=\"config-summary\"\n    [boundaryConfig]=\"boundaryConfig$ | async\"\n    [conditionsConfig$]=\"conditionsConfig$\"\n    [mapHasDataLayer]=\"mapHasDataLayer$ | async\"\n    [maps]=\"maps\"\n    [mapViewOptions]=\"mapViewOptions$ | async\"></app-map-config-summary>\n</div>\n"
        },
        {
            "name": "MapConfigSummaryComponent",
            "id": "component-MapConfigSummaryComponent-9836bd4aa32855d845b80a36fd6816dc0c83fb8d2624e5fb2dfdc17448f23971b0e6994c33a0a504c87210fa48a96d2e0d3838b0dc1a0236224a680aca2f8cb7",
            "file": "src/app/map/map-config-summary/map-config-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map-config-summary",
            "styleUrls": [
                "./map-config-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map-config-summary.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "boundaryConfig",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "BoundaryConfig[] | null",
                    "decorators": []
                },
                {
                    "name": "conditionsConfig$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Observable<ConditionsConfig | null>",
                    "decorators": []
                },
                {
                    "name": "mapHasDataLayer",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "maps",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Map[]",
                    "decorators": []
                },
                {
                    "name": "mapViewOptions",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "MapViewOptions | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "BaseLayerType",
                    "defaultValue": "BaseLayerType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport {\n  BaseLayerType,\n  BoundaryConfig,\n  ConditionsConfig,\n  Map,\n  MapViewOptions,\n} from '../../types';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-map-config-summary',\n  templateUrl: './map-config-summary.component.html',\n  styleUrls: ['./map-config-summary.component.scss'],\n})\nexport class MapConfigSummaryComponent {\n  @Input() boundaryConfig: BoundaryConfig[] | null = null;\n  @Input() conditionsConfig$!: Observable<ConditionsConfig | null>;\n  @Input() mapHasDataLayer: boolean | null = false;\n  @Input() maps: Map[] = [];\n  @Input() mapViewOptions: MapViewOptions | null = null;\n\n  readonly BaseLayerType = BaseLayerType;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "dt {\n  font-weight: bold;\n}\ndd {\n  margin: 0;\n}\n",
                    "styleUrl": "./map-config-summary.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  *ngFor=\"\n    let map of maps.slice(0, mapViewOptions?.numVisibleMaps || 1);\n    index as i\n  \">\n  <div *ngIf=\"(mapViewOptions?.numVisibleMaps || 1) > 1\">Map {{ i + 1 }}</div>\n  <dl>\n    <dt>Basemap</dt>\n    <dd>{{ BaseLayerType[map.config.baseLayerType] }}</dd>\n    <dt>Boundaries</dt>\n    <dd>{{ map.config.boundaryLayerConfig.display_name }}</dd>\n    <ng-container *ngIf=\"map.config.showExistingProjectsLayer\">\n      <dt>Recent treatment areas</dt>\n      <dd>Includes Existing Projects</dd>\n    </ng-container>\n    <dt>Regional Resource Kit Data</dt>\n    <dd>{{ map.config.dataLayerConfig.display_name }}</dd>\n  </dl>\n</div>\n"
        },
        {
            "name": "MapControlPanelComponent",
            "id": "component-MapControlPanelComponent-10d984afc5761b0cb45cd9efb038fd23c36453ed7e953910247cb7a5c9cdfb971d99a0f3eb7b708a7d7c515cb3dadb1001e0956004f085fd4db6b3ec937c94ed",
            "file": "src/app/map/map-control-panel/map-control-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map-control-panel",
            "styleUrls": [
                "./map-control-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map-control-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "boundaryConfig",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "BoundaryConfig[] | null",
                    "decorators": []
                },
                {
                    "name": "conditionsConfig$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "Observable<ConditionsConfig | null>",
                    "decorators": []
                },
                {
                    "name": "disableRegion",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mapHasDataLayer",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "maps",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "Map[]",
                    "decorators": []
                },
                {
                    "name": "mapViewOptions",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "MapViewOptions | null",
                    "decorators": []
                },
                {
                    "name": "selectedMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "Map | null",
                    "decorators": []
                },
                {
                    "name": "selectedMapOpacity",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "number | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeBaseLayer",
                    "defaultValue": "new EventEmitter<Map>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "changeBoundaryLayer",
                    "defaultValue": "new EventEmitter<Map>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "changeConditionLayer",
                    "defaultValue": "new EventEmitter<Map>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter"
                },
                {
                    "name": "changeMapCount",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "EventEmitter"
                },
                {
                    "name": "changeOpacity",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectMap",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggleExistingProjectsLayer",
                    "defaultValue": "new EventEmitter<Map>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "BaseLayerType",
                    "defaultValue": "BaseLayerType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "baseLayerTypes",
                    "defaultValue": "[\n    BaseLayerType.Road,\n    BaseLayerType.Terrain,\n    BaseLayerType.Satellite,\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "conditionTrees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ConditionTreeComponent>",
                    "optional": true,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "ConditionTreeComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "dataTypeEnum",
                    "defaultValue": "ConditionTreeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "future_control_panel_enabled",
                    "defaultValue": "features.show_future_control_panel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "futureDataEnabled",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "noneBoundaryConfig",
                    "defaultValue": "NONE_BOUNDARY_CONFIG",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "noneDataLayerConfig",
                    "defaultValue": "NONE_DATA_LAYER_CONFIG",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "rawDataEnabled",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "translated_control_panel_enabled",
                    "defaultValue": "features.show_translated_control_panel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "translatedDataEnabled",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 68
                }
            ],
            "methodsClass": [
                {
                    "name": "clearAll",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enableClearAllButton",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unstyleConditionTree",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Map Legend Display Strings</p>\n",
            "rawdescription": "\nMap Legend Display Strings",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport { Subject, Observable, takeUntil } from 'rxjs';\nimport {\n  BaseLayerType,\n  BoundaryConfig,\n  ConditionsConfig,\n  NONE_BOUNDARY_CONFIG,\n} from 'src/app/types';\nimport * as L from 'leaflet';\n\nimport {\n  NONE_DATA_LAYER_CONFIG,\n  ConditionTreeType,\n} from './../../types/data.types';\nimport { Map, MapViewOptions } from './../../types/map.types';\nimport { ConditionTreeComponent } from './condition-tree/condition-tree.component';\nimport features from '../../features/features.json';\n\n/** Map Legend Display Strings */\n\n@Component({\n  selector: 'app-map-control-panel',\n  templateUrl: './map-control-panel.component.html',\n  styleUrls: ['./map-control-panel.component.scss'],\n})\nexport class MapControlPanelComponent implements OnInit {\n  @ViewChildren(ConditionTreeComponent)\n  conditionTrees?: QueryList<ConditionTreeComponent>;\n\n  @Input() boundaryConfig: BoundaryConfig[] | null = null;\n  @Input() conditionsConfig$!: Observable<ConditionsConfig | null>;\n  @Input() mapHasDataLayer: boolean | null = false;\n  @Input() maps: Map[] = [];\n  @Input() mapViewOptions: MapViewOptions | null = null;\n  @Input() selectedMap?: Map | null;\n  @Input() selectedMapOpacity?: number | null = null;\n  @Input() disableRegion = true;\n\n  @Output() changeBaseLayer = new EventEmitter<Map>();\n  @Output() changeBoundaryLayer = new EventEmitter<Map>();\n  @Output() changeConditionLayer = new EventEmitter<Map>();\n  @Output() changeMapCount = new EventEmitter<number>();\n  @Output() changeOpacity = new EventEmitter<number>();\n  @Output() selectMap = new EventEmitter<number>();\n  @Output() toggleExistingProjectsLayer = new EventEmitter<Map>();\n\n  readonly baseLayerTypes: number[] = [\n    BaseLayerType.Road,\n    BaseLayerType.Terrain,\n    BaseLayerType.Satellite,\n  ];\n  readonly BaseLayerType = BaseLayerType;\n\n  readonly noneBoundaryConfig = NONE_BOUNDARY_CONFIG;\n  readonly noneDataLayerConfig = NONE_DATA_LAYER_CONFIG;\n\n  private readonly destroy$ = new Subject<void>();\n  // Region-specific data flags\n  rawDataEnabled: boolean | null = null;\n  translatedDataEnabled: boolean | null = null;\n  futureDataEnabled: boolean | null = null;\n\n  // General data flags\n  future_control_panel_enabled = features.show_future_control_panel;\n  translated_control_panel_enabled = features.show_translated_control_panel;\n\n  public dataTypeEnum = ConditionTreeType;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.conditionsConfig$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((config: ConditionsConfig | null) => {\n        this.rawDataEnabled = config?.raw_data!;\n        this.translatedDataEnabled = config?.translated_data!;\n        this.futureDataEnabled = config?.future_data!;\n      });\n  }\n\n  enableClearAllButton(map: Map): boolean {\n    return (\n      map.config.boundaryLayerConfig !== NONE_BOUNDARY_CONFIG ||\n      map.config.showExistingProjectsLayer ||\n      map.config.dataLayerConfig !== NONE_DATA_LAYER_CONFIG\n    );\n  }\n\n  clearAll(map: Map): void {\n    map.config.boundaryLayerConfig = NONE_BOUNDARY_CONFIG;\n    this.changeBoundaryLayer.emit(map);\n    map.config.showExistingProjectsLayer = false;\n    this.toggleExistingProjectsLayer.emit(map);\n    map.config.dataLayerConfig = NONE_DATA_LAYER_CONFIG;\n    if (map.legend) {\n      L.DomUtil.remove(map.legend);\n    }\n    this.changeConditionLayer.emit(map);\n    this.conditionTrees?.forEach((el) => el.unstyleAndDeselectAllNodes());\n  }\n\n  unstyleConditionTree(index: number): void {\n    this.conditionTrees?.get(index)?.unstyleAndDeselectAllNodes();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'sass:map';\n@use '@angular/material' as mat;\n@import \"../../../styles/colors\";\n\n.controls-container {\n  background-color: white;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding-top: 20px;\n  width: 400px;\n}\n\n.title-container {\n  margin-bottom: 24px;\n  padding: 0px 24px 0px 24px;\n}\n\nh1 {\n  font-size: 16px;\n  font-weight: 300;\n  text-align: center;\n}\n\nh2 {\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 40px;\n  margin: 0px;\n  text-align: center;\n}\n\nh3 {\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 15px;\n  margin: 0px;\n  text-align: center;\n}\n\n.transparency-box {\n  border: 1px solid #b3b3b3;\n  border-radius: 8px;\n  padding: 12px 16px;\n}\n\n// Styling for the buttons to switch between 1, 2, and 4 maps\n.map-count-button-row {\n  display: flex;\n  justify-content: center;\n  margin-top: 16px;\n}\n\n.map-count-button {\n  align-items: center;\n  background-color: #f1eff2;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  height: 28px;\n  justify-content: center;\n  margin-left: 2px;\n  margin-right: 2px;\n  width: 72px;\n}\n\n.map-count-button.selected {\n  background-color: #e4e2e5;\n}\n\n.map-count-button-grid-row {\n  display: flex;\n  justify-content: center;\n}\n\n.map-count-button-grid-cell {\n  border: 1px solid #656367;\n  border-radius: 1px;\n  box-sizing: border-box;\n  height: 8px;\n  margin-right: 1px;\n  margin-bottom: 1px;\n  width: 8px;\n}\n\n.layer-controls-divider {\n  margin-bottom: 20px;\n  margin-top: 20px;\n}\n\n.clear-all-button-wrapper {\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  background: #FFF;\n  display: flex;\n  justify-content: center;\n  padding: 12px;\n}\n\n.layer-control-container {\n  display: flex;\n  flex-direction: row;\n  margin: 5px;\n}\n\n.layer-controls-tab-group {\n  flex: 1;\n  overflow-y: auto;\n}\n\n.layer-radio-group {\n  align-items: flex-start;\n  display: flex;\n  flex-direction: column;\n  margin: 15px 0;\n}\n\n.layer-single-radio-button {\n  margin: 15px 0;\n}\n\n.layer-checkbox {\n  margin: 15px 0;\n}\n\n.layer-panel-header {\n  background-color: #d8d8d8 !important;\n  font-size: 14px;\n  font-weight: 700;\n  height: 40px !important;\n  line-height: 20px;\n}\n\n.flex-center {\n  display: flex;\n  justify-content: center;\n}\n\n// Overrides of Material component styles\n\n::ng-deep .mat-radio-checked {\n  label {\n    color: $color-standard-blue;\n  }\n}\n\n::ng-deep .mat-expansion-panel-body {\n  padding-bottom: 0px !important;\n}\n\n// Workaround for unresolved Angular bug re: tab width on desktop\n// (https://github.com/angular/components/issues/2829).\n::ng-deep .mat-tab-label {\n  min-width: 60px !important;\n}\n\n.region-wrapper {\n  display: flex;\n  padding: 0 24px 24px;\n  align-items: center;\n  justify-content: space-between;\n}\n",
                    "styleUrl": "./map-control-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 75
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"controls-container\">\n  <h1><b>Map Control Panel</b></h1>\n  <div class=\"region-wrapper\">\n    <div>Region</div>\n    <app-region-dropdown [disabled]=\"disableRegion\"></app-region-dropdown>\n  </div>\n\n  <div *ngIf=\"mapHasDataLayer\" class=\"title-container\">\n    <div class=\"transparency-box\">\n      <!-- Opacity controls for the currently shown data layer -->\n      <app-opacity-slider\n        (changeOpacity)=\"changeOpacity.emit($event)\"\n        [opacity]=\"selectedMapOpacity\"\n        label=\"Data Transparency: \"></app-opacity-slider>\n    </div>\n  </div>\n\n  <h3><b>Map Views</b></h3>\n\n  <!-- Controls for specifying how many maps should be shown -->\n  <div class=\"map-count-button-row\">\n    <button\n      mat-button\n      class=\"map-count-button\"\n      (click)=\"changeMapCount.emit(1)\"\n      aria-label=\"Show 1 map\"\n      [ngClass]=\"{ selected: mapViewOptions?.numVisibleMaps === 1 }\">\n      <div class=\"map-count-button-grid-cell\"></div>\n    </button>\n    <button\n      mat-button\n      class=\"map-count-button\"\n      (click)=\"changeMapCount.emit(2)\"\n      aria-label=\"Show 2 maps\"\n      [ngClass]=\"{ selected: mapViewOptions?.numVisibleMaps === 2 }\">\n      <div class=\"map-count-button-grid-row\">\n        <div class=\"map-count-button-grid-cell\"></div>\n        <div class=\"map-count-button-grid-cell\"></div>\n      </div>\n    </button>\n    <button\n      mat-button\n      class=\"map-count-button\"\n      (click)=\"changeMapCount.emit(4)\"\n      aria-label=\"Show 4 maps\"\n      [ngClass]=\"{ selected: mapViewOptions?.numVisibleMaps === 4 }\">\n      <div class=\"map-count-button-grid-row\">\n        <div class=\"map-count-button-grid-cell\"></div>\n        <div class=\"map-count-button-grid-cell\"></div>\n      </div>\n      <div class=\"map-count-button-grid-row\">\n        <div class=\"map-count-button-grid-cell\"></div>\n        <div class=\"map-count-button-grid-cell\"></div>\n      </div>\n    </button>\n  </div>\n\n  <!-- Layer controls for each map, displayed in tabs -->\n  <mat-tab-group\n    mat-align-tabs=\"center\"\n    mat-stretch-tabs=\"true\"\n    [selectedIndex]=\"mapViewOptions?.selectedMapIndex\"\n    class=\"layer-controls-tab-group\"\n    (selectedIndexChange)=\"selectMap.emit($event)\">\n    <mat-tab *ngFor=\"let map of maps; index as i\" label=\"MAP {{ map.name }}\">\n      <!-- Clear All button -->\n      <div class=\"clear-all-button-wrapper\">\n        <button\n          mat-raised-button\n          color=\"primary\"\n          [disabled]=\"!enableClearAllButton(map)\"\n          (click)=\"clearAll(map)\">\n          CLEAR ALL\n        </button>\n      </div>\n\n      <mat-accordion multi displayMode=\"flat\">\n        <!-- Basemap layer controls -->\n        <mat-expansion-panel expanded=\"true\">\n          <mat-expansion-panel-header class=\"layer-panel-header\">\n            Basemaps\n          </mat-expansion-panel-header>\n          <mat-radio-group\n            name=\"{{ map.id + '-base-layer-select' }}\"\n            aria-label=\"Select an option\"\n            class=\"layer-radio-group\"\n            [(ngModel)]=\"map.config.baseLayerType\"\n            color=\"primary\"\n            (change)=\"changeBaseLayer.emit(map)\">\n            <div\n              class=\"layer-control-container\"\n              *ngFor=\"let baseLayerType of baseLayerTypes\">\n              <mat-radio-button\n                [value]=\"baseLayerType\"\n                checked=\"{{ baseLayerType === map.config.baseLayerType }}\">\n                {{ BaseLayerType[baseLayerType] }}\n              </mat-radio-button>\n            </div>\n          </mat-radio-group>\n        </mat-expansion-panel>\n\n        <!-- Boundary layer controls -->\n        <mat-expansion-panel expanded=\"true\">\n          <mat-expansion-panel-header class=\"layer-panel-header\">\n            Boundaries\n          </mat-expansion-panel-header>\n          <mat-radio-group\n            name=\"{{ map.id + '-boundaries-select' }}\"\n            aria-label=\"Select an option\"\n            class=\"layer-radio-group\"\n            color=\"primary\"\n            [(ngModel)]=\"map.config.boundaryLayerConfig\"\n            (change)=\"changeBoundaryLayer.emit(map)\">\n            <div class=\"layer-control-container\">\n              <mat-radio-button [value]=\"noneBoundaryConfig\">\n                None\n              </mat-radio-button>\n            </div>\n            <div\n              *ngFor=\"let boundary of boundaryConfig\"\n              class=\"layer-control-container\">\n              <mat-radio-button [value]=\"boundary\">\n                {{\n                  boundary.display_name\n                    ? boundary.display_name\n                    : boundary.boundary_name\n                }}\n              </mat-radio-button>\n            </div>\n          </mat-radio-group>\n        </mat-expansion-panel>\n\n        <!-- Recent treatment areas controls -->\n        <mat-expansion-panel expanded=\"false\">\n          <mat-expansion-panel-header class=\"layer-panel-header\">\n            Recent treatment areas\n          </mat-expansion-panel-header>\n          <div class=\"layer-control-container\">\n            <mat-checkbox\n              name=\"{{ map.id + '-existing-projects-toggle' }}\"\n              aria-label=\"Select or deselect\"\n              color=\"primary\"\n              class=\"layer-checkbox\"\n              [(ngModel)]=\"map.config.showExistingProjectsLayer\"\n              (change)=\"toggleExistingProjectsLayer.emit(map)\">\n              Existing projects\n            </mat-checkbox>\n          </div>\n        </mat-expansion-panel>\n\n        <!-- Current condition controls -->\n        <div *ngIf=\"rawDataEnabled\">\n          <app-condition-tree\n            #conditionTreeRaw\n            [conditionsConfig$]=\"conditionsConfig$\"\n            [header]=\"'Regional Resource Kit Data'\"\n            [map]=\"map\"\n            [dataType]=\"dataTypeEnum.RAW\"\n            (changeConditionLayer)=\"\n              changeConditionLayer.emit($event); unstyleConditionTree(1)\n            \"></app-condition-tree>\n        </div>\n\n        <!-- Normalized current condition controls - not in use -->\n        <div *ngIf=\"translated_control_panel_enabled && translatedDataEnabled\">\n          <app-condition-tree\n            #conditionTreeNormalized\n            [conditionsConfig$]=\"conditionsConfig$\"\n            [header]=\"'Current Condition'\"\n            [map]=\"map\"\n            [dataType]=\"dataTypeEnum.TRANSLATED\"\n            (changeConditionLayer)=\"\n              changeConditionLayer.emit($event); unstyleConditionTree(0)\n            \"></app-condition-tree>\n        </div>\n\n        <!-- Future condition controls  - not in use -->\n        <div *ngIf=\"future_control_panel_enabled && futureDataEnabled\">\n          <app-condition-tree\n            #conditionTreeNormalized\n            [conditionsConfig$]=\"conditionsConfig$\"\n            [header]=\"'Future Climate Stability'\"\n            [map]=\"map\"\n            [dataType]=\"dataTypeEnum.FUTURE\"\n            (changeConditionLayer)=\"\n              changeConditionLayer.emit($event); unstyleConditionTree(0)\n            \"></app-condition-tree>\n        </div>\n\n        <!-- No Data Region controls  - not in use -->\n        <div *ngIf=\"translated_control_panel_enabled && !translatedDataEnabled\">\n          <mat-expansion-panel disabled=\"true\">\n            <mat-expansion-panel-header class=\"layer-panel-header\">\n              <mat-panel-title>\n                Current Conditions (coming soon)\n              </mat-panel-title>\n            </mat-expansion-panel-header>\n          </mat-expansion-panel>\n        </div>\n        <!--  not in use -->\n        <div *ngIf=\"future_control_panel_enabled && !futureDataEnabled\">\n          <mat-expansion-panel disabled=\"true\">\n            <mat-expansion-panel-header class=\"layer-panel-header\">\n              <mat-panel-title>\n                Future Climate Stability (coming soon)\n              </mat-panel-title>\n            </mat-expansion-panel-header>\n          </mat-expansion-panel>\n        </div>\n\n        <!-- Ecosystem scores controls -->\n        <!-- <ng-container *appFeatureFlag=\"'unlaunched_layers'\">\n          <mat-expansion-panel expanded=\"false\">\n            <mat-expansion-panel-header class=\"layer-panel-header\">\n              <mat-panel-title>\n                Ecosystem scores\n              </mat-panel-title>\n            </mat-expansion-panel-header>\n            <div class=\"layer-control-container flex-center\">\n              <mat-radio-group class=\"layer-radio-group\" color=\"primary\" [(ngModel)]=\"map.config.dataLayerConfig\">\n                <mat-radio-button (change)=\"conditionTreeRaw.toggleAllLayersOff();\n                  conditionTreeNormalized.toggleAllLayersOff()\"\n                  color=\"primary\"\n                  [value]=\"noneDataLayerConfig\">\n                  All Layers Off\n                </mat-radio-button>\n              </mat-radio-group>\n            </div>\n          </mat-expansion-panel>\n        </ng-container> -->\n\n        <!-- Disturbances controls -->\n        <ng-container *appFeatureFlag=\"'unlaunched_layers'\">\n          <mat-expansion-panel disabled=\"true\">\n            <mat-expansion-panel-header class=\"layer-panel-header\">\n              <mat-panel-title>Disturbances</mat-panel-title>\n              <mat-panel-description>Coming soon!</mat-panel-description>\n            </mat-expansion-panel-header>\n          </mat-expansion-panel>\n        </ng-container>\n\n        <!-- HVRAs controls -->\n        <ng-container *appFeatureFlag=\"'unlaunched_layers'\">\n          <mat-expansion-panel disabled=\"true\">\n            <mat-expansion-panel-header class=\"layer-panel-header\">\n              <mat-panel-title>HVRAs</mat-panel-title>\n              <mat-panel-description>Coming soon!</mat-panel-description>\n            </mat-expansion-panel-header>\n          </mat-expansion-panel>\n        </ng-container>\n\n        <!-- Land types controls -->\n        <ng-container *appFeatureFlag=\"'unlaunched_layers'\">\n          <mat-expansion-panel disabled=\"true\">\n            <mat-expansion-panel-header class=\"layer-panel-header\">\n              <mat-panel-title>Land types</mat-panel-title>\n              <mat-panel-description>Coming soon!</mat-panel-description>\n            </mat-expansion-panel-header>\n          </mat-expansion-panel>\n        </ng-container>\n\n        <!-- Operability controls -->\n        <ng-container *appFeatureFlag=\"'unlaunched_layers'\">\n          <mat-expansion-panel disabled=\"true\">\n            <mat-expansion-panel-header class=\"layer-panel-header\">\n              <mat-panel-title>Operability</mat-panel-title>\n              <mat-panel-description>Coming soon!</mat-panel-description>\n            </mat-expansion-panel-header>\n          </mat-expansion-panel>\n        </ng-container>\n      </mat-accordion>\n    </mat-tab>\n  </mat-tab-group>\n</div>\n"
        },
        {
            "name": "MapNameplateComponent",
            "id": "component-MapNameplateComponent-71dec78ec4e42feff93a7e1c5e15218279a81c220161c4452b0ff6974becf6e67ffd728df2740c9a6a0db89b70e8d5f75efa21b5f34023af450bf8642e33c005",
            "file": "src/app/map/map-nameplate/map-nameplate.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map-nameplate",
            "styleUrls": [
                "./map-nameplate.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map-nameplate.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "map",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Map | null",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "width$",
                    "defaultValue": "of(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Observable<number | null>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "widthInPx",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "widthToPx",
                    "args": [
                        {
                            "name": "width",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCompute the maximum width of the nameplate, accounting for the Leaflet\n attribution control.\n",
                    "description": "<p>Compute the maximum width of the nameplate, accounting for the Leaflet\n attribution control.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, Input } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Map } from 'src/app/types';\n\nexport const NAMEPLATE_RIGHT_MARGIN = 16;\n\n@Component({\n  selector: 'app-map-nameplate',\n  templateUrl: './map-nameplate.component.html',\n  styleUrls: ['./map-nameplate.component.scss'],\n})\nexport class MapNameplateComponent implements AfterViewInit {\n  @Input() map: Map | null = null;\n  @Input() selected: boolean = false;\n  @Input() width$: Observable<number | null> = of(null);\n\n  widthInPx: string = '100%';\n\n  ngAfterViewInit() {\n    this.width$.pipe(filter((width) => !!width)).subscribe((width) => {\n      // Timeout is required to avoid triggering changes too quickly,\n      // which causes errors with Angular's change detection.\n      setTimeout(() => {\n        this.widthInPx = this.widthToPx(width);\n      }, 0);\n    });\n  }\n\n  /** Compute the maximum width of the nameplate, accounting for the Leaflet\n   *  attribution control.\n   */\n  private widthToPx(width: number | null): string {\n    if (width != null) {\n      return Number(width - NAMEPLATE_RIGHT_MARGIN)\n        .toString()\n        .concat('px');\n    }\n    return '100%';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".map-config-string {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.map-name {\n  margin-left: 16px;\n  margin-right: 16px;\n}\n\n.map-nameplate {\n  align-items: center;\n  background-color: #ffffff;\n  bottom: 0px;\n  box-sizing: border-box;\n  display: flex;\n  height: 30px;\n  min-width: 0;\n  opacity: 50%;\n  padding-right: 16px;\n  position: absolute;\n  z-index: 10;\n}\n\n.map-nameplate.selected {\n  opacity: 80%;\n}\n",
                    "styleUrl": "./map-nameplate.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div\n  class=\"map-nameplate\"\n  [style.max-width]=\"widthInPx\"\n  [class.selected]=\"selected\"\n  [matTooltip]=\"map?.config | stringifyMapConfig\"\n  [matTooltipClass]=\"'map-nameplate-tooltip'\">\n  <div class=\"map-name\">{{ map?.name }}</div>\n  <div class=\"map-config-string\">{{ map?.config | stringifyMapConfig }}</div>\n</div>\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-d627613e8fed55d07621bdc94c48a6d85f78961f9957f3154102a9382dd51050cb0a3eb3ffdc2cc31e64e75e81a08079f074ec642baaff9389fdb5c8ecabe128",
            "file": "src/app/account/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUrl",
                    "defaultValue": "this.route.snapshot.firstChild?.url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AuthService } from '@services';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss'],\n})\nexport class MenuComponent {\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  logout() {\n    this.authService.logout().subscribe((_) => {\n      this.router.navigate(['/']);\n    });\n  }\n\n  currentUrl = this.route.snapshot.firstChild?.url;\n\n  isSelected(item: string) {\n    return this.currentUrl && this.currentUrl.toString() === item;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  box-sizing: border-box;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 26px;\n}\n\na {\n  display: block;\n  background-color: white;\n  border-bottom: 3px solid #E1E1E1;\n  color: #767575;\n  padding: 10px 6px;\n  text-decoration: none;\n\n  &:hover, &.active {\n    text-decoration: underline;\n    background-color: #4A4A4A;\n    color: white;\n    border-bottom-color: #FFCD66;\n  }\n\n}\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<a\n  routerLink=\"/account/information\"\n  [ngClass]=\"{ active: isSelected('information') }\"\n  >Personal Information</a\n>\n<a\n  routerLink=\"/account/credentials\"\n  [ngClass]=\"{ active: isSelected('credentials') }\"\n  >Credentials</a\n>\n<a\n  routerLink=\"/account/delete-account\"\n  [ngClass]=\"{ active: isSelected('delete-account') }\"\n  >Deactivate Account</a\n>\n<a (click)=\"logout()\">Sign Out</a>\n"
        },
        {
            "name": "NavBarComponent",
            "id": "component-NavBarComponent-e79bab0e5c81077230c768b8857ba55ed5bd97577ec68b33bcad886ea119b470a9121acd9230cba15a299511613fc84833ddc1184e739e87049e31e0230acde0",
            "file": "src/app/shared/nav-bar/nav-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-bar",
            "styleUrls": [
                "./nav-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "area",
                    "defaultValue": "'EXPLORE'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "\"SCENARIOS\" | \"EXPLORE\" | \"SCENARIO\"",
                    "decorators": []
                },
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Breadcrumb[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "goBack",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "canSharePlan$",
                    "defaultValue": "this.route.snapshot?.params && this.route.snapshot?.params['id']\n      ? this.planStateService\n          .getPlan(this.route.snapshot.params['id'])\n          .pipe(map((plan) => canViewCollaborators(plan)))\n      : of(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "hasSharePlanFeatureFlag",
                    "defaultValue": "this.featureService.isFeatureEnabled('show_share_modal')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "print",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "share",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sharePlan",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { WINDOW } from '@services/window.service';\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\nimport { ShareExploreDialogComponent } from '../share-explore-dialog/share-explore-dialog.component';\nimport { SharePlanDialogComponent } from '../../home/share-plan-dialog/share-plan-dialog.component';\nimport { FeatureService } from '../../features/feature.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { map, of } from 'rxjs';\nimport { PlanStateService } from '@services';\nimport { canViewCollaborators } from '../../plan/permissions';\n\nexport interface Breadcrumb {\n  name: string;\n  path?: string;\n}\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.scss'],\n})\nexport class NavBarComponent {\n  @Input() breadcrumbs: Breadcrumb[] = [];\n  @Input() area: 'SCENARIOS' | 'EXPLORE' | 'SCENARIO' = 'EXPLORE';\n  @Output() goBack = new EventEmitter<void>();\n\n  hasSharePlanFeatureFlag =\n    this.featureService.isFeatureEnabled('show_share_modal');\n\n  canSharePlan$ =\n    this.route.snapshot?.params && this.route.snapshot?.params['id']\n      ? this.planStateService\n          .getPlan(this.route.snapshot.params['id'])\n          .pipe(map((plan) => canViewCollaborators(plan)))\n      : of(false);\n\n  constructor(\n    @Inject(WINDOW) private window: Window,\n    private dialog: MatDialog,\n    private featureService: FeatureService,\n    private route: ActivatedRoute,\n    private planStateService: PlanStateService\n  ) {}\n\n  print() {\n    this.window.print();\n  }\n\n  share() {\n    this.dialog.open(ShareExploreDialogComponent, { restoreFocus: false });\n  }\n\n  sharePlan() {\n    this.dialog.open(SharePlanDialogComponent, {\n      data: {\n        planningAreaName: '\"' + this.breadcrumbs[0].name + '\"',\n        planningAreaId: this.route.snapshot.params['id'],\n      },\n      restoreFocus: false,\n      panelClass: 'no-padding-dialog',\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../shared/_variables.scss';\n@import \"../../../styles/colors\";\n@import \"../../../styles/mixins\";\n\n.nav-bar {\n  display: flex;\n  align-items: center;\n  background-color: white;\n  height: $navbar-height;\n  position: relative;\n  z-index: 200;\n  padding-left: 18px;\n  gap: 10px;\n\n  .mat-icon-button .mat-icon {\n    line-height: 22px;\n  }\n}\n\n\n.back-button {\n  line-height: 0; // override line height from .mat-icon-button\n}\n\n\n.actions {\n  margin-left: auto;\n  display: flex;\n  align-items: center;\n  padding-right: 10px;\n}\n\n.action-button {\n  color: #3367d6;\n  text-transform: uppercase;\n\n  &::ng-deep .mat-button-wrapper {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n  }\n}\n\n.help {\n  line-height: 38px;\n}\n\n.tooltip {\n  padding: 20px;\n}\n\n.breadcrumb {\n  @include standard-input-label();\n\n  a {\n    color: $color-standard-blue;\n    text-decoration: none;\n\n    &:hover, &:active {\n      text-decoration: underline;\n      color: $color-main-blue\n    }\n  }\n}\n",
                    "styleUrl": "./nav-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "featureService",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "featureService",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"nav-bar mat-elevation-z2\">\n  <button mat-icon-button (click)=\"goBack.emit()\" class=\"back-button\">\n    <mat-icon color=\"primary\">arrow_back</mat-icon>\n  </button>\n  <span class=\"breadcrumb\">\n    <a [routerLink]=\"'/home'\">Planning Areas</a>\n\n    <ng-container *ngFor=\"let breadcrumb of breadcrumbs\">\n      /\n      <a [routerLink]=\"breadcrumb.path\" *ngIf=\"breadcrumb.path\">\n        {{ breadcrumb.name }}</a\n      >\n      <span *ngIf=\"!breadcrumb.path\">{{ breadcrumb.name }}</span>\n    </ng-container>\n  </span>\n  <div class=\"actions\">\n    <button mat-icon-button class=\"help\" [matMenuTriggerFor]=\"popoverMenu\">\n      <mat-icon class=\"material-symbols-outlined\" color=\"primary\">\n        info_outline\n      </mat-icon>\n      <mat-menu #popoverMenu=\"matMenu\">\n        <div [ngSwitch]=\"area\" class=\"tooltip\">\n          <div *ngSwitchCase=\"'SCENARIO'\">\n            <p>\n              Start planning your scenario to generate your project areas. Enter\n              a name for your scenario at the top left, select your management\n              question, enter your constraints and select Generate. You can only\n              select one management question per run. Note that the run will\n              take longer if you select Medium or Small stand sizes, and we\n              recommend that you start with Large to review your outputs.\n            </p>\n          </div>\n\n          <div *ngSwitchCase=\"'SCENARIOS'\">\n            <p>\n              The scenario page lists all the scenarios that you have created\n              for a planning area. You will likely have numerous scenarios for\n              any planning area. The scenario list provides detail about the\n              status of each scenario, including any that are currently running.\n              Note that the planning area is shown in the upper left of the\n              navigation bar.\n            </p>\n            <p>\n              The left panel gives you information about the entire planning\n              area in which the scenario is running: an overview of the planning\n              area in the map, total available acres, number of scenarios, the\n              region, the plan owner, the date the plan was originally created\n              and when it was last updated.\n            </p>\n            <p>\n              There is also a Notes field in the left panel. If there are notes\n              you want to put in about your scenarios or other outputs, they can\n              be entered here.\n            </p>\n          </div>\n          <div *ngSwitchCase=\"'EXPLORE'\">\n            <p>\n              This page allows you to explore all the data in the RRKs for your\n              region. You can select a region from the dropdown menu, and then\n              use the selectors below to set up your map(s). You can look at 1,\n              2 or 4 maps simultaneously, and select a different set of data and\n              layers to visualize for each map. The map area remains constant\n              for all maps.\n            </p>\n            <p>\n              See\n              <a\n                href=\"https://github.com/OurPlanscape/Planscape/wiki/Planscape-User-Guide#exploring-maps\"\n                target=\"_blank\">\n                exploring maps\n              </a>\n              for more info.\n            </p>\n          </div>\n        </div>\n      </mat-menu>\n    </button>\n    <button\n      mat-button\n      class=\"action-button\"\n      (click)=\"share()\"\n      data-id=\"share\"\n      *ngIf=\"area === 'EXPLORE'\">\n      Share\n    </button>\n\n    <button\n      mat-button\n      class=\"action-button\"\n      (click)=\"sharePlan()\"\n      data-id=\"share\"\n      *ngIf=\"\n        area === 'SCENARIOS' &&\n        hasSharePlanFeatureFlag &&\n        (canSharePlan$ | async)\n      \">\n      Share\n    </button>\n\n    <button mat-button class=\"action-button\" (click)=\"print()\" data-id=\"print\">\n      <mat-icon class=\"material-symbols-outlined\" color=\"primary\">\n        print\n      </mat-icon>\n      Print\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-372408255d6e3e4e70aa74df6dd501d95820b663038d7bd9790aecc7211f78d1a27c5be571e4bff89cdabfdce68760f93ceeef6572418c91888c8148a78c12e2",
            "file": "src/app/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.scss'],\n})\nexport class NavigationComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./navigation.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "OpacitySliderComponent",
            "id": "component-OpacitySliderComponent-7fa564488dba5c4d10d15c4d7ccddaa323f2f20c26d78995f515eb4162c5e78315726e1ed429698b0a83e053ec2eeea5da17ea7351dac2b680784df6865d29f4",
            "file": "src/app/shared/opacity-slider/opacity-slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-opacity-slider",
            "styleUrls": [
                "./opacity-slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./opacity-slider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "opacity",
                    "defaultValue": "FrontendConstants.MAP_DATA_LAYER_OPACITY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number | null | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeOpacity",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "opacityPercentage",
                    "defaultValue": "FrontendConstants.MAP_DATA_LAYER_OPACITY * 100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FrontendConstants } from 'src/app/types';\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  OnChanges,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-opacity-slider',\n  templateUrl: './opacity-slider.component.html',\n  styleUrls: ['./opacity-slider.component.scss'],\n})\nexport class OpacitySliderComponent implements OnChanges {\n  @Input() opacity: number | null | undefined =\n    FrontendConstants.MAP_DATA_LAYER_OPACITY;\n  @Input() label: string | null = '';\n  @Output() changeOpacity = new EventEmitter<number>();\n\n  opacityPercentage: number = FrontendConstants.MAP_DATA_LAYER_OPACITY * 100;\n\n  ngOnChanges(): void {\n    if (this.opacity !== undefined && this.opacity !== null) {\n      this.opacityPercentage = this.opacity * 100;\n    }\n  }\n\n  onChange(value: number | null): void {\n    if (value != null) this.changeOpacity.emit(value / 100);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".root-container {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  padding: 0px 24px 0px 24px;\n  width: 100%;\n}\n\n.opacity-slider-wrapper {\n  align-items: center;\n  display: flex;\n  font-size: 12px;\n  justify-content: stretch;\n  width: 100%;\n}\n\nh1 {\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 15px;\n  margin-bottom: 0px;\n  text-align: center;\n}\n\n.opacity-slider {\n  flex-grow: 1;\n  padding-top: 0px;\n}\n",
                    "styleUrl": "./opacity-slider.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"root-container\">\n  <div class=\"opacity-slider-wrapper\">\n    {{ label }}\n    <mat-slider\n      class=\"opacity-slider\"\n      color=\"primary\"\n      [min]=\"0\"\n      [max]=\"100\"\n      [thumbLabel]=\"true\"\n      [value]=\"opacityPercentage\"\n      (input)=\"onChange($event.value)\">\n      <input matSliderThumb />\n    </mat-slider>\n  </div>\n</div>\n"
        },
        {
            "name": "OutsideRegionDialogComponent",
            "id": "component-OutsideRegionDialogComponent-7e81757f04e50ecbbdd836658e4e13dbc90f99e559f5b142982465c681868ea76576ca5caf7b5724e9a8132824c6a441238b2e98dd900eda3574ed95eecbdb1d",
            "file": "src/app/map/outside-region-dialog/outside-region-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-outside-region-dialog",
            "styleUrls": [
                "./outside-region-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./outside-region-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatLegacyDialogRef as MatDialogRef } from '@angular/material/legacy-dialog';\n\n@Component({\n  selector: 'app-outside-region-dialog',\n  templateUrl: './outside-region-dialog.component.html',\n  styleUrls: ['./outside-region-dialog.component.scss'],\n})\nexport class OutsideRegionDialogComponent {\n  constructor(private dialogRef: MatDialogRef<OutsideRegionDialogComponent>) {}\n\n  cancel(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./outside-region-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<OutsideRegionDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<OutsideRegionDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<p>\n  Your planning area is outside your selected region. Please update your\n  planning area to be inside the region.\n</p>\n\n<button mat-button type=\"submit\" (click)=\"cancel()\" color=\"primary\">\n  Close\n</button>\n"
        },
        {
            "name": "PasswordResetComponent",
            "id": "component-PasswordResetComponent-1e79874d705c987a45d2e90a1ce4e865b499d2a620a8891d60674f5268658ae519e83239a3a88cbe2787705995beb31041ada7f08447b37cd5ada6e42ce92185",
            "file": "src/app/password-reset/password-reset.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-password-reset",
            "styleUrls": [
                "./password-reset.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./password-reset.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmPasswordStateMatcher",
                    "defaultValue": "new PasswordStateMatcher([\n    'newPasswordsMustMatch',\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "currentPasswordStateMatcher",
                    "defaultValue": "new PasswordStateMatcher([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "FormMessageType",
                    "defaultValue": "FormMessageType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "passwordResetToken",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PasswordResetToken | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "passwordStateMatcher",
                    "defaultValue": "new PasswordStateMatcher(['newPasswordsMustMatch'])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "showHint",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { FormMessageType } from '../types';\nimport { AuthService, PasswordResetToken } from '@services';\nimport { ConfirmationDialogComponent } from './confirmation-dialog/confirmation-dialog.component';\nimport { PasswordStateMatcher } from '../validators/error-matchers';\nimport { passwordsMustMatchValidator } from '../validators/passwords';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-password-reset',\n  templateUrl: './password-reset.component.html',\n  styleUrls: ['./password-reset.component.scss'],\n})\nexport class PasswordResetComponent implements OnInit {\n  form: FormGroup;\n  passwordResetToken: PasswordResetToken | null = null;\n  FormMessageType = FormMessageType;\n  currentPasswordStateMatcher = new PasswordStateMatcher([]);\n  passwordStateMatcher = new PasswordStateMatcher(['newPasswordsMustMatch']);\n  confirmPasswordStateMatcher = new PasswordStateMatcher([\n    'newPasswordsMustMatch',\n  ]);\n  showHint = false;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private authService: AuthService,\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private readonly dialog: MatDialog\n  ) {\n    this.form = this.formBuilder.group(\n      {\n        password1: this.formBuilder.control('', [\n          Validators.required,\n          Validators.minLength(8),\n        ]),\n        password2: this.formBuilder.control('', Validators.required),\n      },\n      {\n        validator: passwordsMustMatchValidator('password1', 'password2'),\n      }\n    );\n  }\n\n  ngOnInit() {\n    this.activatedRoute.data\n      .pipe(untilDestroyed(this))\n      .subscribe((data: Data) => {\n        if (!data || data['passwordResetToken'] === null) {\n          this.router.navigate(['reset']);\n          return;\n        }\n        const userId = data['passwordResetToken']['userId'];\n        const token = data['passwordResetToken']['token'];\n        this.passwordResetToken = { userId, token };\n      });\n  }\n\n  submit() {\n    if (!this.form.valid) return;\n    const userId: string = this.passwordResetToken!.userId;\n    const token: string = this.passwordResetToken!.token;\n    const password1: string = this.form.get('password1')?.value;\n    const password2: string = this.form.get('password2')?.value;\n    this.authService\n      .resetPassword(userId, token, password1, password2)\n      .subscribe({\n        next: () => {\n          this.dialog.open(ConfirmationDialogComponent);\n        },\n        error: (err: HttpErrorResponse) => {\n          this.form.setErrors({ backendError: Object.values(err.error) });\n        },\n      });\n  }\n\n  cancel() {\n    this.router.navigate(['login']);\n  }\n\n  getErrors(): string | null {\n    if (this.form.errors) {\n      let errorString = '';\n      const formErrors = this.form.errors;\n      if ('newPasswordsMustMatch' in formErrors) {\n        errorString = 'Passwords must match.';\n      } else if ('backendError' in formErrors) {\n        errorString = formErrors['backendError'];\n      } else {\n        errorString = 'An unkown error has occurred.';\n      }\n      return errorString;\n    }\n    return null;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../styles/colors\";\n@import \"../../styles/mixins\";\n\n:host {\n  display: flex;\n  height: 100%;\n}\n\n.reset-password-container {\n  background-image: url('/assets/jpg/planscape-background.jpg');\n  background-repeat: no-repeat;\n  background-size: cover;\n  display: flex;\n  width: 50%;\n}\n\n.reset-password-subcontainer {\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 500px;\n  padding: 20px 0px 20px 0px;\n  gap: 20px;\n  display: flex;\n  margin-top: 10%;\n}\n\n.planscape-white-logo {\n  margin-left: auto;\n  margin-right: auto;\n  height: 60px;\n  width: 247px;\n}\n\n.reset-password-card {\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: auto;\n  padding: 20px 60px 40px 60px;\n  width: 70%;\n  height: 430px;\n  border: 1px $color-original-purple-50pct solid;\n  border-radius: 8px;\n  box-shadow: 0 4px 4px 0 #00000040;\n  gap: 30px;\n}\n\nh1 {\n  @include h1();\n\n  &.title {\n    text-align: center;\n    color: $color-dark-gray;\n  }\n}\n\n.standard-label {\n  @include standard-input-label();\n  color: $color-dark-gray;\n}\n\n.required-blurb {\n  @include italic-sm();\n}\n\nmat-form-field {\n  width: 100%;\n}\n\n:host ::ng-deep .mat-form-field-outline {\n  background-color: $color-light-gray;\n}\n\n.reset-form-buttons {\n  @include button-text;\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 80%;\n  gap: 10px;\n}\n\n.reset-form-buttons .disabled {\n  @include button-disabled;\n}\n\n.send-email-button {\n  @include standard-button;\n  background-color: $color-standard-blue;\n}\n\n.cancel-button {\n  @include standard-button;\n  background-color: white;\n}\n\n.info-text-container {\n  background-color: $color-soft-purple;\n  width: 50%;\n}\n",
                    "styleUrl": "./password-reset.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"reset-password-container\">\n  <div class=\"reset-password-subcontainer\">\n    <div class=\"reset-password-logo-container\">\n      <div class=\"planscape-white-logo\">\n        <img src=\"assets/svg/planscape-white-logo.svg\" alt=\"planscape logo\" />\n      </div>\n      <div class=\"reset-password-card\">\n        <h1 class=\"title\">Reset Password</h1>\n\n        <form [formGroup]=\"form\" (ngSubmit)=\"submit()\" class=\"fields-group\">\n          <mat-label class=\"standard-label\"\n            >Create Password\n            <span class=\"required-blurb\">required</span>\n          </mat-label>\n          <mat-form-field appearance=\"outline\">\n            <input\n              type=\"password\"\n              required\n              formControlName=\"password1\"\n              (focus)=\"showHint = true\"\n              (blur)=\"showHint = false\"\n              matInput />\n          </mat-form-field>\n          <app-field-alert\n            [messageType]=\"FormMessageType.ALERT\"\n            *ngIf=\"showHint && !form.get('password1')?.value\"\n            title=\"Password requirements\"\n            message=\"Your new password needs to be at least 8 characters long and must not have been previously used.\">\n          </app-field-alert>\n\n          <app-field-alert\n            *ngIf=\"\n              form.get('password1')?.hasError('minlength') &&\n              form.get('password1')?.touched\n            \"\n            title=\"Field error\"\n            message=\"Password must contain at least 8 characters.\">\n          </app-field-alert>\n\n          <mat-label class=\"standard-label\"\n            >Confirm Password\n            <span class=\"required-blurb\">required</span>\n          </mat-label>\n          <mat-form-field appearance=\"outline\">\n            <input\n              type=\"password\"\n              required\n              formControlName=\"password2\"\n              matInput\n              autocomplete=\"current-password\"\n              [errorStateMatcher]=\"currentPasswordStateMatcher\" />\n          </mat-form-field>\n\n          <app-form-message\n            [messageType]=\"FormMessageType.ERROR\"\n            *ngIf=\"!!form.errors\"\n            title=\"Password Reset Error\"\n            [message]=\"getErrors()\">\n          </app-form-message>\n\n          <div class=\"reset-form-buttons\">\n            <button\n              mat-flat-button\n              color=\"primary\"\n              type=\"submit\"\n              [disabled]=\"!form.valid\"\n              class=\"reset-pw-button\">\n              RESET PASSWORD\n            </button>\n            <button\n              mat-stroked-button\n              color=\"secondary\"\n              type=\"button\"\n              class=\"cancel-reset-button\"\n              (click)=\"cancel()\">\n              Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n\n  <app-credits-blurb></app-credits-blurb>\n</div>\n\n<div class=\"info-text-container\">\n  <app-planscape-about></app-planscape-about>\n</div>\n"
        },
        {
            "name": "PlanComponent",
            "id": "component-PlanComponent-e0d7ffcd296c55d231f2a68745ee426bbfd68a3e9ebc51bd4ef0bba43b4dc712b2ac46677493372cb6a3af9da980c3dbee7831c29e23ffb5a1d09ee7bcc36f2c",
            "file": "src/app/plan/plan.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan",
            "styleUrls": [
                "./plan.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plan.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "area$",
                    "defaultValue": "this.showOverview$.pipe(\n    map((show) => (show ? 'SCENARIOS' : 'SCENARIO'))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "breadcrumbs$",
                    "defaultValue": "combineLatest([\n    this.currentPlan$.pipe(filter((plan): plan is Plan => !!plan)),\n    this.scenario$,\n  ]).pipe(\n    map(([plan, scenario]) => {\n      const path = this.getPathFromSnapshot();\n      const crumbs: Breadcrumb[] = [\n        {\n          name: plan.name,\n          path: path === 'config' ? getPlanPath(plan.id) : undefined,\n        },\n      ];\n      if (scenario === undefined) {\n        return crumbs;\n      }\n      if (path === 'config' && !scenario) {\n        crumbs.push({ name: 'New Scenario' });\n      }\n      if (scenario) {\n        crumbs.push({ name: scenario.name || '' });\n      }\n      return crumbs;\n    })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "currentPlan$",
                    "defaultValue": "new BehaviorSubject<Plan | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "planId",
                    "defaultValue": "this.route.snapshot.paramMap.get('id')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "planNotFound",
                    "defaultValue": "!this.planId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "planOwner$",
                    "defaultValue": "new Observable<User | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "scenario$",
                    "defaultValue": "this.planStateService.planState$.pipe(\n    switchMap((state) => {\n      if (state.currentScenarioId) {\n        return this.scenarioService.getScenario(state.currentScenarioId);\n      }\n      return of(null);\n    }),\n    catchError((e) => {\n      return of(undefined);\n    })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "showOverview$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "backToOverview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPathFromSnapshot",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePlanStateFromRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ActivatedRoute,\n  Event as NavigationEvent,\n  NavigationEnd,\n  Router,\n} from '@angular/router';\nimport {\n  BehaviorSubject,\n  catchError,\n  combineLatest,\n  concatMap,\n  filter,\n  map,\n  Observable,\n  of,\n  Subject,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs';\n\nimport { Plan, User } from '../types';\nimport { AuthService, PlanStateService, ScenarioService } from '@services';\nimport { Breadcrumb } from '../shared/nav-bar/nav-bar.component';\nimport { getPlanPath } from './plan-helpers';\n\n@Component({\n  selector: 'app-plan',\n  templateUrl: './plan.component.html',\n  styleUrls: ['./plan.component.scss'],\n})\nexport class PlanComponent implements OnInit, OnDestroy {\n  currentPlan$ = new BehaviorSubject<Plan | null>(null);\n  planOwner$ = new Observable<User | null>();\n\n  showOverview$ = new BehaviorSubject<boolean>(false);\n\n  area$ = this.showOverview$.pipe(\n    map((show) => (show ? 'SCENARIOS' : 'SCENARIO'))\n  );\n\n  scenario$ = this.planStateService.planState$.pipe(\n    switchMap((state) => {\n      if (state.currentScenarioId) {\n        return this.scenarioService.getScenario(state.currentScenarioId);\n      }\n      return of(null);\n    }),\n    catchError((e) => {\n      return of(undefined);\n    })\n  );\n  breadcrumbs$ = combineLatest([\n    this.currentPlan$.pipe(filter((plan): plan is Plan => !!plan)),\n    this.scenario$,\n  ]).pipe(\n    map(([plan, scenario]) => {\n      const path = this.getPathFromSnapshot();\n      const crumbs: Breadcrumb[] = [\n        {\n          name: plan.name,\n          path: path === 'config' ? getPlanPath(plan.id) : undefined,\n        },\n      ];\n      if (scenario === undefined) {\n        return crumbs;\n      }\n      if (path === 'config' && !scenario) {\n        crumbs.push({ name: 'New Scenario' });\n      }\n      if (scenario) {\n        crumbs.push({ name: scenario.name || '' });\n      }\n      return crumbs;\n    })\n  );\n\n  private readonly destroy$ = new Subject<void>();\n\n  planId = this.route.snapshot.paramMap.get('id');\n  planNotFound: boolean = !this.planId;\n\n  constructor(\n    private authService: AuthService,\n    private planStateService: PlanStateService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private scenarioService: ScenarioService\n  ) {\n    // TODO: Move everything in the constructor to ngOnInit\n\n    if (this.planId === null) {\n      this.planNotFound = true;\n      return;\n    }\n    const plan$ = this.planStateService.getPlan(this.planId).pipe(take(1));\n\n    plan$.subscribe({\n      next: (plan) => {\n        this.currentPlan$.next(plan);\n      },\n      error: (error) => {\n        this.planNotFound = true;\n      },\n    });\n\n    this.planOwner$ = plan$.pipe(\n      concatMap((plan) => {\n        return this.authService.getUser(plan.user);\n      })\n    );\n  }\n\n  ngOnInit() {\n    const path = this.getPathFromSnapshot();\n    this.planStateService.planState$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((state) => {\n        if (state.currentScenarioId || path === 'config') {\n          this.showOverview$.next(false);\n        } else {\n          this.showOverview$.next(true);\n        }\n      });\n    this.updatePlanStateFromRoute();\n\n    this.router.events\n      .pipe(filter((event) => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEvent) => {\n        this.updatePlanStateFromRoute();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private getPathFromSnapshot() {\n    const routeChild = this.route.snapshot.firstChild;\n    return routeChild?.url[0].path;\n  }\n\n  private updatePlanStateFromRoute() {\n    if (this.planId) {\n      this.planStateService.updateStateWithPlan(parseInt(this.planId, 10));\n    }\n\n    const routeChild = this.route.snapshot.firstChild;\n    const path = routeChild?.url[0].path;\n    const id = routeChild?.paramMap.get('id') ?? null;\n\n    if (path === 'config') {\n      this.planStateService.updateStateWithScenario(id);\n      this.planStateService.updateStateWithShapes(null);\n    } else {\n      this.planStateService.updateStateWithScenario(null);\n      this.planStateService.updateStateWithShapes(null);\n    }\n  }\n\n  backToOverview() {\n    this.router.navigate(['plan', this.currentPlan$.value!.id]);\n  }\n\n  goBack() {\n    if (this.showOverview$.value) {\n      this.router.navigate(['home']);\n    } else {\n      this.backToOverview();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../shared/_variables.scss';\n\n.root-container {\n  display: flex;\n  flex-direction: row;\n  height: calc(100% - $navbar-height);\n  width: 100%;\n}\n\n.plan-summary-panel {\n  background-color: white;\n  box-sizing: border-box;\n  display: block;\n  width: 300px;\n\n  ::ng-deep .mat-tab-body-wrapper {\n    height: 100%;\n  }\n}\n\n\n.plan-progress-panel {\n  background-color: white;\n  box-sizing: border-box;\n  display: flex;\n  flex: 0 0 auto;\n  flex-direction: column;\n  height: 100%;\n  position: relative;\n  width: 300px;\n}\n\n.plan-content {\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n}\n\n.plan-content.with-overview {\n  flex-direction: column;\n}\n\n.plan-map-container {\n  height: 100%;\n  flex: 1;\n  z-index: 1;\n  position: relative;\n}\n\n.plan-content-panel {\n  overflow: auto;\n  width: 45%;\n  min-width: 450px;\n  max-width: 800px;\n}\n\n.scenario-details {\n  height: 100%;\n  width: 100%;\n}\n\n:host {\n  ::ng-deep {\n    app-create-scenarios {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    }\n\n    .create-scenarios-panel {\n      flex: 1;\n    }\n  }\n}\n\n@media print {\n  app-nav-bar {\n    display: none;\n  }\n\n  .plan-summary-panel {\n    display: none;\n  }\n\n  ::ng-deep {\n    .plan-overview-container .plan-scenario-panel .plan-scenario-panel-content {\n      display: none;\n    }\n\n    app-scenario-configurations .configurations-wrapper .no-configs-overlay {\n      display: none;\n    }\n\n    summary-panel .summary-content .grid-container {\n      display: block;\n    }\n\n    ::ng-deep app-scenario-configurations mat-card-actions.mat-card-actions {\n      display: none;\n    }\n\n    ::ng-deep .mat-column-select {\n      display: none;\n    }\n  }\n\n  .plan-content-panel {\n    width: 100%;\n  }\n  .plan-content {\n    display: block;\n  }\n  .root-container {\n    height: initial;\n  }\n\n  .plan-map-container {\n    page-break-before: always;\n  }\n}\n\n:host {\n  ::ng-deep .mat-tab-label {\n    min-width: auto;\n  }\n\n  ::ng-deep .mat-tab-group {\n    height: 100%;\n  }\n}\n",
                    "styleUrl": "./plan.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-nav-bar\n  (goBack)=\"goBack()\"\n  [breadcrumbs]=\"(breadcrumbs$ | async) || []\"\n  [area]=\"(area$ | async) || 'SCENARIOS'\"></app-nav-bar>\n<div class=\"root-container\">\n  <app-resource-unavailable\n    *ngIf=\"planNotFound\"\n    resource=\"plan\"></app-resource-unavailable>\n  <ng-container *ngIf=\"currentPlan$ | async as plan\">\n    <div class=\"plan-summary-panel\" *ngIf=\"showOverview$ | async\">\n      <mat-tab-group\n        mat-align-tabs=\"start\"\n        mat-stretch-tabs\n        disablePagination=\"true\"\n        *appFeatureFlag=\"'show_share_modal'\">\n        <mat-tab label=\"ACTIVE\">\n          <app-area-details [plan]=\"plan\"></app-area-details>\n        </mat-tab>\n        <mat-tab label=\"NOTES\">\n          <app-area-notes [plan]=\"plan\"></app-area-notes>\n        </mat-tab>\n      </mat-tab-group>\n\n      <app-summary-panel\n        *appFeatureFlag=\"'show_share_modal'; hide: true\"\n        [plan]=\"currentPlan$ | async\"\n        [owner]=\"planOwner$ | async\"></app-summary-panel>\n    </div>\n    <mat-divider [vertical]=\"true\" *ngIf=\"showOverview$ | async\"></mat-divider>\n    <div\n      class=\"plan-content\"\n      [ngClass]=\"{ 'with-overview': showOverview$ | async }\">\n      <app-plan-overview\n        [plan$]=\"currentPlan$\"\n        *ngIf=\"showOverview$ | async\"></app-plan-overview>\n      <ng-container *ngIf=\"(showOverview$ | async) === false\">\n        <div class=\"plan-content-panel\">\n          <router-outlet #outlet=\"outlet\"></router-outlet>\n        </div>\n        <div class=\"plan-map-container\">\n          <app-goal-overlay></app-goal-overlay>\n          <app-plan-map\n            [plan]=\"currentPlan$ | async\"\n            [mapId]=\"'planning-map'\"\n            [mapPadding]=\"[0, 0]\"\n            [showAttributionAndZoom]=\"true\"></app-plan-map>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "PlanCreateDialogComponent",
            "id": "component-PlanCreateDialogComponent-8112d8ce7132342030347026292ab8782b54a0f13f8c27a893ab6d7898b4c0febe2f88ba5716c854f8489aff18d35be4aef499b9425e558c09d410ca6869cd11",
            "file": "src/app/map/plan-create-dialog/plan-create-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan-create-dialog",
            "styleUrls": [
                "./plan-create-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plan-create-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlanCreateDialogData",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "planForm",
                    "defaultValue": "new FormGroup({\n    planName: new FormControl('', Validators.required),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedRegion$",
                    "defaultValue": "this.sessionService.region$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "submitting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createPlan",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shape",
                            "type": "GeoJSON.GeoJSON",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shape",
                            "type": "GeoJSON.GeoJSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA,\n  MatLegacyDialogRef as MatDialogRef,\n} from '@angular/material/legacy-dialog';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Component, Inject } from '@angular/core';\nimport { PlanService, SessionService } from '@services';\nimport { firstValueFrom } from 'rxjs';\nimport { SNACK_ERROR_CONFIG } from '../../../app/shared/constants';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { Region } from '../../types';\n\nexport interface PlanCreateDialogData {\n  shape: GeoJSON.GeoJSON;\n}\n\n@Component({\n  selector: 'app-plan-create-dialog',\n  templateUrl: './plan-create-dialog.component.html',\n  styleUrls: ['./plan-create-dialog.component.scss'],\n})\nexport class PlanCreateDialogComponent {\n  planForm = new FormGroup({\n    planName: new FormControl('', Validators.required),\n  });\n\n  submitting = false;\n  selectedRegion$ = this.sessionService.region$.asObservable();\n\n  constructor(\n    private dialogRef: MatDialogRef<PlanCreateDialogComponent>,\n    private planService: PlanService,\n    private sessionService: SessionService,\n    private matSnackBar: MatSnackBar,\n    @Inject(MAT_DIALOG_DATA) public data: PlanCreateDialogData\n  ) {}\n\n  async submit() {\n    if (this.planForm.valid) {\n      this.submitting = true;\n      const planExists = await firstValueFrom(\n        this.planService.planNameExists(\n          this.planForm.get('planName')?.value || ''\n        )\n      );\n      if (planExists) {\n        this.planForm.setErrors({ planNameExists: planExists });\n        this.submitting = false;\n        return;\n      }\n      const planName = this.planForm.get('planName')?.value || '';\n      const region = await firstValueFrom(this.selectedRegion$);\n      if (!region) {\n        this.matSnackBar.open(\n          '[Error] Please select a region!',\n          'Dismiss',\n          SNACK_ERROR_CONFIG\n        );\n        this.submitting = false;\n        return;\n      }\n      this.createPlan(planName, this.data.shape, region);\n    }\n  }\n\n  private createPlan(name: string, shape: GeoJSON.GeoJSON, region: Region) {\n    this.planService\n      .createPlan({\n        name: name,\n        region_name: region,\n        geometry: shape,\n      })\n      .subscribe({\n        next: (result) => {\n          this.dialogRef.close(result!.id);\n          this.submitting = false;\n        },\n        error: (e) => {\n          this.matSnackBar.open(\n            '[Error] Unable to create plan due to backend error.',\n            'Dismiss',\n            SNACK_ERROR_CONFIG\n          );\n          this.submitting = false;\n        },\n      });\n  }\n\n  cancel(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field {\n  min-width: 480px;\n}\n\n.info {\n  align-items: center;\n  background-color: #f2f2f2;\n  display: flex;\n  gap: 22px;\n  font-size: 13px;\n  font-weight: 400;\n  line-height: 15px;\n  margin: 0px -24px 32px;\n  padding: 16px 22px;\n}\n",
                    "styleUrl": "./plan-create-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PlanCreateDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "planService",
                        "type": "PlanService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "PlanCreateDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PlanCreateDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "planService",
                        "type": "PlanService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "PlanCreateDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h3 mat-dialog-title>Name your plan</h3>\n<form [formGroup]=\"planForm\" (ngSubmit)=\"submit()\">\n  <mat-dialog-content>\n    <div class=\"info\">\n      <mat-icon>info</mat-icon>\n      <span>Boundaries cannot be modified after the plan is saved.</span>\n    </div>\n    <mat-form-field>\n      <mat-label>Name</mat-label>\n      <input matInput formControlName=\"planName\" />\n    </mat-form-field>\n    <mat-error *ngIf=\"planForm.hasError('planNameExists')\">\n      There is already a planning area with that name.\n    </mat-error>\n  </mat-dialog-content>\n  <mat-dialog-actions align=\"end\">\n    <button\n      mat-button\n      color=\"primary\"\n      type=\"button\"\n      (click)=\"cancel()\"\n      [disabled]=\"submitting\">\n      CANCEL\n    </button>\n    <button\n      mat-button\n      type=\"submit\"\n      color=\"primary\"\n      data-id=\"save\"\n      [disabled]=\"submitting\">\n      <mat-spinner *ngIf=\"submitting\" diameter=\"24\"></mat-spinner>\n      <span *ngIf=\"!submitting\">SAVE</span>\n    </button>\n  </mat-dialog-actions>\n</form>\n"
        },
        {
            "name": "PlanMapComponent",
            "id": "component-PlanMapComponent-1f825cb6c529aa411b8198673a32cb236e2c5cf0b88e095f36c53b4232215e9c6d0afb2e73c67d0296f5f98ac202a03e38860964201f698a2eb3936d40f078c2",
            "file": "src/app/plan/plan-map/plan-map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan-map",
            "styleUrls": [
                "./plan-map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plan-map.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mapHeight",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mapId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mapPadding",
                    "defaultValue": "[0, 0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe amount of padding in the top left corner when the map fits the plan boundaries.",
                    "description": "<p>The amount of padding in the top left corner when the map fits the plan boundaries.</p>\n",
                    "line": 35,
                    "type": "L.PointTuple",
                    "decorators": []
                },
                {
                    "name": "plan",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "Plan | null",
                    "decorators": []
                },
                {
                    "name": "showAttributionAndZoom",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "drawingLayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.GeoJSON | undefined",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "layer",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.Map",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "mapRef",
                    "defaultValue": "{\n    legend: undefined,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MapRef",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "projectAreasLayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.GeoJSON | undefined",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "selectedRegion$",
                    "defaultValue": "new BehaviorSubject<Region>(Region.SIERRA_NEVADA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "shapes",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any | null",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tileLayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.TileLayer | undefined",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "addLegend",
                    "args": [
                        {
                            "name": "colormap",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataUnit",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colormap",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataUnit",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "map",
                            "type": "L.Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawPlanningArea",
                    "args": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opacity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawShapes",
                    "args": [
                        {
                            "name": "shapes",
                            "type": "Feature[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDraw geojson shapes on the map, or erase currently drawn shapes.",
                    "description": "<p>Draw geojson shapes on the map, or erase currently drawn shapes.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "shapes",
                            "type": "Feature[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCondition",
                    "args": [
                        {
                            "name": "filepath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisplay rendered tiles for the provided condition filepath (or, if the filepath\n string is empty, remove rendered tiles).",
                    "description": "<p>Display rendered tiles for the provided condition filepath (or, if the filepath\n string is empty, remove rendered tiles).</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "filepath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stadiaAlidadeTiles",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCreates a basemap layer using the Stadia.AlidadeSmooth tiles.",
                    "description": "<p>Creates a basemap layer using the Stadia.AlidadeSmooth tiles.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport * as L from 'leaflet';\nimport { BehaviorSubject, Subject, takeUntil } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { FrontendConstants, Plan, Region, regionToString } from 'src/app/types';\n\nimport { BackendConstants } from '../../backend-constants';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { PlanStateService } from '@services';\nimport { regionMapCenters } from '../../map/map.helper';\nimport { Feature } from 'geojson';\nimport { getColorForProjectPosition } from '../plan-helpers';\n\n// Needed to keep reference to legend div element to remove\nexport interface MapRef {\n  legend?: HTMLElement | undefined;\n}\n\n@Component({\n  selector: 'app-plan-map',\n  templateUrl: './plan-map.component.html',\n  styleUrls: ['./plan-map.component.scss'],\n})\nexport class PlanMapComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() plan: Plan | null = null;\n  @Input() mapId?: string;\n  @Input() mapHeight: string = '100%';\n  /** The amount of padding in the top left corner when the map fits the plan boundaries. */\n  @Input() mapPadding: L.PointTuple = [0, 0]; // [left, top]\n  @Input() showAttributionAndZoom: boolean = false;\n\n  private readonly destroy$ = new Subject<void>();\n  map!: L.Map;\n  drawingLayer: L.GeoJSON | undefined;\n  projectAreasLayer: L.GeoJSON | undefined;\n  tileLayer: L.TileLayer | undefined;\n\n  mapRef: MapRef = {\n    legend: undefined,\n  };\n\n  selectedRegion$ = new BehaviorSubject<Region>(Region.SIERRA_NEVADA);\n\n  private layer: string = '';\n  private shapes: any | null = null;\n\n  constructor(\n    private planStateService: PlanStateService,\n    private http: HttpClient\n  ) {\n    this.selectedRegion$ = this.planStateService.planRegion$;\n  }\n\n  ngOnInit(): void {\n    this.planStateService.planState$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((state) => {\n        if (state.mapConditionLayer !== this.layer) {\n          this.layer = state.mapConditionLayer ?? '';\n          this.setCondition(state.mapConditionLayer ?? '');\n        }\n        if (state.mapShapes !== this.shapes) {\n          this.shapes = state.mapShapes;\n          this.drawShapes(state.mapShapes);\n        }\n      });\n  }\n\n  ngAfterViewInit(): void {\n    if (this.map != undefined) this.map.remove();\n\n    this.map = L.map(this.mapId ? this.mapId : 'map', {\n      center: [...regionMapCenters(this.selectedRegion$.getValue()!)],\n      zoom: FrontendConstants.MAP_INITIAL_ZOOM,\n      minZoom: FrontendConstants.MAP_MIN_ZOOM,\n      maxZoom: FrontendConstants.MAP_MAX_ZOOM,\n      layers: [this.stadiaAlidadeTiles()],\n      zoomControl: false,\n      pmIgnore: false,\n      scrollWheelZoom: true,\n      attributionControl: this.showAttributionAndZoom,\n    });\n\n    if (this.showAttributionAndZoom) {\n      this.map.attributionControl.setPosition('topright');\n\n      // Add zoom controls to bottom right corner\n      const zoomControl = L.control.zoom({\n        position: 'bottomright',\n      });\n      zoomControl.addTo(this.map);\n    }\n\n    if (this.plan) {\n      this.drawPlanningArea(this.plan!);\n    }\n\n    setTimeout(() => this.map.invalidateSize(), 0);\n  }\n\n  // Add planning area to map and frame it in view\n  private drawPlanningArea(plan: Plan, color?: string, opacity?: number) {\n    if (!plan.geometry) return;\n\n    if (!!this.drawingLayer) {\n      this.drawingLayer.remove();\n    }\n\n    this.drawingLayer = L.geoJSON(plan.geometry, {\n      pane: 'overlayPane',\n      style: {\n        color: color ?? '#000000',\n        fillColor: color ?? '#A5C8D7',\n        fillOpacity: opacity ?? 0.12,\n        weight: 3,\n      },\n    }).addTo(this.map);\n    this.map.fitBounds(this.drawingLayer.getBounds(), {\n      paddingTopLeft: this.mapPadding,\n    });\n  }\n\n  /** Creates a basemap layer using the Stadia.AlidadeSmooth tiles. */\n  private stadiaAlidadeTiles() {\n    var attributionString = '';\n    if (this.showAttributionAndZoom) {\n      attributionString =\n        '&copy; <a href=\"https://stadiamaps.com/\" target=\"_blank\" rel=\"noreferrer\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\" rel=\"noreferrer\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\" target=\"_blank\" rel=\"noreferrer\">OpenStreetMap</a> contributors';\n    }\n    return L.tileLayer(\n      'https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png',\n      {\n        maxZoom: 19,\n        attribution: attributionString,\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.map.remove();\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /** Display rendered tiles for the provided condition filepath (or, if the filepath\n   *  string is empty, remove rendered tiles). */\n  private setCondition(filepath: string): void {\n    this.tileLayer?.remove();\n    this.mapRef.legend?.remove();\n\n    if (filepath?.length === 0 || !filepath) return;\n\n    var region = regionToString(this.planStateService.planRegion$.getValue());\n    this.tileLayer = L.tileLayer.wms(\n      BackendConstants.TILES_END_POINT + region + '/wms?',\n      {\n        layers: region + filepath,\n        minZoom: 7,\n        maxZoom: 13,\n        format: 'image/png',\n        transparent: true,\n        opacity: 0.7,\n      }\n    );\n\n    this.map.addLayer(this.tileLayer);\n\n    // Map legend request\n    var dataUnit = '';\n    this.planStateService.planState$.pipe(take(1)).subscribe((state) => {\n      if (state.legendUnits) {\n        dataUnit = state.legendUnits;\n      }\n    });\n    const legendUrl = BackendConstants.TILES_END_POINT + 'wms';\n    let queryParams = new HttpParams();\n    queryParams = queryParams.append('request', 'GetLegendGraphic');\n    queryParams = queryParams.append('layer', filepath);\n    queryParams = queryParams.append('format', 'application/json');\n    var legendJson = this.http.get<string>(legendUrl, { params: queryParams });\n    legendJson.pipe(take(1)).subscribe((value: any) => {\n      var colorMap =\n        value['Legend'][0]['rules'][0]['symbolizers'][0]['Raster']['colormap'];\n      this.addLegend(colorMap, dataUnit, this.map);\n    });\n  }\n\n  addLegend(colormap: any, dataUnit: string | undefined, map: L.Map) {\n    var entries = colormap['entries'];\n    const legend = new (L.Control.extend({\n      options: { position: 'topleft' },\n    }))();\n    const mapRef = this.mapRef;\n    legend.onAdd = function (map) {\n      // Remove any pre-existing legend on map\n      if (mapRef && mapRef.legend) {\n        L.DomUtil.remove(mapRef.legend);\n      }\n\n      const div = L.DomUtil.create('div', 'legend');\n      // htmlContent of HTMLDivElement must be directly added here to add to leaflet map\n      // Creating a string and then assigning to div.innerHTML to allow for class encapsulation\n      // (otherwise div tags are automatically closed before they should be)\n      var htmlContent = '';\n      htmlContent += '<div class=parentlegend>';\n      if (dataUnit && colormap['type'] == 'ramp') {\n        // For legends with numerical labels make header the corresponding data units\n        htmlContent += '<div><b>' + dataUnit + '</b></div>';\n      } else {\n        // For legends with categorical labels make header 'Legend'\n        htmlContent += '<div><b>Legend</b></div>';\n      }\n      // Reversing order to present legend values from high to low (default is low to high)\n      for (let i = entries.length - 1; i >= 0; i--) {\n        var entry = entries[i];\n        // Add a margin-bottom to only the last entry in the legend\n        var lastChild = '';\n        if (i == 0) {\n          lastChild = 'style=\"margin-bottom: 6px;\"';\n        }\n        if (entry['label']) {\n          // Filter out 'nodata' entries\n          if (entry['color'] != '#000000') {\n            htmlContent +=\n              '<div class=\"legendline\" ' +\n              lastChild +\n              '><i style=\"background:' +\n              entry['color'] +\n              '\"> &emsp; &hairsp;</i> &nbsp;<label>' +\n              entry['label'] +\n              '<br/></label></div>';\n          } else if (lastChild != '') {\n            htmlContent += '<div class=\"legendline\"' + lastChild + '></div>';\n          }\n        } else {\n          htmlContent +=\n            '<div class=\"legendline\" ' +\n            lastChild +\n            '><i style=\"background:' +\n            entry['color'] +\n            '\"> &emsp; &hairsp;</i> &nbsp; <br/></div>';\n        }\n      }\n      htmlContent += '</div>';\n      div.innerHTML = htmlContent;\n      // Needed to allow for scrolling on the legend\n      L.DomEvent.on(div, 'mousewheel', L.DomEvent.stopPropagation);\n      // Set reference to legend for later deletion\n      mapRef.legend = div;\n      return div;\n    };\n\n    legend.addTo(map);\n  }\n\n  /** Draw geojson shapes on the map, or erase currently drawn shapes. */\n  private drawShapes(shapes: Feature[] | null): void {\n    this.projectAreasLayer?.remove();\n\n    if (!shapes) return;\n\n    this.projectAreasLayer = L.geoJSON(shapes, {\n      style: (shape) => ({\n        color: '#000',\n        fillColor: getColorForProjectPosition(shape?.properties.proj_id),\n        fillOpacity: 0.4,\n        weight: 1.5,\n      }),\n      onEachFeature: function (feature, layer) {\n        // TODO Find a better way to center this — could see if it's possible to add an actual center coordinate to the properties and use that to set tooltip location\n        // This currently is a bit off if the centroid of the project area isn't within it (https://blog.mapbox.com/a-new-algorithm-for-finding-a-visual-center-of-a-polygon-7c77e6492fbc)\n        layer\n          .bindTooltip(String(feature.properties.proj_id), {\n            permanent: true,\n            direction: 'center',\n            className: 'project-area-label',\n          })\n          .openTooltip();\n      },\n    });\n    this.projectAreasLayer.addTo(this.map);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".plan-map {\n  height: 100%;\n  width: 100%;\n  z-index: 1;\n}\n\n.expand-panel-button {\n  bottom: 12px;\n  position: absolute;\n  right: 60px;\n  z-index: 2;\n}\n\n:host {\n  // Styling for legend on mousehover\n  ::ng-deep .legend:hover {\n    width: 100%;\n    overflow-y: scroll;\n    text-overflow: ellipsis;\n    height: auto;\n    max-width: auto;\n    max-height: 80%;\n    opacity: 1;\n    transition-duration: 0.8s;\n  }\n\n  // Setting heights for built-in leaflet styles to be able to configure relative max-height\n  ::ng-deep .leaflet-left .leaflet-control {\n    height: auto;\n    max-height: 75%;\n  }\n\n  // Setting heights for built-in leaflet styles to be able to configure relative max-height\n  ::ng-deep .leaflet-top {\n    height: 100%;\n  }\n\n  // Default styling for legend\n  ::ng-deep .legend {\n    top: 40px;\n    bottom: 40px;\n    margin: 10px;\n    font-weight: bold;\n    color: solid #2491ff;\n    text-align: left;\n    height: auto;\n    width: 65px;\n    text-overflow: ellipsis;\n    overflow-x: hidden;\n    line-height: 18px;\n    background: white;\n    white-space: nowrap;\n    opacity: 0.7;\n    display: inline-block;\n    border: 2px #aaa solid;\n    border-radius: 5px;\n    transition: width 0.8s;\n  }\n\n  // Parent legend class\n  ::ng-deep .parentlegend {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  }\n\n  // Legend line\n  ::ng-deep .legendline {\n    white-space: nowrap;\n    display: inline-block;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    width: auto;\n  }\n\n  // // Legend color entry\n  ::ng-deep .legend i {\n    margin-left: 8px;\n  }\n\n  // Legend text entry\n  ::ng-deep .legend label {\n    opacity: 0.7;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    flex: 1;\n    white-space: nowrap;\n    max-width: 65px;\n  }\n\n  // Legend header\n  ::ng-deep .legend b {\n    text-align: center;\n    font-size: small;\n    margin: 10px;\n    margin-top: 6px;\n    width: auto;\n    height: 10px;\n    display: flex;\n    flex-direction: row;\n  }\n\n  ::ng-deep .leaflet-tooltip.project-area-label {\n    border: transparent;\n    box-shadow: none;\n    background-color: rgba(255, 255, 255, 0.6);\n    color: black;\n    font-weight: bold;\n    font-size: 18px;\n    display: block;\n    border-radius: 50%;\n    aspect-ratio: 1/1;\n    height: 30px;\n    text-align: center;\n    padding: 0;\n    line-height: 30px;\n  }\n}\n",
                    "styleUrl": "./plan-map.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div\n  id=\"{{ mapId ? mapId : 'map' }}\"\n  class=\"plan-map\"\n  [style.height]=\"mapHeight\"></div>\n<div *ngIf=\"!showAttributionAndZoom\">\n  &copy;\n  <a href=\"https://leafletjs.com/\" target=\"_blank\" rel=\"noreferrer\">Leaflet</a>\n  , &copy;\n  <a href=\"https://stadiamaps.com/\" target=\"_blank\" rel=\"noreferrer\">\n    Stadia Maps\n  </a>\n  ,\n  <br />\n  &copy;\n  <a href=\"https://openmaptiles.org/\" target=\"_blank\" rel=\"noreferrer\">\n    OpenMapTiles\n  </a>\n  &copy;\n  <a href=\"http://openstreetmap.org\" target=\"_blank\" rel=\"noreferrer\">\n    OpenStreetMap\n  </a>\n</div>\n"
        },
        {
            "name": "PlanNavigationBarComponent",
            "id": "component-PlanNavigationBarComponent-96e1ad25cd0fa3bc5e24c1da681096a886ef187d83209d5626db8660b82d5b5587d3a13af20a50278ee48245a3073e3d17fa643fa9618fea699bd423330276e0",
            "file": "src/app/plan/plan-navigation-bar/plan-navigation-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan-navigation-bar",
            "styleUrls": [
                "./plan-navigation-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plan-navigation-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "backToOverviewEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-plan-navigation-bar',\n  templateUrl: './plan-navigation-bar.component.html',\n  styleUrls: ['./plan-navigation-bar.component.scss'],\n})\nexport class PlanNavigationBarComponent {\n  @Output() backToOverviewEvent = new EventEmitter<void>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".bottom-bar-root {\n  align-items: stretch;\n  background-color: white;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  height: 56px;\n  position: relative;\n  width: 100%;\n  z-index: 2;\n}\n\n.button-row {\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n  gap: 12px;\n  justify-content: flex-start;\n  padding: 0px 48px;\n}\n\n.title {\n  font-size: 18px;\n  font-weight: 400;\n  line-height: 24px;\n}\n",
                    "styleUrl": "./plan-navigation-bar.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"bottom-bar-root mat-elevation-z2\">\n  <mat-divider></mat-divider>\n  <div class=\"button-row\">\n    <button mat-icon-button (click)=\"backToOverviewEvent.emit()\">\n      <mat-icon color=\"primary\">arrow_back</mat-icon>\n    </button>\n    <span class=\"title\">Back to Planning Overview</span>\n  </div>\n</div>\n"
        },
        {
            "name": "PlanningAreasComponent",
            "id": "component-PlanningAreasComponent-5487db47a6a86309e237c877daa4cddec1624fba276b812df2b1d4fe68268dfd7ada6aae50acc308c7b6a57cb38b833add600084a19b7f9769560738d8b46adf",
            "file": "src/app/home/planning-areas/planning-areas.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-planning-areas",
            "styleUrls": [
                "./planning-areas.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./planning-areas.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-planning-areas',\n  templateUrl: './planning-areas.component.html',\n  styleUrls: ['./planning-areas.component.scss'],\n})\nexport class PlanningAreasComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../shared/_variables.scss';\n\n:host {\n  overflow: hidden;\n  width: 100%;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n\n  .mat-icon {\n    line-height: 22px;\n  }\n}\n\n.planning {\n  background-color: white;\n  border-radius: 16px;\n  box-shadow: 0px 3px 1px -2px #0000001f;\n  box-shadow: 0px 2px 2px 0px #00000024;\n  box-shadow: 0px 1px 5px 0px #00000033;\n  padding: 16px 26px;\n  display: flex;\n  flex-direction: column;\n  min-width: 70%;\n  max-width: 80%;\n  box-sizing: border-box;\n  margin: 20px auto;\n  flex: 1;\n  min-height: calc(100% - $toolbar-height);\n}\n\n.title-nav {\n  display: flex;\n  gap: 10px;\n  align-items: center;\n}\n\nh4 {\n  margin: 0;\n}\n\n.help {\n  margin-left: auto;\n}\n\n.explore {\n  margin-right: 10px;\n}\n\napp-plan-table {\n  flex: 1;\n  overflow: hidden;\n}\n\n.tooltip {\n  padding: 20px;\n}\n",
                    "styleUrl": "./planning-areas.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<section class=\"planning\">\n  <div class=\"title-nav\">\n    <h4>Planning areas</h4>\n    <button mat-icon-button class=\"help\" [matMenuTriggerFor]=\"tooltipMenu\">\n      <mat-icon class=\"material-symbols-outlined\" color=\"primary\">\n        info_outline\n      </mat-icon>\n      <mat-menu #tooltipMenu=\"matMenu\">\n        <div class=\"tooltip\">\n          <p>\n            Below is your list of planning areas. Think of each planning area as\n            a folder which holds the scenarios for each of your planning areas.\n            Double-click on the planning area to go into the scenario page,\n            which will then show you a list of all the scenarios that you have\n            run for that plan.\n          </p>\n\n          <p>\n            If you haven’t run any plans yet, get started by either uploading\n            your shapefile or drawing your planning area on the map in Explore\n            to get started. Once you have drawn the polygon and hit save, it\n            will prompt you to name your planning area. You can change this name\n            from this page.\n          </p>\n\n          <p>\n            You can delete your planning area by selecting the delete button. If\n            you want to go back to the map view, just click on the Explore\n            button in the top right corner of the page.\n          </p>\n        </div>\n      </mat-menu>\n    </button>\n\n    <a mat-raised-button color=\"primary\" class=\"explore\" routerLink=\"/map\">\n      <mat-icon class=\"material-symbols-outlined\">add_box</mat-icon>\n      Explore\n    </a>\n  </div>\n  <app-plan-table></app-plan-table>\n</section>\n"
        },
        {
            "name": "PlanOverviewComponent",
            "id": "component-PlanOverviewComponent-68b30752769286bd4dcc54aaa48158569d31b0135beec5a7b8c74b0d0873a4f5ec0fafae24e4e8a588c625b86c9a36593fe5daabb1403dd096ab8c438ab5c452",
            "file": "src/app/plan/plan-summary/plan-overview/plan-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan-overview",
            "styleUrls": [
                "./plan-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plan-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "plan$",
                    "defaultValue": "new BehaviorSubject<Plan | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openConfig",
                    "args": [
                        {
                            "name": "configId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "configId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { Plan } from '../../../types';\n\n@Component({\n  selector: 'app-plan-overview',\n  templateUrl: './plan-overview.component.html',\n  styleUrls: ['./plan-overview.component.scss'],\n})\nexport class PlanOverviewComponent {\n  @Input() plan$ = new BehaviorSubject<Plan | null>(null);\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  openConfig(configId?: number): void {\n    if (!configId) {\n      this.router.navigate(['config', ''], {\n        relativeTo: this.route,\n      });\n    } else {\n      this.router.navigate(['config', configId], { relativeTo: this.route });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".plan-overview-container {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  height: 100%;\n}\n\n.plan-map-view {\n  background-color: #e9e9e9;\n  flex-grow: 2;\n  min-height: 300px;\n  position: relative;\n}\n\n.plan-scenario-panel {\n  background-color: white;\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 20px;\n}\n\n.plan-scenario-panel-content {\n  align-items: flex-start;\n  display: flex;\n  width: 100%;\n}\n\n.plan-scenario-panel-text {\n  margin-right: 150px;\n}\n\n.mat-raised-button {\n  min-width: unset;\n}\n",
                    "styleUrl": "./plan-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"plan-overview-container\">\n  <mat-divider></mat-divider>\n  <div class=\"plan-scenario-panel\">\n    <app-saved-scenarios [plan]=\"plan$ | async\"></app-saved-scenarios>\n  </div>\n</div>\n"
        },
        {
            "name": "PlanTableComponent",
            "id": "component-PlanTableComponent-b63f19079137378f6cdfa105d122c0cc770fcc9ecba0a0991183076c04a28ca481e0dcc7f6a0a5f5e97e76983c62ba8b4d5e424f9b3f4b994d95faf1d2e27233",
            "file": "src/app/home/plan-table/plan-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan-table",
            "styleUrls": [
                "./plan-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plan-table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "datasource",
                    "defaultValue": "new MatTableDataSource<PreviewPlan>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "this.featureService.isFeatureEnabled(\n    'show_share_modal'\n  )\n    ? ['name', 'creator', 'lastUpdated', 'totalAcres', 'scenarios', 'region']\n    : ['name', 'lastUpdated', 'totalAcres', 'scenarios', 'region']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "planrows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Plan[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectedPlan",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Plan | null",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deletePlan",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPlansFromService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectPlan",
                    "args": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shareEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sharePlan",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "viewMap",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport {\n  MatLegacyDialog as MatDialog,\n  MatLegacyDialogRef as MatDialogRef,\n} from '@angular/material/legacy-dialog';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { MatSort } from '@angular/material/sort';\nimport { MatLegacyTableDataSource as MatTableDataSource } from '@angular/material/legacy-table';\nimport { take } from 'rxjs';\n\nimport { AuthService, PlanService } from '@services';\nimport { Router } from '@angular/router';\nimport { DeleteDialogComponent } from '../../delete-dialog/delete-dialog.component';\nimport { SNACK_NOTICE_CONFIG } from 'src/app/shared/constants';\nimport { SharePlanDialogComponent } from '../share-plan-dialog/share-plan-dialog.component';\nimport { FeatureService } from '../../features/feature.service';\nimport {\n  canDeletePlanningArea,\n  canViewCollaborators,\n} from '../../plan/permissions';\nimport { Plan, PreviewPlan } from '../../types';\n\n@Component({\n  selector: 'app-plan-table',\n  templateUrl: './plan-table.component.html',\n  styleUrls: ['./plan-table.component.scss'],\n})\nexport class PlanTableComponent implements OnInit {\n  @ViewChild(MatSort) sort!: MatSort;\n  // used just for typing the table on the template\n  planrows: Plan[] = [];\n\n  datasource = new MatTableDataSource<PreviewPlan>();\n  selectedPlan: Plan | null = null;\n  loading = true;\n  error = false;\n\n  displayedColumns: string[] = this.featureService.isFeatureEnabled(\n    'show_share_modal'\n  )\n    ? ['name', 'creator', 'lastUpdated', 'totalAcres', 'scenarios', 'region']\n    : ['name', 'lastUpdated', 'totalAcres', 'scenarios', 'region'];\n\n  constructor(\n    private dialog: MatDialog,\n    private planService: PlanService,\n    private router: Router,\n    private snackbar: MatSnackBar,\n    private featureService: FeatureService,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.getPlansFromService();\n  }\n\n  getPlansFromService(): void {\n    this.planService\n      .listPlansByUser()\n      .pipe(take(1))\n      .subscribe({\n        next: (plans) => {\n          this.loading = false;\n          this.datasource.data = plans;\n          this.datasource.sort = this.sort;\n        },\n        error: () => {\n          this.loading = false;\n          this.error = true;\n        },\n      });\n  }\n\n  deletePlan(): void {\n    if (!this.selectedPlan) {\n      return;\n    }\n    const planIdsToDelete: string[] = [String(this.selectedPlan.id)];\n    const dialogRef: MatDialogRef<DeleteDialogComponent> = this.dialog.open(\n      DeleteDialogComponent,\n      {\n        data: {\n          name: '\"' + this.selectedPlan.name + '\"',\n        },\n      }\n    );\n    dialogRef\n      .afterClosed()\n      .pipe(take(1))\n      .subscribe((confirmed) => {\n        if (confirmed) {\n          this.planService\n            .deletePlan(planIdsToDelete)\n            .subscribe((_) => this.refresh());\n\n          this.snackbar.open(\n            `Successfully deleted plan: ${this.selectedPlan?.name}`,\n            'Dismiss',\n            SNACK_NOTICE_CONFIG\n          );\n        }\n      });\n  }\n\n  sharePlan() {\n    if (!this.selectedPlan) {\n      return;\n    }\n    this.dialog.open(SharePlanDialogComponent, {\n      data: {\n        planningAreaName: '\"' + this.selectedPlan.name + '\"',\n        planningAreaId: this.selectedPlan.id,\n      },\n      restoreFocus: false,\n      panelClass: 'no-padding-dialog',\n    });\n  }\n\n  refresh(): void {\n    this.getPlansFromService();\n  }\n\n  selectPlan(plan: Plan) {\n    this.selectedPlan = plan;\n  }\n\n  viewMap() {\n    if (!this.selectedPlan) {\n      return;\n    }\n    this.router.navigate(['explore', this.selectedPlan.id]);\n  }\n\n  goToScenario() {\n    if (!this.selectedPlan) {\n      return;\n    }\n    this.router.navigate(['plan', this.selectedPlan.id]);\n  }\n\n  shareEnabled() {\n    if (!this.selectedPlan) {\n      return false;\n    }\n    return canViewCollaborators(this.selectedPlan);\n  }\n\n  get canDeletePlanningArea() {\n    if (!this.selectedPlan) {\n      return false;\n    }\n    const user = this.authService.currentUser();\n    if (!user) {\n      return false;\n    }\n    return canDeletePlanningArea(this.selectedPlan, user);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@angular/material' as mat;\n@import \"../../../styles/mixins\";\n@import \"../../../styles/colors\";\n\n:host {\n  display: block;\n}\n\n.button-row {\n  display: flex;\n  flex-direction: row;\n  gap: 12px;\n  justify-content: flex-end;\n  padding-block: 12px;\n}\n\nh2 {\n  color: #5f6368;\n  font-size: 18px;\n  font-weight: 400;\n  line-height: 24px;\n}\n\n.table-row {\n  cursor: pointer;\n\n  &:hover {\n    background-color: transparentize(\n      $color: $color-standard-blue,\n      $amount: 0.9\n    );\n  }\n\n}\n\n.selected .mat-column-name,\n.selected {\n  border-left-color: $color-standard-blue;\n}\n\n.selected {\n  background-color: transparentize(\n    $color: $color-standard-blue,\n    $amount: 0.9\n  );\n}\n\nmat-header-row {\n  min-height: 80px;\n  position: sticky;\n  top: 0;\n  background-color: white;\n  z-index: 10;\n}\n\nmat-header-row,\nmat-row {\n  gap: 20px;\n}\n\n.mat-column-name {\n  border-left: 6px solid transparent;\n  flex-basis: 8%;\n  position: relative;\n\n  &::after {\n    right: 0;\n    background: linear-gradient(90deg, #d5d5d5, transparent);\n    position: absolute;\n    display: block;\n    content: '';\n    width: 5px;\n    height: 100%;\n  }\n}\n\n.mat-header-cell.mat-column-name {\n  font-weight: bold;\n  color: black;\n  margin-right: -6px;\n\n  ::ng-deep.mat-sort-header-container {\n    align-self: end;\n    padding-bottom: 10px;\n  }\n}\n\n.mat-column-creator {\n  flex-basis: 5%;\n}\n\n.mat-column-lastUpdated {\n  flex-basis: 10%;\n  position: relative;\n  overflow: visible;\n}\n\n.mat-header-cell:not(.mat-column-name) {\n  border-right: 1px solid rgba(0, 0, 0, 0.12);\n}\n\n\n.table-wrapper {\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  height: calc(100% - 20px);\n}\n\n.table-scroll {\n  flex: 1;\n  overflow-y: scroll;\n}\n",
                    "styleUrl": "./plan-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "planService",
                        "type": "PlanService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "featureService",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "planService",
                        "type": "PlanService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "featureService",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "canDeletePlanningArea": {
                    "name": "canDeletePlanningArea",
                    "getSignature": {
                        "name": "canDeletePlanningArea",
                        "type": "",
                        "returnType": "",
                        "line": 148
                    }
                }
            },
            "templateData": "<app-section-loader\n  [isLoading]=\"loading\"\n  [hasData]=\"datasource.data.length > 0\"\n  [hasError]=\"error\"\n  errorTitle=\"Error Loading Planning Areas\"\n  errorMsg=\"We encountered an issue while loading your planning areas. Please try again later.\"\n  emptyStateTitle=\"No planning areas yet\"\n  emptyStateContent=\"Click “Explore” to start creating your planning areas.\n  Not ready to create new plans?\n  You can explore the mapping tool without creating a planning area.\">\n  <div class=\"table-wrapper\">\n    <mat-table [dataSource]=\"datasource\" matSort class=\"table-scroll\">\n      <!-- Name Column -->\n      <ng-container matColumnDef=\"name\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>\n          Name\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element; dataSource: planrows\">\n          {{ element.name }}\n        </mat-cell>\n      </ng-container>\n\n      <!-- Creator Column -->\n      <ng-container matColumnDef=\"creator\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>\n          Creator\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element; dataSource: planrows\">\n          {{ element.creator }}\n        </mat-cell>\n      </ng-container>\n\n      <!-- Timestamp Column -->\n      <!-- TODO replace with last modified-->\n      <ng-container matColumnDef=\"lastUpdated\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>\n          Date Last Modified\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element; dataSource: planrows\">\n          {{ element.latest_updated | date: 'medium' }}\n        </mat-cell>\n      </ng-container>\n\n      <!-- Acres Column -->\n      <ng-container matColumnDef=\"totalAcres\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>\n          Total Acres\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element; dataSource: planrows\">\n          {{ element.area_acres | number: '1.0-0' }}\n        </mat-cell>\n      </ng-container>\n\n      <!-- Saved Scenarios Column -->\n      <ng-container matColumnDef=\"scenarios\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>\n          # of Scenarios\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element; dataSource: planrows\">\n          {{ element.scenario_count }}\n        </mat-cell>\n      </ng-container>\n\n      <!-- Region Column -->\n      <ng-container matColumnDef=\"region\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>\n          Region\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element; dataSource: planrows\">\n          {{ element.region_name }}\n        </mat-cell>\n      </ng-container>\n\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n      <mat-row\n        class=\"table-row\"\n        [ngClass]=\"{ selected: selectedPlan && selectedPlan.id === row.id }\"\n        *matRowDef=\"let row; columns: displayedColumns\"\n        (click)=\"selectPlan(row)\"\n        (dblclick)=\"goToScenario()\"></mat-row>\n    </mat-table>\n\n    <div class=\"button-row\">\n      <button\n        (click)=\"deletePlan()\"\n        [disabled]=\"!canDeletePlanningArea\"\n        class=\"negative\">\n        Delete\n      </button>\n      <button\n        (click)=\"sharePlan()\"\n        [disabled]=\"!shareEnabled()\"\n        *appFeatureFlag=\"'show_share_modal'\"\n        class=\"ghost-button\">\n        Share\n      </button>\n      <button\n        (click)=\"viewMap()\"\n        [disabled]=\"!selectedPlan\"\n        class=\"ghost-button\">\n        View map\n      </button>\n      <button\n        class=\"ghost-button\"\n        (click)=\"goToScenario()\"\n        [disabled]=\"!selectedPlan\">\n        Scenarios\n      </button>\n    </div>\n  </div>\n</app-section-loader>\n"
        },
        {
            "name": "ProjectAreasComponent",
            "id": "component-ProjectAreasComponent-8e89f3fc74e15f994d8d67b029f85fcaf01c8f71b8aced025bf7544a123b0c1cc861eb32f5dbe39fc6844da0a4f4eb3ce1dce8ed8c0cee7e37f855d4f505d68c",
            "file": "src/app/plan/project-areas/project-areas.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-areas",
            "styleUrls": [
                "./project-areas.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-areas.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "areas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "ProjectAreaReport[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "PROJECT_AREA_COLORS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "getColorByPosition",
                    "defaultValue": "getColorForProjectPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "total",
                    "defaultValue": "{\n    acres: 0,\n    percentTotal: 0,\n    estimatedCost: 0,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectTotalReport",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateTotal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges } from '@angular/core';\nimport {\n  getColorForProjectPosition,\n  parseResultsToTotals,\n} from '../plan-helpers';\nimport { PROJECT_AREA_COLORS } from '../../shared/constants';\n\nexport interface ProjectAreaReport {\n  id: number;\n  acres: number;\n  percentTotal: number;\n  estimatedCost: number;\n  score: number;\n}\n\nexport interface ProjectTotalReport {\n  acres: number;\n  percentTotal: number;\n  estimatedCost: number;\n}\n\n@Component({\n  selector: 'app-project-areas',\n  templateUrl: './project-areas.component.html',\n  styleUrls: ['./project-areas.component.scss'],\n})\nexport class ProjectAreasComponent implements OnChanges {\n  @Input() areas!: ProjectAreaReport[];\n  colors = PROJECT_AREA_COLORS;\n\n  total: ProjectTotalReport = {\n    acres: 0,\n    percentTotal: 0,\n    estimatedCost: 0,\n  };\n\n  ngOnChanges() {\n    this.calculateTotal();\n  }\n\n  private calculateTotal() {\n    if (this.areas) {\n      this.total = parseResultsToTotals(this.areas);\n    }\n  }\n\n  getColorByPosition = getColorForProjectPosition;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  border: 1px #a4aae0 solid;\n  border-radius: 10px;\n  display: inline-block;\n  margin-top: 10px;\n  height: auto;\n  width: 100%;\n  box-shadow: 0 3px 0 0 #aeb0b8;\n  background-color: white;\n  box-sizing: border-box;\n  padding: 10px;\n}\n\n.title {\n  font-size: 15px;\n  font-weight: 500;\n  margin: 0;\n  text-transform: uppercase;\n}\n\n.flex-row {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 15px;\n  margin-top: -7px;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n\nth {\n  font-weight: bold;\n}\n\ntd {\n  text-align: center;\n}\n\n.score {\n  font-weight: bold;\n}\n\ntr:nth-child(even):not(.total-row) {\n  background-color: #e3e5e8;\n}\n\n.total-row {\n  border-top: 1px solid black;\n}\n\n.tooltip {\n  padding: 20px;\n}\n\n.area-id {\n  border-left: 8px solid transparent;\n  display: block;\n}\n\n@media print {\n  :host {\n    border: none;\n    box-shadow: none;\n  }\n  mat-icon {\n    display: none;\n  }\n}\n",
                    "styleUrl": "./project-areas.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"flex-row\">\n  <h3 class=\"title\">Project Areas</h3>\n  <button mat-icon-button class=\"help\" [matMenuTriggerFor]=\"tooltipMenu\">\n    <mat-icon class=\"material-symbols-outlined\" color=\"primary\">\n      info_outline\n    </mat-icon>\n    <mat-menu #tooltipMenu=\"matMenu\">\n      <div class=\"tooltip\">\n        <p>\n          Project areas are the land areas defined by your treatment goals and\n          constraints. You can have up to 10 project areas per scenario, and\n          Planscape will rank those project areas according to how well they\n          match your treatment goals. Each project area will show the number of\n          acres in that area, the percent of planning acreage that project\n          defines, the estimated cost of that project, and the ranking of that\n          project area effectiveness relative to other projects, based on the\n          treatment goals.\n        </p>\n      </div>\n    </mat-menu>\n  </button>\n</div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Acres</th>\n      <th>% Total</th>\n      <th>Est Cost</th>\n      <th>Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let area of areas\">\n      <td\n        class=\"area-id\"\n        [style.border-left-color]=\"getColorByPosition(area.id)\">\n        {{ area.id }}\n      </td>\n      <td data-id=\"acres\">{{ area.acres | number: '1.0-0' }}</td>\n      <td data-id=\"percentTotal\">{{ area.percentTotal | percent: '1.0-2' }}</td>\n      <td data-id=\"estimatedCost\">{{ area.estimatedCost | currencyInK }}</td>\n      <td data-id=\"score\" class=\"score\">{{ area.score | number: '1.0-2' }}</td>\n    </tr>\n    <tr class=\"total-row\">\n      <td></td>\n      <td data-id=\"total-acres\">{{ total.acres | number: '1.0-0' }}</td>\n      <td data-id=\"total-percent\">\n        {{ total.percentTotal | percent: '1.0-2' }}\n      </td>\n      <td data-id=\"total-estimatedCost\">\n        {{ total.estimatedCost | currencyInK }}\n      </td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n"
        },
        {
            "name": "ProjectAreasMetricsComponent",
            "id": "component-ProjectAreasMetricsComponent-3b79af0f787f7acde17111262fdaddf3d9216e96b08f6c44fda15d75c6e844a29eb739f70fc6e31afa010556593c9451ed715b327696ae2671faa140d28dfd18",
            "file": "src/app/plan/project-areas-metrics/project-areas-metrics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-areas-metrics",
            "styleUrls": [
                "./project-areas-metrics.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-areas-metrics.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ChartData[]",
                    "decorators": []
                },
                {
                    "name": "priorities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "selectedCharts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "ChartData[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mapConditionLayer$",
                    "defaultValue": "this.planStateService.planState$.pipe(\n    map((planState) => planState.mapConditionLayer)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "filterData",
                    "args": [
                        {
                            "name": "data",
                            "type": "ChartData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataToFilter",
                            "type": "ChartData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentChart",
                            "type": "ChartData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ChartData[]",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ChartData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataToFilter",
                            "type": "ChartData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentChart",
                            "type": "ChartData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectDataPoint",
                    "args": [
                        {
                            "name": "e",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMapLayer",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { MatLegacySelectChange as MatSelectChange } from '@angular/material/legacy-select';\nimport { ChartData } from './chart-data';\nimport { map } from 'rxjs';\nimport { PlanStateService } from '@services';\n\n@Component({\n  selector: 'app-project-areas-metrics',\n  templateUrl: './project-areas-metrics.component.html',\n  styleUrls: ['./project-areas-metrics.component.scss'],\n})\nexport class ProjectAreasMetricsComponent {\n  @Input() data: ChartData[] = [];\n  @Input() selectedCharts: ChartData[] = [];\n  @Input() priorities: string[] = [];\n\n  mapConditionLayer$ = this.planStateService.planState$.pipe(\n    map((planState) => planState.mapConditionLayer)\n  );\n\n  constructor(private planStateService: PlanStateService) {}\n\n  selectDataPoint(e: MatSelectChange, i: number) {\n    const showingThisLayer =\n      this.planStateService.planState$.value.mapConditionLayer ===\n      this.selectedCharts[i]['metric_layer'];\n\n    this.selectedCharts[i] = e.value;\n    if (showingThisLayer) {\n      this.toggleMapLayer(i);\n    }\n  }\n\n  toggleMapLayer(i: number) {\n    const planState = this.planStateService.planState$.value;\n    const measurement = this.selectedCharts[i]['measurement'];\n    const legend = planState.legendUnits === measurement ? null : measurement;\n    this.planStateService.updateStateWithLegendUnits(legend);\n    const metric = this.selectedCharts[i]['metric_layer'];\n    const condition = planState.mapConditionLayer === metric ? null : metric;\n\n    this.planStateService.updateStateWithConditionLayer(condition);\n  }\n\n  filterData(\n    data: ChartData[],\n    dataToFilter: ChartData[],\n    currentChart: ChartData\n  ): ChartData[] {\n    return data.filter((d) => d === currentChart || !dataToFilter.includes(d));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  border: 1px #a4aae0 solid;\n  border-radius: 10px;\n  display: inline-block;\n  margin-top: 10px;\n  height: auto;\n  width: 100%;\n  box-shadow: 0 3px 0 0 #aeb0b8;\n  background-color: white;\n  box-sizing: border-box;\n  padding: 10px;\n}\n\n.title {\n  font-size: 15px;\n  font-weight: 500;\n  margin: 0;\n  text-transform: uppercase;\n}\n\n.flex-row {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 15px;\n}\n\n.chart-holder {\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  gap: 10px;\n  position: relative;\n}\n\napp-report-chart {\n  display: block;\n  min-height: 200px;\n}\n\n.mat-form-field {\n  width: 100%;\n  overflow: hidden;\n}\n\n.map-selector {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.map-button {\n  display: block;\n  margin-bottom: 2%;\n}\n\n.tooltip {\n  padding: 20px;\n}\n\n.selected {\n  color: #4965c7;\n}\n\n@media print {\n  :host {\n    border: none;\n    box-shadow: none;\n  }\n  mat-icon {\n    display: none;\n  }\n}\n\n",
                    "styleUrl": "./project-areas-metrics.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex-row\">\n  <h3 class=\"title\">Metrics per Project area</h3>\n  <button mat-icon-button class=\"help\" [matMenuTriggerFor]=\"tooltipMenu\">\n    <mat-icon class=\"material-symbols-outlined\" color=\"primary\">\n      info_outline\n    </mat-icon>\n    <mat-menu #tooltipMenu=\"matMenu\">\n      <div class=\"tooltip\">\n        <p>\n          Each Treatment Goal has associated output metrics. These metrics come\n          directly from the Regional Resource Kits. While the reporting page\n          shows four graphs, there is a dropdown menu at the top of each graph\n          that allows you to change the metric that you’re viewing. You can also\n          tap on the map icon and the RRK layer will be displayed on the map\n          under your scenario. \n        </p>\n\n        <p>\n          If you want access to all of the metrics data, you can download that\n          data in a .csv file and export it to your computer. You can also\n          choose to download a shapefile of your project areas.\n        </p>\n      </div>\n    </mat-menu>\n  </button>\n</div>\n<div class=\"chart-holder\">\n  <div *ngFor=\"let chart of selectedCharts; index as i\">\n    <!-- TODO Add styling class -->\n    <div class=\"map-selector\">\n      <div class=\"map-button\">\n        <button\n          mat-button\n          (click)=\"toggleMapLayer(i)\"\n          [ngClass]=\"{\n            ' selected': chart.metric_layer === (mapConditionLayer$ | async)\n          }\">\n          <mat-icon>map</mat-icon>\n        </button>\n      </div>\n      <mat-form-field>\n        <mat-select\n          [value]=\"chart\"\n          (selectionChange)=\"selectDataPoint($event, i)\">\n          <mat-option\n            *ngFor=\"let dataSet of filterData(data, selectedCharts, chart)\"\n            [value]=\"dataSet\">\n            {{ priorities.includes(dataSet.key) ? '*' : '' }}\n            {{ dataSet.label }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <app-report-chart\n      [measurement]=\"chart.measurement\"\n      [values]=\"chart.values\"></app-report-chart>\n  </div>\n</div>\n"
        },
        {
            "name": "ProjectCardComponent",
            "id": "component-ProjectCardComponent-5d0ed693bb565780b49bf2384a4069cf91e66f39679c8b9602eb3045174846953d9d101a5d90e763671a8e837115e0b77c6e6ad8b07bbf855f2c7b650c41f3dc",
            "file": "src/app/map/project-card/project-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-card",
            "styleUrls": [
                "./project-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "features",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "Feature<Geometry, any>[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "initializedEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "getProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "Project[]",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isProject",
                    "args": [
                        {
                            "name": "feature",
                            "type": "Feature<Geometry | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feature",
                            "type": "Feature<Geometry | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Feature, Geometry } from 'geojson';\n\ninterface Project {\n  PROJECT_NAME?: string;\n  PROJECT_STATUS?: string;\n  PROJECT_START_DATE?: number;\n  PROJECT_END_DATE?: number;\n  LAST_UPDATED?: number;\n  PROJECT_TYPE?: string;\n  REGION?: string;\n  UNIT?: string;\n  treatments: Treatment[];\n}\n\ninterface Treatment {\n  PROJECT_NAME?: string;\n  TREATMENT_NAME?: string;\n  TREATMENT_OBJECTIVE?: string;\n  ACTIVITY_STATUS?: string;\n}\n\n@Component({\n  selector: 'app-project-card',\n  templateUrl: './project-card.component.html',\n  styleUrls: ['./project-card.component.scss'],\n})\nexport class ProjectCardComponent implements AfterViewInit, OnInit {\n  @Input() features!: Feature<Geometry, any>[];\n  @Output() initializedEvent = new EventEmitter<void>();\n\n  projects!: Project[];\n\n  ngOnInit() {\n    this.projects = this.getProjects();\n  }\n\n  ngAfterViewInit(): void {\n    this.initializedEvent.emit();\n  }\n\n  isProject(feature: Feature<Geometry, any>): boolean {\n    return !!feature.properties.PROJECT_NAME;\n  }\n\n  private getProjects(): Project[] {\n    const projectNames: Set<Project> = new Set<Project>();\n    const projects: Map<string, Project> = new Map<string, Project>();\n\n    this.features\n      .filter((feature) => this.isProject(feature))\n      .forEach((feature) => {\n        const projectName = feature.properties.PROJECT_NAME;\n        if (projectNames.has(projectName)) {\n          projects\n            .get(projectName)\n            ?.treatments.push(feature.properties as Treatment);\n        } else {\n          projectNames.add(projectName);\n          const project = feature.properties as Project;\n          project.treatments = [feature.properties as Treatment];\n          projects.set(projectName, project);\n        }\n      });\n\n    return Array.from(projects.values());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".detail-card {\n  width: 300px;\n}\n\n.mat-card-title {\n  font-size: 18px;\n}\n",
                    "styleUrl": "./project-card.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnInit"
            ],
            "templateData": "<div class=\"detail-card\">\n  <mat-card *ngFor=\"let project of projects\">\n    <mat-card-title-group>\n      <mat-card-title>{{ project.PROJECT_NAME }}</mat-card-title>\n      <mat-card-subtitle>\n        Project ({{ project.PROJECT_STATUS }}) &#8226;\n        {{ project.PROJECT_START_DATE | date }} -\n        {{ project.PROJECT_END_DATE | date }}\n      </mat-card-subtitle>\n    </mat-card-title-group>\n    <mat-card-content>\n      <p>Last updated: {{ project.LAST_UPDATED | date }}</p>\n      <p>Project type: {{ project.PROJECT_TYPE }}</p>\n      <p>Region: {{ project.REGION }}</p>\n      <p>Unit: {{ project.UNIT }}</p>\n      <p>Treatments here:</p>\n      <ul>\n        <li *ngFor=\"let treatment of project.treatments\">\n          <b>{{ treatment.TREATMENT_NAME }}</b>\n          ({{ treatment.ACTIVITY_STATUS }}): {{ treatment.TREATMENT_OBJECTIVE }}\n        </li>\n      </ul>\n    </mat-card-content>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "RegionDropdownComponent",
            "id": "component-RegionDropdownComponent-981f737942fa50e4c785024bb1fc97ec6a3ca01a26389321ca396d3690006b9b66ddf1242cce717c79f97423dd6e49692efcedceb0d638d7bf516615eee52d04",
            "file": "src/app/map/region-dropdown/region-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-region-dropdown",
            "styleUrls": [
                "./region-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./region-dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "regionOptions",
                    "defaultValue": "this.region.regionOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedRegion$",
                    "defaultValue": "this.sessionService.region$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setRegion",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSets the region from the dropdown and goes to the map.",
                    "description": "<p>Sets the region from the dropdown and goes to the map.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Region } from '../../types';\nimport { MapService, SessionService } from '@services';\nimport { RegionService } from '@services/region.service';\n\n@Component({\n  selector: 'app-region-dropdown',\n  templateUrl: './region-dropdown.component.html',\n  styleUrls: ['./region-dropdown.component.scss'],\n})\nexport class RegionDropdownComponent {\n  readonly regionOptions = this.region.regionOptions;\n  readonly selectedRegion$ = this.sessionService.region$;\n  @Input() disabled = false;\n\n  constructor(\n    private sessionService: SessionService,\n    private mapService: MapService,\n    private region: RegionService\n  ) {}\n\n  /** Sets the region from the dropdown and goes to the map. */\n  setRegion(event: Event) {\n    // The built-in type for event is generic, so it needs to be cast\n    const region = (event.target as HTMLSelectElement).value as Region;\n    this.sessionService.setRegion(region);\n    this.mapService.setConfigs();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../shared/_variables.scss\";\n\n// Region select dropdown arrow\n@mixin arrow {\n  content: '';\n  $arrow-size: 5px;\n  position: relative;\n  right: 12px;\n  top: 15px;\n  width: 0;\n  height: 0;\n  border-left: $arrow-size solid transparent;\n  border-right: $arrow-size solid transparent;\n  border-top: $arrow-size solid #ffffff;\n  pointer-events: none;\n}\n\n// styles for the dropdown on the map controls\n.region-wrapper {\n  height: 32px;\n  box-shadow: 0 1px 1px 0 #00000024,\n  0 2px 2px 0 #00000033,\n  0 1px 5px 0 #0000001f;\n\n  overflow: hidden;\n  border-radius: 6px;\n  position: relative;\n\n  &::before {\n    content: '';\n    width: 1px;\n    height: 100%;\n    background-color: #eee;\n    position: absolute;\n    right: 26px;\n    top: 0;\n  }\n\n  &::after {\n    content: '';\n    $arrow-size: 5px;\n    position: absolute;\n    right: 10px;\n    top: 14px;\n    width: 0;\n    height: 0;\n    border-left: 4px solid transparent;\n    border-right: 4px solid transparent;\n    border-top: 5px solid #3367d6;\n    pointer-events: none;\n  }\n\n  &.disabled::after {\n    border-top-color: gray;\n  }\n}\n\n.region {\n  &::-ms-expand {\n    display: none; /* IE */\n  }\n\n  -moz-appearance: none; /* Firefox */\n  -webkit-appearance: none; /* Safari and Chrome */\n  appearance: none;\n  font-weight: 500;\n  border: none;\n  text-transform: uppercase;\n  color: #3367d6;\n  padding: 10px;\n  padding-right: 36px;\n  border-right: 1px solid #eeeeee;\n  text-align: center;\n\n  &:disabled {\n    color: gray;\n  }\n}\n",
                    "styleUrl": "./region-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "region",
                        "type": "RegionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "region",
                        "type": "RegionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- Region Dropdown -->\n<div class=\"region-wrapper\" [ngClass]=\"{ disabled: disabled }\">\n  <select (change)=\"setRegion($event)\" class=\"region\" [disabled]=\"disabled\">\n    <option [selected]=\"(selectedRegion$ | async) === null\" disabled>\n      Select a region\n    </option>\n    <option\n      *ngFor=\"let region of regionOptions\"\n      [value]=\"region.type\"\n      [disabled]=\"!region.available\"\n      [selected]=\"(selectedRegion$ | async) === region.type\"\n      routerLink=\"/map\">\n      {{ region.name }}\n    </option>\n  </select>\n</div>\n"
        },
        {
            "name": "ReportChartComponent",
            "id": "component-ReportChartComponent-34f151ed9e594283dcabf5f2090b4fe3b6053367987b85b2a113fd52dba307f077d60288b2f4edf232c30c7decd58cd85090b87c5da2d2a6b4cd37a1fbef4607",
            "file": "src/app/plan/report-chart/report-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-report-chart",
            "styleUrls": [
                "./report-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./report-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "measurement",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "values",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "barChartData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "barChartOptions",
                    "defaultValue": "{\n    backgroundColor: '#4965c7',\n    borderColor: '#4965c7',\n    elements: {\n      bar: {\n        hoverBackgroundColor: '#577bf9',\n      },\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        enabled: false,\n      },\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ChartConfiguration } from 'chart.js';\nimport { PROJECT_AREA_COLORS } from '../../shared/constants';\n\n@Component({\n  selector: 'app-report-chart',\n  templateUrl: './report-chart.component.html',\n  styleUrls: ['./report-chart.component.scss'],\n})\nexport class ReportChartComponent implements OnInit {\n  @Input() measurement = '';\n  @Input() values: number[] = [];\n\n  public barChartData: ChartConfiguration<'bar'>['data'] | null = null;\n\n  public barChartOptions: ChartConfiguration<'bar'>['options'] = {\n    backgroundColor: '#4965c7',\n    borderColor: '#4965c7',\n    elements: {\n      bar: {\n        hoverBackgroundColor: '#577bf9',\n      },\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        enabled: false,\n      },\n    },\n  };\n\n  ngOnInit() {\n    this.barChartData = {\n      labels: this.values.map((v, i) => i + 1),\n      datasets: [\n        {\n          data: this.values,\n          backgroundColor: PROJECT_AREA_COLORS,\n        },\n      ],\n    };\n\n    this.barChartOptions = {\n      ...this.barChartOptions,\n      ...{\n        scales: {\n          y: {\n            title: {\n              display: true,\n              text: this.measurement,\n            },\n          },\n          x: {\n            ticks: {\n              autoSkip: false,\n              maxRotation: 0,\n              minRotation: 0,\n            },\n            title: {\n              display: true,\n              text: 'Project Area',\n            },\n          },\n        },\n      },\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\ncanvas {\n  width: 100%;\n}\n",
                    "styleUrl": "./report-chart.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<canvas\n  *ngIf=\"barChartData\"\n  baseChart\n  [data]=\"barChartData\"\n  [options]=\"barChartOptions\"\n  [legend]=\"false\"\n  [type]=\"'bar'\"></canvas>\n"
        },
        {
            "name": "ResetPasswordDialogComponent",
            "id": "component-ResetPasswordDialogComponent-bda3bc65fa1681b91c8ce368fa3852c38e385bf86142884fdcaa167efe536f7883b31bf34fe5c28a5a01b8a8f8311f725cc078eda9d46398effa157e11b15944",
            "file": "src/app/forget-password/reset-password-dialog/reset_password_dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./reset_password_dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkUrl",
                    "defaultValue": "'/assets/png/gm_done_gm_grey_24dp.png'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for reset password confirmation dialog.</p>\n",
            "rawdescription": "\nComponent for reset password confirmation dialog.",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatLegacyDialogRef as MatDialogRef } from '@angular/material/legacy-dialog';\n\n/**  Component for reset password confirmation dialog. */\n@Component({\n  selector: 'app-reset-password-dialog',\n  templateUrl: './reset_password_dialog.component.html',\n})\nexport class ResetPasswordDialogComponent {\n  protected readonly checkUrl = '/assets/png/gm_done_gm_grey_24dp.png';\n\n  constructor(\n    private readonly dialogRef: MatDialogRef<ResetPasswordDialogComponent>,\n    private router: Router\n  ) {}\n\n  protected close() {\n    this.dialogRef.close({});\n    this.router.navigate(['home']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ResetPasswordDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ResetPasswordDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-dialog-content class=\"reset-password-dialog\">\n  <img src=\"{{ checkUrl }}\" alt=\"\" />\n  <h3\n    class=\"gmat-headline-3\"\n    i18n=\"Title text for dialog confirming email reset\">\n    Password reset email sent\n  </h3>\n  <p\n    class=\"gmat-body-1\"\n    i18n=\"Text indicating email sent to user to reset password\">\n    You should receive an email with instructions on how to reset your password.\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions class=\"dialog-button-container\">\n  <button\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"close()\"\n    i18n=\"Button to acknowledge and close the reset password dialog\">\n    OK\n  </button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "ResourceUnavailableComponent",
            "id": "component-ResourceUnavailableComponent-d79f688a0fea016f9f9e884973b84cc5529c6233fd4f9ef17b347039a915e7b34aa53521eb9eb1cbc407dd8f63462ef9c0de567317c39144aea531a19e9b6e92",
            "file": "src/app/plan/resource-unavailable/resource-unavailable.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-resource-unavailable",
            "styleUrls": [
                "./resource-unavailable.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./resource-unavailable.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resource",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-resource-unavailable',\n  templateUrl: './resource-unavailable.component.html',\n  styleUrls: ['./resource-unavailable.component.scss'],\n})\nexport class ResourceUnavailableComponent {\n  @Input() resource = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".root-container {\n  box-sizing: border-box;\n  height: 100%;\n  padding: 24px;\n  width: 100%;\n}\n",
                    "styleUrl": "./resource-unavailable.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"root-container\">\n  <h1>{{ resource | titlecase }} not found</h1>\n  <p>\n    Sorry! Either the {{ resource }} you're trying to access doesn't exist, or\n    you don't have permission to see it.\n  </p>\n</div>\n"
        },
        {
            "name": "SavedScenariosComponent",
            "id": "component-SavedScenariosComponent-241b7d2d4c9525cd6dc8c1eec85b946404526c74be998afddf531687fce3bb20dfa10ad9473cda6c4a0511ceaf26b69b807f0eaf74a64c680e1d4ff25940afe4",
            "file": "src/app/plan/plan-summary/saved-scenarios/saved-scenarios.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-saved-scenarios",
            "styleUrls": [
                "./saved-scenarios.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./saved-scenarios.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "plan",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "Plan | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeScenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioRow[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "archivedScenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioRow[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "highlightedScenarioRow",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioRow | null",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "scenariosForUser",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioRow[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "selectedTabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "showOnlyMyScenarios",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "totalScenarios",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "user$",
                    "defaultValue": "this.authService.loggedInUser$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "confirmDeleteScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteScenario",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchScenarios",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "highlightScenario",
                    "args": [
                        {
                            "name": "row",
                            "type": "ScenarioRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "ScenarioRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openConfig",
                    "args": [
                        {
                            "name": "configId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "configId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pollForChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tabChange",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleScenarioStatus",
                    "args": [
                        {
                            "name": "archive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "archive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "viewScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../../services';\nimport { interval, take } from 'rxjs';\nimport { Plan, Scenario } from 'src/app/types';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { POLLING_INTERVAL } from '../../plan-helpers';\nimport {\n  MatLegacyDialog as MatDialog,\n  MatLegacyDialogRef as MatDialogRef,\n} from '@angular/material/legacy-dialog';\nimport { DeleteDialogComponent } from '../../../delete-dialog/delete-dialog.component';\nimport { canAddScenario } from '../../../plan/permissions';\nimport {\n  SNACK_BOTTOM_NOTICE_CONFIG,\n  SNACK_ERROR_CONFIG,\n  SNACK_NOTICE_CONFIG,\n} from '../../../shared/constants';\n\nimport { ScenarioService } from '@services';\nimport { MatTab } from '@angular/material/tabs';\n\nexport interface ScenarioRow extends Scenario {\n  selected?: boolean;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'app-saved-scenarios',\n  templateUrl: './saved-scenarios.component.html',\n  styleUrls: ['./saved-scenarios.component.scss'],\n})\nexport class SavedScenariosComponent implements OnInit {\n  @Input() plan: Plan | null = null;\n  user$ = this.authService.loggedInUser$;\n\n  highlightedScenarioRow: ScenarioRow | null = null;\n  loading = true;\n  showOnlyMyScenarios: boolean = false;\n  activeScenarios: ScenarioRow[] = [];\n  archivedScenarios: ScenarioRow[] = [];\n  scenariosForUser: ScenarioRow[] = [];\n  selectedTabIndex = 0;\n  totalScenarios = 0;\n\n  constructor(\n    private route: ActivatedRoute,\n    private authService: AuthService,\n    private router: Router,\n    private snackbar: MatSnackBar,\n    private dialog: MatDialog,\n    private scenarioService: ScenarioService\n  ) {}\n\n  ngOnInit(): void {\n    this.fetchScenarios();\n    this.pollForChanges();\n  }\n\n  private pollForChanges() {\n    // we might want to check if any scenario is still pending in order to poll\n    interval(POLLING_INTERVAL)\n      .pipe(untilDestroyed(this))\n      .subscribe(() => this.fetchScenarios());\n  }\n\n  fetchScenarios(): void {\n    this.scenarioService\n      .getScenariosForPlan(this.plan?.id!)\n      .pipe(take(1))\n      .subscribe((scenarios) => {\n        this.totalScenarios = scenarios.length;\n\n        this.scenariosForUser = this.showOnlyMyScenarios\n          ? scenarios.filter((s) => s.user === this.user$.value?.id)\n          : scenarios;\n        this.activeScenarios = this.scenariosForUser.filter(\n          (s) => s.status === 'ACTIVE'\n        );\n        this.archivedScenarios = this.scenariosForUser.filter(\n          (s) => s.status === 'ARCHIVED'\n        );\n        this.loading = false;\n      });\n  }\n\n  get canAddScenarioForPlan(): boolean {\n    if (!this.plan) {\n      return false;\n    }\n    return canAddScenario(this.plan);\n  }\n\n  get showArchiveScenario() {\n    if (!this.plan) {\n      return false;\n    }\n    // Users that can add scenarios can potentially archive them.\n    // Users that cannot add scenarios can never archive/restore.\n    return this.plan.permissions.includes('add_scenario');\n  }\n\n  get canArchiveScenario() {\n    if (!this.plan || !this.highlightedScenarioRow) {\n      return false;\n    }\n    const user = this.authService.currentUser();\n    return (\n      user?.id === this.plan.user ||\n      user?.id == this.highlightedScenarioRow?.user\n    );\n  }\n\n  openConfig(configId?: number): void {\n    if (!configId) {\n      this.router.navigate(['config', ''], {\n        relativeTo: this.route,\n      });\n    } else {\n      this.router.navigate(['config', configId], { relativeTo: this.route });\n    }\n  }\n\n  viewScenario(): void {\n    this.router.navigate(['config', this.highlightedScenarioRow?.id], {\n      relativeTo: this.route,\n    });\n  }\n\n  confirmDeleteScenario(): void {\n    const dialogRef: MatDialogRef<DeleteDialogComponent> = this.dialog.open(\n      DeleteDialogComponent,\n      {\n        data: {\n          name: '\"' + this.highlightedScenarioRow?.name + '\"',\n        },\n      }\n    );\n    dialogRef\n      .afterClosed()\n      .pipe(take(1))\n      .subscribe((confirmed) => {\n        if (confirmed) {\n          this.deleteScenario([this.highlightedScenarioRow?.id!]);\n        }\n      });\n  }\n\n  private deleteScenario(ids: string[]) {\n    this.scenarioService.deleteScenarios(ids).subscribe({\n      next: (deletedIds) => {\n        this.snackbar.open(\n          `Deleted scenario${deletedIds.length > 1 ? 's' : ''}`,\n          'Dismiss',\n          SNACK_NOTICE_CONFIG\n        );\n        this.fetchScenarios();\n      },\n      error: (err) => {\n        this.snackbar.open(`Error: ${err}`, 'Dismiss', SNACK_ERROR_CONFIG);\n      },\n    });\n  }\n\n  highlightScenario(row: ScenarioRow): void {\n    this.highlightedScenarioRow = row;\n  }\n\n  toggleScenarioStatus(archive: boolean) {\n    const id = this.highlightedScenarioRow?.id;\n\n    if (id) {\n      this.scenarioService.toggleScenarioStatus(Number(id), archive).subscribe({\n        next: () => {\n          this.snackbar.open(\n            `\"${this.highlightedScenarioRow?.name}\" has been ${\n              archive ? 'archived' : 'restored'\n            }`,\n            'Dismiss',\n            SNACK_BOTTOM_NOTICE_CONFIG\n          );\n          this.highlightedScenarioRow = null;\n          this.fetchScenarios();\n        },\n        error: (err) => {\n          this.snackbar.open(\n            `Error: ${err.error.error}`,\n            'Dismiss',\n            SNACK_ERROR_CONFIG\n          );\n        },\n      });\n    }\n  }\n\n  tabChange(data: { index: number; tab: MatTab }) {\n    this.selectedTabIndex = data.index;\n    // reset selected row when changing tabs.\n    this.highlightedScenarioRow = null;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'sass:map';\n@use '@angular/material' as mat;\n@import '../../../../styles/mixins';\n@import '../../../../styles/colors';\n\n.saved-scenarios-wrapper {\n  position: relative;\n}\n\n.slide-toggle-my-scenarios {\n  @include standard-label();\n  position: absolute;\n  right: 0;\n  top: 12px;\n  z-index: 10;\n}\n\n.mat-card {\n  border-radius: 16px;\n  min-height: 180px;\n\n  .mat-card-title {\n    margin: 0;\n  }\n}\n\n.mat-card-content {\n  padding: 8px;\n}\n\n.mat-card-actions {\n  gap: 12px;\n  margin-right: 8px;\n}\n\n.no-scenarios-overlay {\n  align-items: center;\n  backdrop-filter: blur(2px);\n  background: rgba(79, 79, 79, 0.8);\n  border-radius: 16px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  z-index: 2;\n\n  p {\n    color: white;\n    font-size: 18px;\n    font-weight: 400;\n    line-height: 24px;\n  }\n}\n\n.new-scenario-button {\n  right: 5px;\n  margin-left: auto;\n\n  .mat-icon {\n    line-height: 21px;\n  }\n}\n\n.scenario-table-head {\n  display: flex;\n  gap: 50%;\n  align-items: center;\n  margin-bottom: 20px\n}\n\n.margin-top {\n  margin-top: 30px;\n}\n\n.empty-state {\n  @include standard-label();\n  color: $color-dark-gray;\n  padding: 40px 20px;\n  margin: 20px;\n  text-align: center;\n}\n\n",
                    "styleUrl": "./saved-scenarios.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "canAddScenarioForPlan": {
                    "name": "canAddScenarioForPlan",
                    "getSignature": {
                        "name": "canAddScenarioForPlan",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 88
                    }
                },
                "showArchiveScenario": {
                    "name": "showArchiveScenario",
                    "getSignature": {
                        "name": "showArchiveScenario",
                        "type": "",
                        "returnType": "",
                        "line": 95
                    }
                },
                "canArchiveScenario": {
                    "name": "canArchiveScenario",
                    "getSignature": {
                        "name": "canArchiveScenario",
                        "type": "",
                        "returnType": "",
                        "line": 104
                    }
                }
            },
            "templateData": "<div class=\"saved-scenarios-wrapper\">\n  <mat-card [style.margin-top]=\"'24px'\">\n    <div class=\"scenario-table-head\">\n      <mat-card-title>Scenarios</mat-card-title>\n      <div class=\"new-scenario-button\">\n        <button\n          matSuffix\n          mat-raised-button\n          color=\"primary\"\n          *ngIf=\"canAddScenarioForPlan\"\n          data-id=\"new-scenario\"\n          (click)=\"openConfig()\">\n          <mat-icon class=\"material-symbols-outlined\">add_box</mat-icon>\n          NEW SCENARIO\n        </button>\n      </div>\n    </div>\n    <app-section-loader\n      [isLoading]=\"loading\"\n      [hasData]=\"totalScenarios > 0\"\n      [ngClass]=\"{\n        'margin-top': totalScenarios === 0\n      }\"\n      emptyStateTitle=\"No scenarios yet\"\n      [emptyStateContent]=\"\n        canAddScenarioForPlan\n          ? 'Click “New scenario” to start creating your scenarios.'\n          : ''\n      \">\n      <mat-slide-toggle\n        color=\"primary\"\n        class=\"slide-toggle-my-scenarios\"\n        [(ngModel)]=\"showOnlyMyScenarios\"\n        (change)=\"fetchScenarios()\"\n        *appFeatureFlag=\"'show_share_modal'\">\n        Show only my scenarios\n      </mat-slide-toggle>\n      <mat-tab-group\n        mat-align-tabs=\"start\"\n        *appFeatureFlag=\"'show_share_modal'\"\n        (selectedTabChange)=\"tabChange($event)\">\n        <mat-tab label=\"ACTIVE\">\n          <mat-card-content>\n            <app-scenarios-table-list\n              *ngIf=\"activeScenarios.length > 0\"\n              [scenarios]=\"activeScenarios\"\n              [highlightedScenarioRow]=\"highlightedScenarioRow\"\n              (viewScenario)=\"viewScenario()\"\n              (selectScenario)=\"\n                highlightScenario($event)\n              \"></app-scenarios-table-list>\n\n            <div class=\"empty-state\" *ngIf=\"activeScenarios.length === 0\">\n              No active scenarios\n            </div>\n          </mat-card-content>\n        </mat-tab>\n        <mat-tab label=\"ARCHIVED\">\n          <mat-card-content>\n            <app-scenarios-table-list\n              *ngIf=\"archivedScenarios.length > 0\"\n              [scenarios]=\"archivedScenarios\"\n              [highlightedScenarioRow]=\"highlightedScenarioRow\"\n              (viewScenario)=\"viewScenario()\"\n              (selectScenario)=\"\n                highlightScenario($event)\n              \"></app-scenarios-table-list>\n            <div class=\"empty-state\" *ngIf=\"archivedScenarios.length === 0\">\n              No scenarios in Archived.\n            </div>\n          </mat-card-content>\n        </mat-tab>\n      </mat-tab-group>\n\n      <mat-card-content *appFeatureFlag=\"'show_share_modal'; hide: true\">\n        <app-scenarios-table-list\n          [scenarios]=\"activeScenarios\"\n          [highlightedScenarioRow]=\"highlightedScenarioRow\"\n          (viewScenario)=\"viewScenario()\"\n          (selectScenario)=\"\n            highlightScenario($event)\n          \"></app-scenarios-table-list>\n      </mat-card-content>\n      <mat-card-actions\n        align=\"end\"\n        *appFeatureFlag=\"'show_share_modal'; hide: true\">\n        <button\n          mat-button\n          [disabled]=\"highlightedScenarioRow === null\"\n          (click)=\"confirmDeleteScenario()\">\n          <mat-icon>delete</mat-icon>\n          DELETE\n        </button>\n        <button\n          mat-raised-button\n          [disabled]=\"highlightedScenarioRow === null\"\n          color=\"primary\"\n          (click)=\"viewScenario()\">\n          VIEW\n        </button>\n      </mat-card-actions>\n      <mat-card-actions align=\"end\" *appFeatureFlag=\"'show_share_modal'\">\n        <button\n          class=\"ghost-button\"\n          *ngIf=\"showArchiveScenario\"\n          [disabled]=\"!canArchiveScenario\"\n          (click)=\"toggleScenarioStatus(selectedTabIndex === 0)\">\n          <mat-icon>{{\n            selectedTabIndex === 0 ? 'archive' : 'unarchive'\n          }}</mat-icon>\n          {{ selectedTabIndex === 0 ? 'Archive' : 'Restore' }}\n        </button>\n        <button\n          [disabled]=\"highlightedScenarioRow === null\"\n          class=\"ghost-button\"\n          (click)=\"viewScenario()\">\n          <mat-icon>description</mat-icon>\n          View scenario\n        </button>\n      </mat-card-actions>\n    </app-section-loader>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "ScenarioFailureComponent",
            "id": "component-ScenarioFailureComponent-9b5223975a596f8a76cd96f66c95889242808d53537c8e9400026d4d0a62ec4d4752d0e4cc982ba8e2fef88639a18176885f361640a7d7ef1d2661b3c5f91e81",
            "file": "src/app/plan/scenario-failure/scenario-failure.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-failure",
            "styleUrls": [
                "./scenario-failure.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-failure.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "scenarioId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "scenarioName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "goBack",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "downloadCsv",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ScenarioService } from '@services';\nimport { FileSaverService } from '@services/file-saver.service';\n\n@Component({\n  selector: 'app-scenario-failure',\n  templateUrl: './scenario-failure.component.html',\n  styleUrls: ['./scenario-failure.component.scss'],\n})\nexport class ScenarioFailureComponent {\n  @Input() scenarioName: string = '';\n  @Input() scenarioId: string = '';\n  @Output() goBack = new EventEmitter();\n\n  constructor(\n    private scenarioService: ScenarioService,\n    private fileServerService: FileSaverService\n  ) {}\n\n  downloadCsv() {\n    const filename = this.scenarioName + ' csv';\n    if (this.scenarioId) {\n      this.scenarioService\n        .downloadCsvData(this.scenarioId)\n        .subscribe((data) => {\n          const blob = new Blob([data], {\n            type: 'application/zip',\n          });\n\n          this.fileServerService.saveAs(blob, filename);\n        });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  text-align: center;\n  margin: auto;\n  padding: 20px 10px;\n}\n\n.error {\n  padding: 20px 0;\n}\n\n.actions {\n  margin: 20px;\n}\n\n",
                    "styleUrl": "./scenario-failure.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fileServerService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileServerService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-icon class=\"material-symbols-outlined\">error</mat-icon>\n\n<h2>There was an error generating your scenario.</h2>\n<div class=\"error\">\n  It may be that your constraints are preventing the generation of a valid\n  scenario. Please review your constraints and try again.\n</div>\n<div class=\"actions\">\n  <button mat-raised-button (click)=\"downloadCsv()\" data-id=\"downloadCsv\">\n    Download CSV data\n  </button>\n</div>\n\n<div class=\"actions\">\n  <a mat-raised-button color=\"primary\" (click)=\"goBack.emit()\" class=\"return\">\n    RETURN TO SCENARIOS\n  </a>\n</div>\n"
        },
        {
            "name": "ScenarioNotStartedComponent",
            "id": "component-ScenarioNotStartedComponent-5320028aac79cd903f1f9d3b93312a564e80790e8ed96849a6e7a59ed71e332c27529875cec9d81931ab0771acebb0774b4a76523de19385c6b8fd302299da01",
            "file": "src/app/plan/scenario-not-started/scenario-not-started.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-not-started",
            "styleUrls": [
                "./scenario-not-started.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-not-started.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-scenario-not-started',\n  templateUrl: './scenario-not-started.component.html',\n  styleUrls: ['./scenario-not-started.component.scss'],\n})\nexport class ScenarioNotStartedComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p {\n  margin: 10px;\n}\n",
                    "styleUrl": "./scenario-not-started.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p>You need to generate the scenario first to get results</p>\n"
        },
        {
            "name": "ScenarioPendingComponent",
            "id": "component-ScenarioPendingComponent-ccbe19b87faf708f0f7d576129ba71c29980ce5cb10f650b63a348803ab65668d164df5c63cf8fcf2efcb7bb3a98cdd678310fc58111d5408bb68b378220f3f8",
            "file": "src/app/plan/scenario-pending/scenario-pending.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-pending",
            "styleUrls": [
                "./scenario-pending.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-pending.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-scenario-pending',\n  templateUrl: './scenario-pending.component.html',\n  styleUrls: ['./scenario-pending.component.scss'],\n})\nexport class ScenarioPendingComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  margin: 10px;\n  text-align: center;\n}\n\n.pending-icon {\n  margin: 10px auto;\n  display: block;\n  width: 50px;\n  height: 50px;\n  font-size: 50px;\n}\n.center {\n  margin: auto;\n}\n.spinner {\n  margin: 10px auto;\n}\n",
                    "styleUrl": "./scenario-pending.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-spinner diameter=\"30\" class=\"spinner\"></mat-spinner>\n\n<h3>\n  Planscape is generating your treatment scenario, this may take a few minutes.\n</h3>\n\n<div class=\"actions\">\n  <a mat-raised-button color=\"primary\" routerLink=\"/home\" class=\"return\">\n    RETURN TO AREA OVERVIEW\n  </a>\n</div>\n"
        },
        {
            "name": "ScenarioResultsComponent",
            "id": "component-ScenarioResultsComponent-658608f31da4d80034714b417efb903569f525f12cd68edcf78dff1383b898e572dbbde5c823e9e9be1d0af4509c18ddf5e99a51285ff8ec88e774dc982b2038",
            "file": "src/app/plan/scenario-results/scenario-results.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-results",
            "styleUrls": [
                "./scenario-results.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-results.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "priorities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "results",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "ScenarioResult | null",
                    "decorators": []
                },
                {
                    "name": "scenarioChartData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "scenarioId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "scenarioName",
                    "defaultValue": "'scenario_results'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "areas",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectAreaReport[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "selectedCharts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "downloadCsv",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "downloadShapeFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ProjectAreaReport } from '../project-areas/project-areas.component';\nimport { ScenarioResult } from '../../types';\nimport { parseResultsToProjectAreas } from '../plan-helpers';\nimport { ScenarioService } from '@services';\nimport { FileSaverService } from '@services/file-saver.service';\n\n@Component({\n  selector: 'app-scenario-results',\n  templateUrl: './scenario-results.component.html',\n  styleUrls: ['./scenario-results.component.scss'],\n})\nexport class ScenarioResultsComponent implements OnChanges {\n  @Input() scenarioId!: string;\n  @Input() scenarioName = 'scenario_results';\n  @Input() results: ScenarioResult | null = null;\n  @Input() scenarioChartData: any[] = [];\n  @Input() priorities: string[] = [];\n\n  areas: ProjectAreaReport[] = [];\n  data: any[] = [];\n  selectedCharts: any[] = [];\n\n  constructor(\n    private scenarioService: ScenarioService,\n    private fileServerService: FileSaverService\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    // parse ScenarioResult\n    if (this.results) {\n      this.areas = parseResultsToProjectAreas(this.results);\n      this.data = this.scenarioChartData;\n      this.selectedCharts = this.data.slice(0, 4);\n    }\n  }\n\n  downloadCsv() {\n    const filename = this.scenarioName + ' csv';\n    if (this.scenarioId) {\n      this.scenarioService\n        .downloadCsvData(this.scenarioId)\n        .subscribe((data) => {\n          const blob = new Blob([data], {\n            type: 'application/zip',\n          });\n          this.fileServerService.saveAs(blob, filename);\n        });\n    }\n  }\n\n  downloadShapeFiles() {\n    const filename = this.scenarioName + ' shapefiles';\n    if (this.scenarioId) {\n      this.scenarioService\n        .downloadShapeFiles(this.scenarioId)\n        .subscribe((data) => {\n          const blob = new Blob([data], {\n            type: 'application/zip',\n          });\n          this.fileServerService.saveAs(blob, filename);\n        });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".actions {\n  margin: 20px;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n}\n\n@media print {\n  .actions {\n    display: none;\n  }\n}\n",
                    "styleUrl": "./scenario-results.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fileServerService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileServerService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<app-project-areas [areas]=\"areas\"></app-project-areas>\n<app-project-areas-metrics\n  [data]=\"data\"\n  [priorities]=\"priorities\"\n  [selectedCharts]=\"selectedCharts\"></app-project-areas-metrics>\n\n<div class=\"actions\">\n  <button\n    mat-raised-button\n    (click)=\"downloadShapeFiles()\"\n    data-id=\"downloadShapeFiles\">\n    Download Shape Files\n  </button>\n\n  <button mat-raised-button (click)=\"downloadCsv()\" data-id=\"downloadCsv\">\n    Download CSV data\n  </button>\n</div>\n"
        },
        {
            "name": "ScenariosTableListComponent",
            "id": "component-ScenariosTableListComponent-3f5bed5f9ee6df4e5c32540955934fde5a873ae0309f92d4ecba87091315b6d460b10310fb8cb3ed27968a17a2ea265df76b5284376b2394d033ee2a701c00cb",
            "file": "src/app/plan/plan-summary/scenarios-table-list/scenarios-table-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenarios-table-list",
            "styleUrls": [
                "./scenarios-table-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenarios-table-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "highlightedScenarioRow",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "ScenarioRow | null",
                    "decorators": []
                },
                {
                    "name": "scenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "ScenarioRow[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectScenario",
                    "defaultValue": "new EventEmitter<ScenarioRow>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "viewScenario",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "this.featureService.isFeatureEnabled(\n    'show_share_modal'\n  )\n    ? [\n        'name',\n        'creator',\n        'projectAreas',\n        'acresTreated',\n        'estimatedCost',\n        'status',\n        'completedTimestamp',\n      ]\n    : [\n        'name',\n        'projectAreas',\n        'acresTreated',\n        'estimatedCost',\n        'status',\n        'completedTimestamp',\n      ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "statusLabels",
                    "defaultValue": "{\n    LOADING: 'Loading',\n    NOT_STARTED: 'Not Started',\n    PENDING: 'Running',\n    RUNNING: 'Running',\n    SUCCESS: 'Done',\n    FAILURE: 'Failed',\n    PANIC: 'Failed',\n    TIMED_OUT: 'Failed',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<ScenarioResultStatus | string>",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateTotals",
                    "args": [
                        {
                            "name": "results",
                            "type": "ScenarioResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "results",
                            "type": "ScenarioResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasResults",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "highlightScenario",
                    "args": [
                        {
                            "name": "row",
                            "type": "ScenarioRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "ScenarioRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ScenarioRow } from '../saved-scenarios/saved-scenarios.component';\nimport { Scenario, ScenarioResult, ScenarioResultStatus } from '../../../types';\nimport {\n  parseResultsToProjectAreas,\n  parseResultsToTotals,\n} from '../../plan-helpers';\nimport { FeatureService } from '../../../features/feature.service';\n\n@Component({\n  selector: 'app-scenarios-table-list',\n  templateUrl: './scenarios-table-list.component.html',\n  styleUrls: ['./scenarios-table-list.component.scss'],\n})\nexport class ScenariosTableListComponent {\n  @Input() scenarios: ScenarioRow[] = [];\n  @Input() highlightedScenarioRow: ScenarioRow | null = null;\n  @Output() viewScenario = new EventEmitter();\n  @Output() selectScenario = new EventEmitter<ScenarioRow>();\n  constructor(private featureService: FeatureService) {}\n\n  statusLabels: Record<ScenarioResultStatus, string> = {\n    LOADING: 'Loading',\n    NOT_STARTED: 'Not Started',\n    PENDING: 'Running',\n    RUNNING: 'Running',\n    SUCCESS: 'Done',\n    FAILURE: 'Failed',\n    PANIC: 'Failed',\n    TIMED_OUT: 'Failed',\n  };\n\n  displayedColumns: string[] = this.featureService.isFeatureEnabled(\n    'show_share_modal'\n  )\n    ? [\n        'name',\n        'creator',\n        'projectAreas',\n        'acresTreated',\n        'estimatedCost',\n        'status',\n        'completedTimestamp',\n      ]\n    : [\n        'name',\n        'projectAreas',\n        'acresTreated',\n        'estimatedCost',\n        'status',\n        'completedTimestamp',\n      ];\n\n  hasResults(scenario: Scenario) {\n    return (\n      !!scenario.scenario_result &&\n      scenario.scenario_result.result?.features?.length > 0\n    );\n  }\n\n  calculateTotals(results: ScenarioResult) {\n    const projectAreas = parseResultsToProjectAreas(results);\n    return parseResultsToTotals(projectAreas);\n  }\n\n  highlightScenario(row: ScenarioRow): void {\n    this.highlightedScenarioRow = row;\n    this.selectScenario.emit(row);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'sass:map';\n@use '@angular/material' as mat;\n@import \"../../../../styles/colors\";\n\n\n:host {\n  display: block;\n\n}\n\n.scenarios-table {\n  width: 100%;\n  text-align: center;\n\n  th:not(.mat-column-name) {\n    text-align: center;\n  }\n}\n\n.mat-column-name {\n  width: 30%;\n  text-align: left;\n}\n\n.highlight {\n\n  background-color: transparentize(\n    $color: $color-standard-blue,\n    $amount: 0.9\n  );\n\n  .mat-cell:first-of-type {\n    position: relative;\n\n    &::before {\n      position: absolute;\n      width: 4px;\n      height: calc(100% + 2px);\n      background-color: $color-standard-blue;\n      content: \"\";\n      left: 0;\n      top: -1px;\n    }\n  }\n}\n\n.scenario-row {\n  cursor: pointer;\n\n  &:hover {\n    background-color: transparentize(\n      $color: $color-standard-blue,\n      $amount: 0.9\n    );\n  }\n}\n",
                    "styleUrl": "./scenarios-table-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "featureService",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "featureService",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<table mat-table [dataSource]=\"scenarios\" class=\"scenarios-table\">\n  <!-- Name Column -->\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef>Name</th>\n    <td\n      mat-cell\n      class=\"name-column\"\n      *matCellDef=\"let element; dataSource: scenarios\">\n      {{ element.name }}\n    </td>\n  </ng-container>\n\n  <!-- Creator Column -->\n  <ng-container matColumnDef=\"creator\">\n    <th mat-header-cell *matHeaderCellDef>Creator</th>\n    <td\n      mat-cell\n      class=\"name-column\"\n      *matCellDef=\"let element; dataSource: scenarios\">\n      {{ element.creator }}\n    </td>\n  </ng-container>\n\n  <!-- Project Areas Column -->\n  <ng-container matColumnDef=\"projectAreas\">\n    <th mat-header-cell *matHeaderCellDef>Areas</th>\n    <td mat-cell *matCellDef=\"let element; dataSource: scenarios\">\n      {{ element?.scenario_result?.result?.features?.length || '--' }}\n    </td>\n  </ng-container>\n\n  <!-- Acres Treated Column -->\n  <ng-container matColumnDef=\"acresTreated\">\n    <th mat-header-cell *matHeaderCellDef>Acres</th>\n    <td mat-cell *matCellDef=\"let element; dataSource: scenarios\">\n      {{\n        hasResults(element)\n          ? (calculateTotals(element.scenario_result!).acres | number: '1.0-0')\n          : '--'\n      }}\n    </td>\n  </ng-container>\n\n  <!-- Estimated Cost Column -->\n  <ng-container matColumnDef=\"estimatedCost\">\n    <th mat-header-cell *matHeaderCellDef>Est. Budget</th>\n    <td\n      mat-cell\n      class=\"data-cell\"\n      *matCellDef=\"let element; dataSource: scenarios\">\n      {{\n        hasResults(element)\n          ? (calculateTotals(element.scenario_result!).estimatedCost\n            | currencyInK: '1.0-0')\n          : '--'\n      }}\n    </td>\n  </ng-container>\n\n  <!-- Status Column -->\n  <ng-container matColumnDef=\"status\">\n    <th mat-header-cell *matHeaderCellDef>Status</th>\n    <td mat-cell *matCellDef=\"let element; dataSource: scenarios\">\n      {{\n        element.scenario_result\n          ? statusLabels[element.scenario_result.status]\n          : '--'\n      }}\n    </td>\n  </ng-container>\n\n  <!-- Timestamp Column -->\n  <ng-container matColumnDef=\"completedTimestamp\">\n    <th mat-header-cell *matHeaderCellDef>Completed</th>\n    <td mat-cell *matCellDef=\"let element; dataSource: scenarios\">\n      {{\n        element.scenario_result?.completed_at\n          ? (element.scenario_result?.completed_at | date: 'short')\n          : '--'\n      }}\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr\n    mat-row\n    [ngClass]=\"{\n      'scenario-row': highlightedScenarioRow?.id !== row.id,\n      highlight: highlightedScenarioRow?.id === row.id\n    }\"\n    *matRowDef=\"let row; columns: displayedColumns\"\n    (click)=\"highlightScenario(row)\"\n    (dblclick)=\"viewScenario.emit()\"></tr>\n</table>\n"
        },
        {
            "name": "ScenarioTooltipComponent",
            "id": "component-ScenarioTooltipComponent-7649064be5420db7f783146a73614bb69329b62b635846d1d32df5ecd25a3016b00518722817482d3db127f2663559961cd9a121216e41927bd64c056bc2f369",
            "file": "src/app/plan/create-scenarios/tooltips/scenario-tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-tooltip",
            "styleUrls": [
                "./scenario-tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-tooltip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "area",
                    "defaultValue": "'TREATMENT_GOALS'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"TREATMENT_GOALS\" | \"CONSTRAINTS\" | \"EXCLUDE_AREAS\"",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-scenario-tooltip',\n  templateUrl: './scenario-tooltip.component.html',\n  styleUrls: ['./scenario-tooltip.component.scss'],\n})\nexport class ScenarioTooltipComponent {\n  @Input() title = '';\n  @Input() area: 'TREATMENT_GOALS' | 'CONSTRAINTS' | 'EXCLUDE_AREAS' =\n    'TREATMENT_GOALS';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.tooltip {\n padding: 20px;\n}\n\n.title {\n  font-size: 15px;\n  font-weight: 500;\n}\n",
                    "styleUrl": "./scenario-tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"title\">{{ title }}</div>\n<button mat-icon-button class=\"help\" [matMenuTriggerFor]=\"tooltipMenu\">\n  <mat-icon class=\"material-symbols-outlined\" color=\"primary\">\n    info_outline\n  </mat-icon>\n  <mat-menu #tooltipMenu=\"matMenu\">\n    <div [ngSwitch]=\"area\" class=\"tooltip\">\n      <div *ngSwitchCase=\"'TREATMENT_GOALS'\">\n        <p>\n          Treatment goals allow you to select one goal that will generate a\n          scenario based on your landscape. Each of the goals uses a different\n          set of input variables, thresholds and primary metrics to generate\n          your result. You can only select one goal per run, however you can do\n          as many scenario runs as you choose by selecting different treatment\n          goal questions and parameters each time. Hover over the options below\n          for full question details.\n        </p>\n      </div>\n      <div *ngSwitchCase=\"'CONSTRAINTS'\">\n        <p>\n          Constraints are variables that you can apply to your planning\n          scenario. You can choose either the maximum area to be treated OR cost\n          per acre. You can also put in your maximum total cost/budget. The\n          default cost/acre is $2470 per RRK data.\n        </p>\n      </div>\n      <div *ngSwitchCase=\"'EXCLUDE_AREAS'\">\n        <p>\n          Exclude areas are types of land that you can choose to exclude from\n          your planning scenarios. If you choose to exclude these areas, project\n          areas will not be assigned on these lands.\n        </p>\n      </div>\n    </div>\n  </mat-menu>\n</button>\n"
        },
        {
            "name": "SectionLoaderComponent",
            "id": "component-SectionLoaderComponent-ff2d528aa469da211fd719a15b1538cf6bb190dc389de61a33a685352caea0d8c92a69fbb960ac374ed3e0b1b3bec2d809309dbf3cb53b47ca81dd29c8666135",
            "file": "src/app/shared/section-loader/section-loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-section-loader",
            "styleUrls": [
                "./section-loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./section-loader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "emptyStateContent",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyStateTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMsg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasData",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-section-loader',\n  templateUrl: './section-loader.component.html',\n  styleUrls: ['./section-loader.component.scss'],\n})\nexport class SectionLoaderComponent {\n  @Input() isLoading = false;\n  @Input() hasData = false;\n  @Input() emptyStateTitle = '';\n  @Input() emptyStateContent = '';\n  @Input() hasError? = false;\n  @Input() errorMsg?: string;\n  @Input() errorTitle?: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/mixins\";\n@import \"../../../styles/colors\";\n\n:host {\n  display: block;\n  height: 100%;\n  position: relative;\n}\n\n.spinner, .empty-state {\n  align-items: center;\n  justify-content: flex-end;\n  display: flex;\n  flex-direction: column;\n  height: 50%;\n  text-align: center;\n}\n\n.spinner {\n  margin: auto;\n  padding-top: 20px;\n}\n\n\n.empty-state {\n\n  h4 {\n    @include standard-input-label();\n    margin: 0 0 8px;\n    color: $color-black;\n\n  }\n\n  p {\n    color: $color-md-gray;\n    margin: 0;\n    max-width: 560px;\n  }\n}\n\n",
                    "styleUrl": "./section-loader.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div *ngIf=\"isLoading; else loaded\" class=\"spinner\">\n  <mat-spinner diameter=\"40\"></mat-spinner>\n</div>\n\n<ng-template #loaded>\n  <ng-container *ngIf=\"hasData; else noData\">\n    <ng-content></ng-content>\n  </ng-container>\n\n  <ng-template #noData>\n    <div class=\"empty-state\" *ngIf=\"!hasError\">\n      <h4>{{ emptyStateTitle }}</h4>\n      <p>{{ emptyStateContent }}</p>\n    </div>\n    <div class=\"empty-state\" *ngIf=\"hasError\">\n      <h4>{{ errorTitle }}</h4>\n      <p>{{ errorMsg }}</p>\n    </div>\n  </ng-template>\n</ng-template>\n"
        },
        {
            "name": "SetPrioritiesComponent",
            "id": "component-SetPrioritiesComponent-00588c79bd8cdfe587b7c523b5dfefefdfea379b442ecef85938745ac559cd4bbc5f7006e691ececf4fbe1919c2c2a6a1788637cd8cfffcfb18d7dd52bccb2b2",
            "file": "src/app/plan/create-scenarios/set-priorities/set-priorities.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-set-priorities",
            "styleUrls": [
                "./set-priorities.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./set-priorities.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_treatmentGoals",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreatmentGoalConfig[] | null",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "datasource",
                    "defaultValue": "new MatTableDataSource<PriorityRow>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "goalsForm",
                    "defaultValue": "this.fb.group({\n    selectedQuestion: <TreatmentQuestionConfig>[null, Validators.required],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "treatmentGoals$",
                    "defaultValue": "this.planStateService.treatmentGoalsConfig$.pipe(\n    distinctUntilChanged(),\n    tap((s) => {\n      this._treatmentGoals = s;\n      // if we got new treatment goals we'll need to find the item again and set it as selected\n      const value = this.goalsForm.get('selectedQuestion')?.value;\n      if (value) {\n        this.setFormData(value);\n      }\n    })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFormData",
                    "args": [],
                    "optional": false,
                    "returnType": "Pick<ScenarioConfig, treatment_question>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectGoal",
                    "args": [
                        {
                            "name": "goal",
                            "type": "TreatmentQuestionConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "goal",
                            "type": "TreatmentQuestionConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormData",
                    "args": [
                        {
                            "name": "question",
                            "type": "TreatmentQuestionConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "question",
                            "type": "TreatmentQuestionConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatLegacyTableDataSource as MatTableDataSource } from '@angular/material/legacy-table';\nimport { distinctUntilChanged, take, tap } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { MapService, PlanStateService } from '@services';\nimport {\n  PriorityRow,\n  ScenarioConfig,\n  TreatmentGoalConfig,\n  TreatmentQuestionConfig,\n} from '../../../types';\nimport {\n  conditionsConfigToPriorityData,\n  findQuestionOnTreatmentGoalsConfig,\n} from '../../plan-helpers';\nimport { GoalOverlayService } from '../goal-overlay/goal-overlay.service';\n\n@Component({\n  selector: 'app-set-priorities',\n  templateUrl: './set-priorities.component.html',\n  styleUrls: ['./set-priorities.component.scss'],\n})\nexport class SetPrioritiesComponent implements OnInit {\n  private _treatmentGoals: TreatmentGoalConfig[] | null = [];\n  treatmentGoals$ = this.planStateService.treatmentGoalsConfig$.pipe(\n    distinctUntilChanged(),\n    tap((s) => {\n      this._treatmentGoals = s;\n      // if we got new treatment goals we'll need to find the item again and set it as selected\n      const value = this.goalsForm.get('selectedQuestion')?.value;\n      if (value) {\n        this.setFormData(value);\n      }\n    })\n  );\n\n  goalsForm = this.fb.group({\n    selectedQuestion: <TreatmentQuestionConfig>[null, Validators.required],\n  });\n\n  datasource = new MatTableDataSource<PriorityRow>();\n\n  constructor(\n    private mapService: MapService,\n    private fb: FormBuilder,\n    private planStateService: PlanStateService,\n    private goalOverlayService: GoalOverlayService\n  ) {}\n\n  createForm() {\n    this.goalsForm = this.fb.group({\n      selectedQuestion: <TreatmentQuestionConfig>[null, Validators.required],\n    });\n    return this.goalsForm;\n  }\n\n  ngOnInit(): void {\n    this.mapService.conditionsConfig$\n      .pipe(\n        filter((result) => !!result),\n        take(1)\n      )\n      .subscribe((conditionsConfig) => {\n        this.datasource.data = conditionsConfigToPriorityData(\n          conditionsConfig!\n        );\n      });\n  }\n\n  getFormData(): Pick<ScenarioConfig, 'treatment_question'> {\n    const selectedQuestion = this.goalsForm.get('selectedQuestion');\n    if (selectedQuestion?.valid) {\n      return { treatment_question: selectedQuestion.value };\n    } else {\n      return {};\n    }\n  }\n\n  setFormData(question: TreatmentQuestionConfig) {\n    if (this._treatmentGoals) {\n      // We are losing the object reference somewhere (probably on this.planStateService.treatmentGoalsConfig$)\n      // so when we simply `setValue` with `this.selectedTreatmentQuestion`, the object is\n      // not part of the provided treatmentGoalsConfig$.\n      // The workaround is to look for it, however we should look into the underlying issue\n      let selectedQuestion = findQuestionOnTreatmentGoalsConfig(\n        this._treatmentGoals,\n        question\n      );\n      if (selectedQuestion) {\n        this.goalsForm.get('selectedQuestion')?.setValue(selectedQuestion);\n      }\n      this.goalsForm.disable();\n    }\n  }\n\n  selectGoal(goal: TreatmentQuestionConfig) {\n    if (this.goalsForm.enabled) {\n      this.goalOverlayService.setQuestion(goal);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".panel-container {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  height: 100%;\n  width: 100%;\n}\n\n.flex-row {\n  display: flex;\n  gap: 12px;\n}\n\nh4 {\n  font-size: 15px;\n  font-weight: 500;\n  line-height: 20px;\n}\n\n.mat-radio-group {\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  margin-left: 44px;\n}\n\n:host {\n  ::ng-deep .mat-radio-label {\n    padding-left: 20px;\n  }\n\n  ::ng-deep .mat-radio-label-content {\n    white-space: normal !important;\n  }\n\n  ::ng-deep {\n    .long-question-tooltip.mat-tooltip {\n      border: 1px solid #979797;\n      border-radius: 11px;\n      background-color: #e6e9f4;\n      color: black;\n      font-size: 14px;\n      padding: 8px;\n    }\n  }\n}\n\n\n.legend-wrapper {\n  flex: 2 0 224px;\n}\n\n.config-group {\n  border: 1px #a4aae0 solid;\n  border-radius: 10px;\n  display: inline-block;\n  margin-top: 10px;\n  height: auto;\n  width: 100%;\n  box-shadow: 0px 3px 0px 0px #aeb0b8;\n  background-color: white;\n  box-sizing: border-box;\n}\n\n.goal-radio-group {\n  align-items: flex-start;\n  display: flex;\n  flex-direction: column;\n  margin: 15px 0;\n  width: auto;\n}\n\n.goal-single-radio-button {\n  margin: 15px 0;\n}\n\n.goal-control-container {\n  display: flex;\n  flex-direction: row;\n  width: auto;\n  margin: 5px;\n  background: white;\n}\n\n.goal-panel-header {\n  font-size: 14px;\n  height: 40px !important;\n  line-height: 20px;\n  margin-top: 2px;\n}\n\n.mat-expansion-panel:not([class*='mat-elevation-z']) {\n  box-shadow: none;\n}\n\n.mat-radio-group {\n  gap: 1px;\n  margin-left: 10px;\n}\n\n.legend-title-wrapper {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  margin-bottom: 12px;\n}\n\nh5 {\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 15px;\n  margin: 0px;\n  text-align: center;\n}\n\n.legend-info {\n  padding: 24px 48px 24px 16px;\n}\n\n.legend-info-labels {\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 24px;\n}\n\n.legend-info-scores {\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 24px;\n}\n\n.secondary-text {\n  font-size: 13px;\n  font-weight: 400;\n  line-height: 20px;\n  opacity: 0.66;\n}\n\n.priority-table {\n  overflow-y: auto;\n}\n\n.mat-header-cell {\n  color: black;\n  font-size: 13px;\n  font-weight: 400;\n  line-height: 20px;\n  opacity: 0.5;\n}\n\n.mat-column-selected {\n  display: flex;\n  flex: 0 0 auto;\n  justify-content: center;\n  padding-right: 24px;\n  width: 36px;\n}\n\n.mat-column-visible {\n  flex: 0 0 auto;\n  width: 48px;\n}\n\n.mat-column-displayName {\n  box-sizing: border-box;\n  flex: 2 0 auto;\n  padding-right: 24px;\n  width: 224px;\n\n  &.mat-cell {\n    font-size: 15px;\n    line-height: 20px;\n\n    &.level-0 {\n      font-weight: 500;\n    }\n  }\n}\n\n.mat-column-score {\n  flex: 0 0 auto;\n  padding-right: 24px;\n  width: 120px;\n\n  &.mat-cell {\n    font-size: 15px;\n    font-weight: 500;\n    line-height: 20px;\n  }\n}\n\n.indent-level-1 {\n  flex: 0 0 auto;\n  width: 10px;\n}\n\n.indent-level-2 {\n  flex: 0 0 auto;\n  width: 44px;\n}\n\n.hide-row {\n  display: none;\n}\n\n/** Always show scrollbar. */\n::-webkit-scrollbar {\n  -webkit-appearance: none;\n  height: 0px;\n  width: 7px;\n}\n\n::-webkit-scrollbar-thumb {\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, 0.5);\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 4px;\n}\n\n.score {\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 16px;\n}\n\n.expand-button {\n  height: 24px;\n  line-height: 24px;\n  width: 24px;\n}\n\n.grey-icon {\n  color: #8e918f;\n}\n\n\n\n\n",
                    "styleUrl": "./set-priorities.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "goalOverlayService",
                        "type": "GoalOverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "goalOverlayService",
                        "type": "GoalOverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"panel-container\">\n  <form [formGroup]=\"goalsForm!\">\n    <div class=\"config-group\">\n      <mat-radio-group\n        name=\"treatmentGoalSelect\"\n        aria-label=\"Select an option\"\n        class=\"layer-radio-group\"\n        color=\"primary\"\n        formControlName=\"selectedQuestion\">\n        <app-scenario-tooltip\n          area=\"TREATMENT_GOALS\"\n          title=\"TREATMENT GOALS\"></app-scenario-tooltip>\n        <div\n          *ngFor=\"let treatmentGoal of treatmentGoals$ | async\"\n          class=\"goal-control-container\">\n          <mat-expansion-panel expanded=\"true\" [togglePosition]=\"'before'\">\n            <mat-expansion-panel-header class=\"goal-panel-header\">\n              {{ treatmentGoal['category_name'] }}\n            </mat-expansion-panel-header>\n            <div\n              *ngFor=\"let treatmentQuestion of treatmentGoal['questions']\"\n              class=\"layer-control-container\">\n              <mat-radio-button\n                [value]=\"treatmentQuestion\"\n                (click)=\"selectGoal(treatmentQuestion)\">\n                {{ treatmentQuestion.short_question_text }}\n              </mat-radio-button>\n            </div>\n          </mat-expansion-panel>\n        </div>\n      </mat-radio-group>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "ShareExploreDialogComponent",
            "id": "component-ShareExploreDialogComponent-9397b1bb528a7a98ae4587a684a0fe7b05a75412c943a31d2ac166549c5bf922b788690ad2b240b34472976e046ee6b62b561be701b89166f6ff8504a7f72c10",
            "file": "src/app/shared/share-explore-dialog/share-explore-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-share-explore-dialog",
            "styleUrls": [
                "./share-explore-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./share-explore-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "link",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selectedRegion$",
                    "defaultValue": "this.sessionService.region$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "copy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "selectText",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MatLegacyDialogRef as MatDialogRef } from '@angular/material/legacy-dialog';\nimport { SessionService } from '@services';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { SNACK_ERROR_CONFIG, SNACK_NOTICE_CONFIG } from '../constants';\nimport { firstValueFrom } from 'rxjs';\nimport { ShareMapService } from '@services/share-map.service';\n\n@Component({\n  selector: 'app-share-explore-dialog',\n  templateUrl: './share-explore-dialog.component.html',\n  styleUrls: ['./share-explore-dialog.component.scss'],\n})\nexport class ShareExploreDialogComponent implements OnInit {\n  link: string | null = null;\n  error = false;\n  selectedRegion$ = this.sessionService.region$.asObservable();\n\n  constructor(\n    private dialogRef: MatDialogRef<ShareExploreDialogComponent>,\n    private sessionService: SessionService,\n    private shareMapService: ShareMapService,\n    private matSnackBar: MatSnackBar\n  ) {}\n\n  async submit() {\n    this.matSnackBar.open(\n      '[Error] Unable to create plan due to backend error.',\n      'Dismiss',\n      SNACK_ERROR_CONFIG\n    );\n  }\n\n  //TODO add cancel button\n  cancel(): void {\n    this.dialogRef.close();\n  }\n\n  async ngOnInit() {\n    const mapViewOptions = await firstValueFrom(\n      this.sessionService.mapViewOptions$\n    );\n\n    const mapConfigs = await firstValueFrom(this.sessionService.mapConfigs$);\n    const region = await firstValueFrom(this.selectedRegion$);\n    if (mapConfigs && region) {\n      const mapConfig = mapConfigs[region];\n      const data = { mapViewOptions, mapConfig, region };\n      this.shareMapService.getSharedLink(data).subscribe((linkUrl) => {\n        this.link = linkUrl;\n      });\n    }\n  }\n\n  selectText(event: Event) {\n    const target = event.target as HTMLInputElement;\n    target.select();\n  }\n\n  copy() {\n    navigator.clipboard.writeText(this.link || '');\n    this.matSnackBar.open('Link copied ', 'Dismiss', SNACK_NOTICE_CONFIG);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/colors\";\n\n:host {\n  display: block;\n  min-width: 480px;\n  position: relative;\n}\n\nsection {\n  display: flex;\n  align-items: baseline;\n  gap: 10px;\n  position: relative;\n  background-color: $color-light-gray;\n  padding: 8px;\n  border-radius: 3px;\n}\n\n\n.info {\n  align-items: center;\n  display: flex;\n  gap: 10px;\n  font-size: 13px;\n  font-weight: 400;\n  line-height: 15px;\n  padding: 10px 0;\n}\n\n\n.link-textfield {\n  flex: 1;\n  user-select: all;\n  cursor: pointer;\n  padding: 7px 0;\n  color: $color-text-dark;\n  background: none;\n  border: none;\n}\n\n.loader {\n  position: absolute;\n  top: 13px;\n}\n\n.close-btn {\n  position: absolute;\n  top: 0;\n  right: 0;\n  cursor: pointer;\n}\n",
                    "styleUrl": "./share-explore-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ShareExploreDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "shareMapService",
                        "type": "ShareMapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ShareExploreDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shareMapService",
                        "type": "ShareMapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-icon class=\"close-btn\" (click)=\"cancel()\">close</mat-icon>\n<h3 mat-dialog-title>Share link</h3>\n<section>\n  <input\n    class=\"link-textfield\"\n    readonly\n    [value]=\"link\"\n    (click)=\"selectText($event)\"\n    [disabled]=\"!link\" />\n\n  <mat-spinner diameter=\"24\" *ngIf=\"!link\" class=\"loader\"></mat-spinner>\n  <mat-error *ngIf=\"error\"> There was an error generating the link.</mat-error>\n\n  <button\n    mat-flat-button\n    type=\"button\"\n    color=\"primary\"\n    data-id=\"copy\"\n    (click)=\"copy()\"\n    [disabled]=\"!link\">\n    COPY LINK\n  </button>\n</section>\n\n<div class=\"info\">\n  <mat-icon>info</mat-icon>\n  <span>Link is valid for 60 days.</span>\n</div>\n"
        },
        {
            "name": "SharePlanDialogComponent",
            "id": "component-SharePlanDialogComponent-81392b1d612a1c7fe7092cad47817174173209fe64f0b738aa048be0ea76cb5788e3e27659658cb6ece3258a52bd40441993626dc4c537a9a0092fa2a6893c88",
            "file": "src/app/home/share-plan-dialog/share-plan-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-share-plan-dialog",
            "styleUrls": [
                "./share-plan-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./share-plan-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "emails",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "errorType",
                    "defaultValue": "FormMessageType.ERROR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "fullname$",
                    "defaultValue": "this.authService.loggedInUser$.pipe(\n    filter((user): user is User => !!user),\n    map((user) => [user.firstName, user.lastName].join(' '))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "invalidEmail",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "invites$",
                    "defaultValue": "this.inviteService\n    .getInvites(this.data.planningAreaId)\n    .pipe(tap((_) => (this.isLoading = false)))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "plan$",
                    "defaultValue": "this.planStateService\n    .getPlan(this.data.planningAreaId + '')\n    .pipe(shareReplay())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "planCreator$",
                    "defaultValue": "this.plan$.pipe(map((plan) => plan.creator))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "roles",
                    "defaultValue": "Object.keys(Roles) as INVITE_ROLE[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INVITE_ROLE[]",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "selectedRole",
                    "defaultValue": "this.roles[0] as INVITE_ROLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "showCreator$",
                    "defaultValue": "this.authService.loggedInUser$.pipe(\n    filter((user): user is User => !!user),\n    switchMap((user) =>\n      this.plan$.pipe(\n        map((plan) => {\n          return user.id != plan.user;\n        })\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "showHelp",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "submitting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "addEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeInvitationsRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "INVITE_ROLE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "INVITE_ROLE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeRole",
                    "args": [
                        {
                            "name": "invite",
                            "type": "Invite",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newRole",
                            "type": "INVITE_ROLE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "invite",
                            "type": "Invite",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newRole",
                            "type": "INVITE_ROLE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "invite",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reloadInvites",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAccess",
                    "args": [
                        {
                            "name": "invite",
                            "type": "Invite",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "invite",
                            "type": "Invite",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resendCode",
                    "args": [
                        {
                            "name": "invite",
                            "type": "Invite",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "invite",
                            "type": "Invite",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSnackbar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport {\n  MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA,\n  MatLegacyDialogRef as MatDialogRef,\n} from '@angular/material/legacy-dialog';\nimport { FormMessageType, User } from '../../types';\nimport { SNACK_BOTTOM_NOTICE_CONFIG } from '../../shared/constants';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { AuthService, InvitesService, PlanStateService } from '@services';\nimport { Invite, INVITE_ROLE } from '../../types/invite.types';\nimport { filter, map, shareReplay, switchMap, tap } from 'rxjs';\n\nconst Roles: Record<INVITE_ROLE, INVITE_ROLE> = {\n  Viewer: 'Viewer',\n  Collaborator: 'Collaborator',\n  Owner: 'Owner',\n};\n\n@Component({\n  selector: 'app-share-plan-dialog',\n  templateUrl: './share-plan-dialog.component.html',\n  styleUrls: ['./share-plan-dialog.component.scss'],\n})\nexport class SharePlanDialogComponent {\n  constructor(\n    private matSnackBar: MatSnackBar,\n    private dialogRef: MatDialogRef<SharePlanDialogComponent>,\n    private inviteService: InvitesService,\n    private authService: AuthService,\n    private planStateService: PlanStateService,\n    @Inject(MAT_DIALOG_DATA)\n    public data: {\n      planningAreaName: string;\n      planningAreaId: number;\n    }\n  ) {}\n\n  emails: string[] = [];\n  errorType = FormMessageType.ERROR;\n  invalidEmail = false;\n  showHelp = false;\n  submitting = false;\n  message = '';\n  isLoading = true;\n\n  plan$ = this.planStateService\n    .getPlan(this.data.planningAreaId + '')\n    .pipe(shareReplay());\n\n  planCreator$ = this.plan$.pipe(map((plan) => plan.creator));\n\n  invites$ = this.inviteService\n    .getInvites(this.data.planningAreaId)\n    .pipe(tap((_) => (this.isLoading = false)));\n\n  fullname$ = this.authService.loggedInUser$.pipe(\n    filter((user): user is User => !!user),\n    map((user) => [user.firstName, user.lastName].join(' '))\n  );\n\n  showCreator$ = this.authService.loggedInUser$.pipe(\n    filter((user): user is User => !!user),\n    switchMap((user) =>\n      this.plan$.pipe(\n        map((plan) => {\n          return user.id != plan.user;\n        })\n      )\n    )\n  );\n\n  roles: INVITE_ROLE[] = Object.keys(Roles) as INVITE_ROLE[];\n\n  selectedRole = this.roles[0] as INVITE_ROLE;\n\n  addEmail(email: string): void {\n    this.emails.push(email);\n  }\n\n  removeEmail(email: string): void {\n    const index = this.emails.indexOf(email);\n\n    if (index >= 0) {\n      this.emails.splice(index, 1);\n    }\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  invite() {\n    this.submitting = true;\n    this.inviteService\n      .inviteUsers(\n        this.emails,\n        this.selectedRole,\n        this.data.planningAreaId,\n        this.message\n      )\n      .subscribe({\n        next: (result) => {\n          this.showSnackbar('Users invited');\n          this.close();\n        },\n        error: () => {\n          this.showSnackbar(\n            'There was an error trying to send the invites. Please try again.'\n          );\n          this.submitting = false;\n        },\n      });\n  }\n\n  get showMessageBox() {\n    return this.invalidEmail || this.emails.length > 0;\n  }\n\n  startOver() {\n    this.invalidEmail = false;\n    this.emails = [];\n  }\n\n  changeRole(invite: Invite, newRole: INVITE_ROLE) {\n    this.inviteService.changeRole(invite.id, newRole).subscribe({\n      next: () => {\n        invite.role = newRole;\n        this.showSnackbar('Access Updated');\n      },\n      error: () => {\n        this.showSnackbar(\n          `There was an error trying to update the role of ${invite.email}. Please try again.`\n        );\n      },\n    });\n  }\n\n  changeInvitationsRole(role: INVITE_ROLE) {\n    this.selectedRole = Roles[role];\n  }\n\n  resendCode(invite: Invite) {\n    this.inviteService\n      .inviteUsers([invite.email], this.selectedRole, this.data.planningAreaId)\n      .subscribe({\n        next: (result) => {\n          this.showSnackbar(`Email sent to ${invite.email}`);\n        },\n        error: () => {\n          this.showSnackbar(\n            `There was an error trying to resend code to ${invite.email}. Please try again.`\n          );\n        },\n      });\n  }\n\n  reloadInvites() {\n    this.invites$ = this.inviteService\n      .getInvites(this.data.planningAreaId)\n      .pipe(tap((_) => (this.isLoading = false)));\n  }\n\n  removeAccess(invite: Invite) {\n    this.inviteService.deleteInvite(invite.id).subscribe({\n      next: () => {\n        this.showSnackbar(`Removed  ${invite.email}`);\n        this.reloadInvites();\n      },\n      error: () => {\n        this.showSnackbar(\n          `There was an error trying to revoke access for ${invite.email}. Please try again.`\n        );\n      },\n    });\n  }\n\n  private showSnackbar(message: string) {\n    this.matSnackBar.open(message, 'Dismiss', SNACK_BOTTOM_NOTICE_CONFIG);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/mixins\";\n@import \"../../../styles/colors\";\n\n:host {\n  display: block;\n  width: 530px;\n}\n\n.main {\n  // material overrides\n  ::ng-deep {\n    .mat-form-field-infix {\n      border-top-width: 0;\n    }\n\n    .mat-form-field-appearance-outline .mat-form-field-wrapper {\n      padding: 0;\n    }\n\n    .mat-button-wrapper {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n\n  }\n\n  ::ng-deep .message-box {\n    margin: 16px;\n  }\n\n\n}\n\n.invitations-form {\n  display: grid;\n  grid-template-columns: 1fr 142px;\n  align-items: flex-start;\n  gap: 16px 12px;\n  margin: 16px;\n\n  position: relative;\n\n  &::after {\n    content: \"\";\n    display: block;\n    left: 0;\n    border-bottom: 1px solid $color-soft-gray;\n    position: absolute;\n    right: 0;\n    bottom: -16px;\n  }\n}\n\n.invite-message {\n  grid-column: 1/3;\n\n  textarea {\n    resize: none;\n  }\n\n  ::ng-deep {\n    .mat-form-field-outline-start,\n    .mat-form-field-outline-end {\n      background-color: $color-light-gray;\n    }\n\n    .mat-form-field-flex {\n      height: 100px;\n    }\n  }\n}\n\n\n.header {\n  display: flex;\n  align-items: center;\n  padding: 16px;\n  border-bottom: 1px solid $color-soft-gray;\n\n  h2 {\n    @include top-level-label();\n    margin: 0 auto 0 0;\n  }\n\n  button + h2 {\n    margin-left: 8px;\n  }\n\n  button {\n    background: none;\n    border: none;\n    padding: 0;\n    margin: 0;\n    line-height: 0;\n    cursor: pointer;\n    height: auto;\n    width: auto;\n  }\n\n  button + button {\n    margin-left: 8px;\n  }\n}\n\n.invite-role {\n  @include small-input-label();\n  border: 1px solid $color-dark-gray;\n  line-height: 38px;\n}\n\n.invited-users-list {\n  padding: 16px;\n  color: $color-black;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  max-height: 300px; // TODO confirm value\n  overflow-y: scroll;\n\n\n  h3 {\n    @include small-input-label();\n    margin: 0;\n    color: $color-dark-gray;\n  }\n\n  ::ng-deep.mat-button {\n    padding: 0 0 0 8px;\n    line-height: 0;\n  }\n\n\n}\n\n.menu-divider {\n  border-top: 1px solid $color-fields-gray;\n}\n\n.footer {\n  border-top: 1px solid $color-soft-gray;\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  gap: 16px;\n}\n\n\n.invited-user {\n  @include small-input-label();\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  button {\n    line-height: 24px;\n  }\n\n  .name {\n    color: $color-black;\n  }\n\n  span {\n    color: $color-text-gray;\n  }\n\n  ::ng-deep .mat-menu-trigger .mat-button-wrapper {\n    vertical-align: middle;\n  }\n\n  .non-editable {\n    color: $color-text-gray;\n  }\n\n}\n\n.help {\n  color: $color-black;\n\n  h4 {\n    @include small-input-label();\n    font-weight: 600;\n    margin: 24px 0 0;\n  }\n\n  p {\n    margin: 0 0 8px;\n  }\n}\n\n.help-content {\n  margin: 24px 16px;\n}\n\n\n.menu-roles {\n  .mat-icon {\n    margin: 0;\n  }\n\n  .spacer {\n    display: inline-block;\n    width: 32px;\n  }\n}\n\n// the menu is on the cdk overlay layer, so we need to go outside this component\n// and look for the class used on the menu\n::ng-deep .list-menu .mat-menu-content {\n  padding: 0;\n}\n\n.loading {\n  padding-bottom: 20px;\n}\n",
                    "styleUrl": "./share-plan-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SharePlanDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "inviteService",
                        "type": "InvitesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SharePlanDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inviteService",
                        "type": "InvitesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "planStateService",
                        "type": "PlanStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "showMessageBox": {
                    "name": "showMessageBox",
                    "getSignature": {
                        "name": "showMessageBox",
                        "type": "",
                        "returnType": "",
                        "line": 115
                    }
                }
            },
            "templateData": "<div class=\"main\" *ngIf=\"!showHelp\">\n  <section class=\"header\">\n    <button\n      mat-icon-button\n      (click)=\"startOver()\"\n      aria-label=\"back\"\n      *ngIf=\"showMessageBox\">\n      <mat-icon class=\"back-btn\" (click)=\"showHelp = false\"\n        >arrow_back\n      </mat-icon>\n    </button>\n    <h2>Share {{ data.planningAreaName }}</h2>\n    <button mat-icon-button (click)=\"showHelp = true\" aria-label=\"help\">\n      <mat-icon class=\"help-btn\">help_outlined</mat-icon>\n    </button>\n    <button mat-icon-button (click)=\"close()\" aria-label=\"close\">\n      <mat-icon class=\"close-btn\">close</mat-icon>\n    </button>\n  </section>\n\n  <app-form-message\n    [messageType]=\"errorType\"\n    *ngIf=\"invalidEmail\"\n    title=\"Invalid email\"\n    message=\"An email must contain a single @\">\n  </app-form-message>\n\n  <form class=\"invitations-form\">\n    <app-chip-input\n      [emails]=\"emails\"\n      [placeholder]=\"showMessageBox ? '' : 'enter email'\"\n      (addEmail)=\"addEmail($event)\"\n      (removeEmail)=\"removeEmail($event)\"\n      (isInvalid)=\"invalidEmail = $event\"></app-chip-input>\n\n    <button mat-button [matMenuTriggerFor]=\"roleMenu\" class=\"invite-role\">\n      {{ selectedRole }}\n      <mat-icon>arrow_drop_down</mat-icon>\n    </button>\n    <mat-menu\n      #roleMenu=\"matMenu\"\n      class=\"list-menu list-input\"\n      xPosition=\"before\">\n      <button\n        mat-menu-item\n        *ngFor=\"let role of roles\"\n        class=\"menu-roles\"\n        (click)=\"changeInvitationsRole(role)\">\n        <span class=\"spacer\">\n          <mat-icon *ngIf=\"role === selectedRole\">check_small</mat-icon>\n        </span>\n        {{ role }}\n      </button>\n    </mat-menu>\n\n    <mat-form-field\n      appearance=\"outline\"\n      class=\"invite-message\"\n      *ngIf=\"showMessageBox\">\n      <textarea\n        matInput\n        placeholder=\"Message\"\n        [(ngModel)]=\"message\"\n        name=\"questionText\"></textarea>\n    </mat-form-field>\n  </form>\n  <app-section-loader\n    [isLoading]=\"isLoading\"\n    [hasData]=\"true\"\n    [ngClass]=\"{ loading: isLoading }\">\n    <section class=\"invited-users-list\" *ngIf=\"!showMessageBox\">\n      <h3>People with access</h3>\n      <div class=\"invited-user\" *ngIf=\"showCreator$ | async\">\n        <div class=\"name\">{{ planCreator$ | async }}</div>\n        <div class=\"non-editable\">Owner</div>\n      </div>\n      <div class=\"invited-user\">\n        <div class=\"name\">{{ fullname$ | async }} <span>(You)</span></div>\n        <div class=\"non-editable\">Owner</div>\n      </div>\n      <div *ngFor=\"let invite of invites$ | async\" class=\"invited-user\">\n        <div class=\"name\">{{ invite.collaborator_name || invite.email }}</div>\n        <button mat-button [matMenuTriggerFor]=\"menu\">\n          {{ invite.role }}\n          <mat-icon>arrow_drop_down</mat-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\" class=\"list-menu\" xPosition=\"before\">\n          <button\n            mat-menu-item\n            *ngFor=\"let role of roles\"\n            class=\"menu-roles\"\n            (click)=\"changeRole(invite, role)\">\n            <span class=\"spacer\">\n              <mat-icon *ngIf=\"role === invite.role\">check_small</mat-icon>\n            </span>\n            {{ role }}\n          </button>\n          <button\n            mat-menu-item\n            class=\"menu-divider\"\n            (click)=\"resendCode(invite)\">\n            Resend Code\n          </button>\n          <button mat-menu-item (click)=\"removeAccess(invite)\">\n            Remove Access\n          </button>\n        </mat-menu>\n      </div>\n    </section>\n  </app-section-loader>\n\n  <section class=\"footer\">\n    <button\n      class=\"action\"\n      mat-flat-button\n      type=\"button\"\n      color=\"primary\"\n      [disabled]=\"submitting\"\n      (click)=\"emails.length > 0 ? invite() : close()\">\n      {{ emails.length > 0 ? 'INVITE' : 'DONE' }}\n    </button>\n  </section>\n</div>\n\n<div class=\"help\" *ngIf=\"showHelp\">\n  <section class=\"header\">\n    <button mat-icon-button (click)=\"showHelp = true\" aria-label=\"back\">\n      <mat-icon class=\"back-btn\" (click)=\"showHelp = false\"\n        >arrow_back\n      </mat-icon>\n    </button>\n\n    <h2>Help</h2>\n    <button mat-icon-button (click)=\"showHelp = true\" aria-label=\"help\">\n      <mat-icon class=\"close-btn\" (click)=\"close()\">close</mat-icon>\n    </button>\n  </section>\n  <section class=\"help-content\">\n    <h4>How do I restrict permission to access a planning area?</h4>\n    <p>\n      When you share a planning area with someone, you can choose their\n      permission level.\n    </p>\n\n    <h4>Owner:</h4>\n    <p>\n      People who created the planning area. The owner can choose who can\n      collaborate or only view the scenarios of a planning area.\n    </p>\n\n    <h4>Collaborator:</h4>\n    <p>\n      Collaborators can create and archive scenarios of a planning area shared\n      with them, but they cannot share the planning area/scenarios with others.\n    </p>\n\n    <h4>Viewer:</h4>\n    <p>\n      Viewers can view a planning area, but they can’t create or archive\n      scenarios, and share the planning area with others.\n    </p>\n  </section>\n</div>\n"
        },
        {
            "name": "SignInDialogComponent",
            "id": "component-SignInDialogComponent-40f1d59ce6c5a7c5fd4b1242b5f11b9020c13769976cb89a28b29f23aaefb749abe97710ba7528c319eb64661cfd56e52bea9a137aab46c0c6b0a2822c7cccc7",
            "file": "src/app/map/sign-in-dialog/sign-in-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-in-dialog",
            "styleUrls": [
                "./sign-in-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<SignInDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatLegacyDialogRef as MatDialogRef } from '@angular/material/legacy-dialog';\n\n@Component({\n  selector: 'app-sign-in-dialog',\n  templateUrl: './sign-in-dialog.component.html',\n  styleUrls: ['./sign-in-dialog.component.scss'],\n})\nexport class SignInDialogComponent {\n  constructor(public dialogRef: MatDialogRef<SignInDialogComponent>) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sign-in-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SignInDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SignInDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h1 mat-dialog-title>Sign in or create an account to continue</h1>\n\n<div mat-dialog-content>\n  <p>You must be signed in to save plans and collaborate with others.</p>\n</div>\n\n<div mat-dialog-actions align=\"end\">\n  <button mat-button (click)=\"dialogRef.close()\" color=\"primary\">CANCEL</button>\n  <a mat-button href=\"login/\" cdkFocusInitial color=\"primary\">SIGN IN</a>\n</div>\n"
        },
        {
            "name": "SignupComponent",
            "id": "component-SignupComponent-1f8aaa58164fffba9ef193af5ba23b3cc16540c2da044e8c8cb5242f0b969dc65dc0c7e18b57d0a07e4f05dd29842c27355637c2348fae40b54ee298ad7d6cb2",
            "file": "src/app/signup/signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup",
            "styleUrls": [
                "./signup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emailAlreadyExists",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "FormMessageType",
                    "defaultValue": "FormMessageType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "passwordStateMatcher",
                    "defaultValue": "new PasswordStateMatcher(['newPasswordsMustMatch'])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "showHint",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "submitting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getEmailError",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFormErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resendEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormMessageType } from '../types';\nimport { AuthService } from '@services';\nimport { timeout, TimeoutError } from 'rxjs';\nimport { EMAIL_VALIDATION_REGEX } from '../shared/constants';\nimport { passwordsMustMatchValidator } from '../validators/passwords';\nimport { PasswordStateMatcher } from '../validators/error-matchers';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss'],\n})\nexport class SignupComponent {\n  errors: string[] = [];\n  form: FormGroup;\n  submitting: boolean = false;\n  emailAlreadyExists: boolean = false;\n  readonly FormMessageType = FormMessageType;\n  passwordStateMatcher = new PasswordStateMatcher(['newPasswordsMustMatch']);\n\n  showHint = false;\n\n  constructor(\n    private authService: AuthService,\n    private formBuilder: FormBuilder,\n    private router: Router\n  ) {\n    this.form = this.formBuilder.group(\n      {\n        firstName: this.formBuilder.control('', Validators.required),\n        lastName: this.formBuilder.control('', Validators.required),\n        email: this.formBuilder.control('', [\n          Validators.required,\n          Validators.pattern(EMAIL_VALIDATION_REGEX),\n        ]),\n        password1: this.formBuilder.control('', [\n          Validators.required,\n          Validators.minLength(8),\n        ]),\n        password2: this.formBuilder.control('', Validators.required),\n      },\n      {\n        validators: [passwordsMustMatchValidator('password1', 'password2')],\n      }\n    );\n  }\n\n  resendEmail() {\n    const email: string = this.form.get('email')?.value;\n    this.authService.resendValidationEmail(email).subscribe();\n  }\n\n  getEmailError(): string | null {\n    if (!!this.form.controls['email'].errors) {\n      const emailErrors = this.form.controls['email'].errors;\n      if ('required' in emailErrors) {\n        return 'Email is required.';\n      } else if ('pattern' in emailErrors) {\n        return 'Email must be the correct format.';\n      } else if ('accountExists' in emailErrors) {\n        return 'An account with this email already exists.';\n      }\n      return 'Unknown error.';\n    }\n    return null;\n  }\n\n  getFormErrors(): string | null {\n    if (!!this.form.errors) {\n      if ('newPasswordsMustMatch' in this.form.errors) {\n        return 'Given passwords must match.';\n      } else if ('passwordTooCommon' in this.form.errors) {\n        return 'This password is too common. Please choose a different password.';\n      } else if ('serverError' in this.form.errors) {\n        return 'An unexpected server error has occured.';\n      } else if ('timeoutError' in this.form.errors) {\n        return 'A validation email was not able to be sent at this time. If one does not arrive, you can attempt to login, but you may need to request a new validation email.';\n      }\n      return 'An unexpected error has occured submitting this form.';\n    }\n    return null;\n  }\n\n  signup() {\n    if (this.submitting) return;\n\n    this.submitting = true;\n    const email: string = this.form.get('email')?.value;\n    const password1: string = this.form.get('password1')?.value;\n    const password2: string = this.form.get('password2')?.value;\n    const firstName: string = this.form.get('firstName')?.value;\n    const lastName: string = this.form.get('lastName')?.value;\n    this.authService\n      .signup(email, password1, password2, firstName, lastName)\n      .pipe(timeout(10000))\n      .subscribe({\n        next: () => {\n          this.router.navigate(['thankyou']);\n        },\n        error: (error: HttpErrorResponse) => {\n          this.submitting = false;\n          if (error.status == 400) {\n            this.errors = Object.values(error.error);\n\n            // Backend Error: Password is too common\n            if (\n              this.errors.filter((s) =>\n                s[0].includes('This password is too common.')\n              ).length > 0\n            ) {\n              this.form.setErrors({ passwordTooCommon: true });\n            }\n\n            // Backend Error: An account already exists with this email.\n            this.emailAlreadyExists =\n              this.errors.filter((s) => s[0].includes('already registered'))\n                .length > 0;\n            if (this.emailAlreadyExists) {\n              this.form.controls['email'].setErrors({ accountExists: true });\n            }\n          } else if (error.status == 500) {\n            this.form.setErrors({ serverError: true });\n          } else if (error instanceof TimeoutError) {\n            this.form.setErrors({ timeoutError: true });\n          } else {\n            this.form.setErrors({ unexpectedError: true });\n          }\n        },\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/colors';\n@import '../../styles/mixins';\n\n:host {\n  display: flex;\n  min-height: 100%;\n}\n\n.info-card-container {\n  background-image: url('/assets/jpg/planscape-background.jpg');\n  background-repeat: no-repeat;\n  background-size: cover;\n  display: flex;\n  width: 50%;\n}\n\n.signup-form-container {\n  align-items: center;\n  background-color: $color-soft-purple;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  padding: 3% 0 4% 0;\n  width: 50%;\n  background-image: url('/assets/svg/waves-large.svg');\n  background-position: bottom right;\n  background-repeat: no-repeat;\n  background-size: 50%;\n}\n\n.signup-form-subcontainer {\n  width: 60%;\n}\n\n.planscape-color-logo {\n  margin-bottom: 1em;\n  margin-left: auto;\n  margin-right: auto;\n  height: 42px;\n  width: 246px;\n}\n\n.signup-form {\n  align-items: stretch;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  background-color: white;\n  padding: 20px 60px 40px 60px;\n  border: 1px black solid;\n  border-color: $color-original-purple;\n  border-radius: 8px;\n  box-shadow: 0px 4px 4px 0px $color-drop-shadow;\n}\n\n.button-row {\n  display: flex;\n  width: 100%;\n}\n\nh1 {\n  text-align: center;\n  color: $color-dark-gray;\n}\n\nmat-form-field {\n  width: 100%;\n}\n\nbutton {\n  margin-bottom: 5px;\n}\n\n.create-button {\n  @include standard-button();\n  background-color: $color-standard-blue;\n  border: 1px $color-dark-gray solid;\n  margin-left: auto;\n  margin-right: auto;\n  width: 80%;\n  max-width: 200px;\n}\n\n.post-error-option {\n  padding: 2em;\n  text-align: center;\n}\n\n.standard-label {\n  @include standard-input-label();\n  color: $color-dark-gray;\n}\n\n.required-blurb {\n  @include italic-sm();\n  color: $color-text-gray;\n}\n\n:host ::ng-deep .mat-form-field-outline {\n  background-color: $color-light-gray;\n}\n\n/* field - selected */\n:host ::ng-deep .mat-form-field-outline.mat-form-field-outline-thick {\n  background-color: $color-highlight-30pct;\n}\n\n/* trims the space underneath the field,\n  which we no longer use for displaying errors\n*/\n:host ::ng-deep .mat-form-field-wrapper {\n  padding-bottom: 5%;\n}\n",
                    "styleUrl": "./signup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"info-card-container\">\n  <app-info-card></app-info-card>\n</div>\n\n<div class=\"signup-form-container\">\n  <div class=\"signup-form-subcontainer\">\n    <div class=\"planscape-color-logo\">\n      <img src=\"assets/svg/planscape-color-logo.svg\" alt=\"Planscape logo\" />\n    </div>\n    <div class=\"signup-form\">\n      <h1 class=\"signup-title\">Create your account</h1>\n\n      <form [formGroup]=\"form\" (ngSubmit)=\"signup()\">\n        <mat-label class=\"standard-label\"\n          >First Name\n          <span class=\"required-blurb\">required</span>\n        </mat-label>\n        <mat-form-field appearance=\"outline\">\n          <input\n            type=\"text\"\n            required\n            formControlName=\"firstName\"\n            matInput\n            autocomplete=\"given-name\" />\n        </mat-form-field>\n        <app-field-alert\n          *ngIf=\"\n            !!form.controls['firstName'].errors &&\n            form.controls['firstName'].dirty === true\n          \"\n          message=\"This field must contain a value.\"\n          title=\"First Name Error\"></app-field-alert>\n\n        <mat-label class=\"standard-label\"\n          >Last Name\n          <span class=\"required-blurb\">required</span>\n        </mat-label>\n        <mat-form-field appearance=\"outline\">\n          <input\n            type=\"text\"\n            required\n            formControlName=\"lastName\"\n            matInput\n            autocomplete=\"family-name\" />\n        </mat-form-field>\n        <app-field-alert\n          *ngIf=\"\n            !!form.controls['lastName'].errors &&\n            form.controls['lastName'].dirty\n          \"\n          message=\"This field must contain a value.\"\n          title=\"Last Name Error\"></app-field-alert>\n\n        <mat-label class=\"standard-label\"\n          >Email\n          <span class=\"required-blurb\">required</span>\n        </mat-label>\n        <mat-form-field appearance=\"outline\">\n          <input\n            type=\"text\"\n            required\n            formControlName=\"email\"\n            matInput\n            autocomplete=\"email\"\n            (blur)=\"getEmailError()\" />\n        </mat-form-field>\n        <app-field-alert\n          *ngIf=\"\n            form.controls['email'].touched && !!form.controls['email'].errors\n          \"\n          [message]=\"getEmailError()\"\n          title=\"email error\"></app-field-alert>\n\n        <mat-label class=\"standard-label\"\n          >Create Password\n          <span class=\"required-blurb\">required</span>\n        </mat-label>\n        <mat-form-field appearance=\"outline\">\n          <input\n            type=\"password\"\n            required\n            formControlName=\"password1\"\n            matInput\n            autocomplete=\"new-password\"\n            [errorStateMatcher]=\"passwordStateMatcher\"\n            (focus)=\"showHint = true\"\n            (blur)=\"showHint = false\" />\n        </mat-form-field>\n        <app-field-alert\n          [messageType]=\"FormMessageType.ALERT\"\n          *ngIf=\"showHint && !form.get('password1')?.value\"\n          title=\"Password requirements\"\n          message=\"Your password needs to be at least 8 characters long.\">\n        </app-field-alert>\n        <app-field-alert\n          [messageType]=\"FormMessageType.ERROR\"\n          *ngIf=\"!showHint && form.get('password1')?.errors?.['minlength']\"\n          title=\"Password Error\"\n          message=\"Your password needs to be at least 8 characters long.\"></app-field-alert>\n        <mat-label class=\"standard-label\"\n          >Confirm Password\n          <span class=\"required-blurb\">required</span>\n        </mat-label>\n        <mat-form-field appearance=\"outline\">\n          <input\n            type=\"password\"\n            required\n            formControlName=\"password2\"\n            autocomplete=\"new-password\"\n            matInput />\n        </mat-form-field>\n\n        <app-form-message\n          [messageType]=\"FormMessageType.ERROR\"\n          *ngIf=\"!!form.errors\"\n          title=\"Signup Error\"\n          [message]=\"getFormErrors()\">\n        </app-form-message>\n\n        <div class=\"button-row\">\n          <button\n            mat-flat-button\n            type=\"submit\"\n            color=\"primary\"\n            class=\"create-button\"\n            [disabled]=\"!form.valid || submitting\">\n            {{ submitting ? 'Please wait...' : 'CREATE ACCOUNT' }}\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SummaryPanelComponent",
            "id": "component-SummaryPanelComponent-c8f528b525887593a5f5b7268147dd2b0405c6a2ff807dad2e41a5389d6da65f1d99534dbce38c8c8af021c32d953a10fe2aeb94335f239dc0cc41bd566cc5fa",
            "file": "src/app/plan/plan-summary/summary-panel/summary-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-summary-panel",
            "styleUrls": [
                "./summary-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./summary-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "owner",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "User | null",
                    "decorators": []
                },
                {
                    "name": "plan",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "Plan | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "conditionScore",
                    "defaultValue": "ConditionName.POOR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConditionName",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "conditionScoreColorMap",
                    "defaultValue": "conditionScoreColorMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "futureConditionScore",
                    "defaultValue": "ConditionName.LEANING_GOOD",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConditionName",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "notes",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "summaryInput",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryInput | null",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "autoSaveNotes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { Plan, Region, User } from '../../../types';\nimport { NOTE_SAVE_INTERVAL } from '../../plan-helpers';\nimport { filter, interval, switchMap, tap } from 'rxjs';\nimport { PlanService } from 'src/app/services';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\nexport interface SummaryInput {\n  id?: number;\n  type: string;\n  name: string;\n  owner: string;\n  region: Region;\n  area: GeoJSON.GeoJSON;\n  status?: string;\n  createdTime?: Date;\n  scenarios?: number;\n  configs?: number;\n  lastUpdated: Date;\n  acres: number;\n  notes?: string;\n}\n\n// todo: move this to shared types\nexport enum ConditionName {\n  GOOD = 'Good',\n  LEANING_GOOD = 'Leaning good',\n  NEUTRAL = 'Neutral',\n  LEANING_POOR = 'Leaning poor',\n  POOR = 'Poor',\n}\n\nexport const conditionScoreColorMap: Record<ConditionName, string> = {\n  [ConditionName.GOOD]: '#010108',\n  [ConditionName.LEANING_GOOD]: '#4c1761',\n  [ConditionName.NEUTRAL]: '#b1354c',\n  [ConditionName.LEANING_POOR]: '#F4511e',\n  [ConditionName.POOR]: '#fdd853',\n};\n\n@UntilDestroy()\n@Component({\n  selector: 'app-summary-panel',\n  templateUrl: './summary-panel.component.html',\n  styleUrls: ['./summary-panel.component.scss'],\n})\nexport class SummaryPanelComponent implements OnInit, OnChanges {\n  @Input() plan: Plan | null = null;\n  @Input() owner: User | null = null;\n\n  summaryInput: SummaryInput | null = null;\n  conditionScore: ConditionName = ConditionName.POOR;\n  futureConditionScore: ConditionName = ConditionName.LEANING_GOOD;\n  conditionScoreColorMap = conditionScoreColorMap;\n  notes: string = '';\n\n  constructor(private planService: PlanService) {}\n\n  ngOnInit(): void {\n    this.notes = this.plan?.notes ? this.plan?.notes : '';\n    this.autoSaveNotes();\n  }\n\n  ngOnChanges(): void {\n    if (!!this.plan) {\n      this.summaryInput = {\n        id: this.plan!.id,\n        type: 'Plan',\n        name: this.plan!.name,\n        owner: this.owner?.firstName\n          ? this.owner?.firstName + ' ' + this.owner?.lastName\n          : this.owner?.username ?? 'Guest',\n        region: this.plan!.region_name,\n        area: this.plan!.geometry!,\n        createdTime: new Date(this.plan!.created_at),\n        scenarios: this.plan!.scenario_count,\n        notes: this.plan!.notes,\n        lastUpdated: new Date(this.plan!.latest_updated!),\n        acres: Math.round(this.plan.area_acres),\n        status: 'In progress',\n      };\n    }\n  }\n\n  autoSaveNotes(): void {\n    interval(NOTE_SAVE_INTERVAL)\n      .pipe(\n        untilDestroyed(this),\n        filter((_) => this.plan !== null && this.plan.notes !== this.notes),\n        tap((_) => (this.plan!.notes = this.notes)),\n        switchMap((_) =>\n          this.planService.updatePlanningArea(this.plan!, this.plan!.id)\n        )\n      )\n      .subscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".plan-map {\n  height: 100%;\n}\n\n.plan-map-wrapper {\n  height: 300px;\n}\n\n.summary-panel {\n  background-color: white;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  height: 100%;\n  padding: 24px;\n  position: absolute;\n  width: 300px;\n}\n\n.summary-title {\n  font-size: 24px;\n  margin: 20px 0px 10px 0px;\n}\n\n.summary-subtitle {\n  color: #5f6368;\n  font-size: 13px;\n  font-weight: 500;\n  letter-spacing: 0.25px;\n  margin-bottom: 5px;\n}\n\n.summary-content {\n  color: #5f6368;\n  font-size: 12px;\n  letter-spacing: 0.3px;\n  gap: 50px;\n  display: flex;\n  flex-direction: column;\n}\n\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  margin: 16px 0px 0px 0px;\n}\n\n.grid-item {\n  display: flex;\n  flex-direction: column;\n  margin: 10px;\n}\n\n.grid-title {\n  color: #455a64;\n  font-size: 20px;\n}\n\n.summary-info {\n  margin-top: 5px;\n}\n\n.summary-footer {\n  margin-top: auto;\n}\n\n.notes {\n  width: 100%;\n  height: 100%;\n  resize: none;\n}\n\n.notes-title {\n  margin-left: 10px;\n  margin-bottom: 2px;\n  font-size: medium;\n}\n\n:host {\n  ::ng-deep .mat-form-field {\n    width: 100%;\n    height: 200px;\n  }\n\n  ::ng-deep .mat-form-field-flex {\n    height: 200px;\n  }\n\n  ::ng-deep .mat-form-field-infix {\n    height: 90%;\n  }\n\n  ::ng-deep .mat-form-field-underline {\n    display: none;\n  }\n}\n",
                    "styleUrl": "./summary-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "planService",
                        "type": "PlanService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "planService",
                        "type": "PlanService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"summary-panel\">\n  <div class=\"summary-header\">\n    <div class=\"summary-title\">About the area</div>\n  </div>\n  <div class=\"summary-content\">\n    <div>\n      <div class=\"grid-container\">\n        <div class=\"grid-item\">\n          <span class=\"grid-title\">{{\n            summaryInput?.acres | number: '1.0-0'\n          }}</span>\n          <span class=\"grid-subtitle\">acres</span>\n        </div>\n        <div class=\"grid-item\">\n          <span class=\"grid-title\">{{ summaryInput?.scenarios }}</span>\n          <span class=\"grid-subtitle\">scenarios</span>\n        </div>\n      </div>\n\n      <div class=\"summary-info\">\n        <div>Region: {{ summaryInput?.region }}</div>\n        <br />\n        <div>Creator: {{ summaryInput?.owner }}</div>\n        <div>Created: {{ summaryInput?.createdTime | date: 'MM/dd/yyyy' }}</div>\n        <div>\n          Last activity: {{ summaryInput?.lastUpdated | date: 'MM/dd/yyyy' }}\n        </div>\n      </div>\n    </div>\n    <div>\n      <div class=\"notes-title\">Notes</div>\n      <mat-form-field class=\"notes-wrapper\" appearance=\"fill\">\n        <mat-label>Type notes here</mat-label>\n        <textarea class=\"notes\" matInput [(ngModel)]=\"notes\"></textarea>\n      </mat-form-field>\n    </div>\n\n    <div class=\"plan-map-wrapper\">\n      <app-plan-map\n        class=\"plan-map small\"\n        [plan]=\"plan\"\n        [mapId]=\"'planning-map'\"\n        [mapPadding]=\"[20, 0]\"\n        [showAttributionAndZoom]=\"false\"></app-plan-map>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ThankYouComponent",
            "id": "component-ThankYouComponent-52272665d6123ec7f8c1e8178bab2eaa34566beb14e6d2f24baafb6ea50d5021864d1fa7545c2be501b6147698728d6e0ba7583d92adb1925e96eca231697a5b",
            "file": "src/app/signup/thank-you/thank-you.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-thank-you",
            "styleUrls": [
                "./thank-you.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./thank-you.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-thank-you',\n  templateUrl: './thank-you.component.html',\n  styleUrls: ['./thank-you.component.scss'],\n})\nexport class ThankYouComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/colors';\n@import '../../../styles/mixins';\n\n:host {\n  display: flex;\n  height: 100%;\n}\n\n.thankyou-container {\n  display: flex;\n  background-image: url('/assets/jpg/planscape-background.jpg');\n  background-repeat: no-repeat;\n  background-size: cover;\n  width: 50%;\n}\n\n.thankyou-subcontainer {\n  flex-direction: column;\n  margin: auto;\n  margin-top: 30%;\n  width: 60%;\n  max-width: 600px;\n  display: flex;\n}\n\n.thankyou-card {\n  gap: 20px;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n  padding: 40px 60px 40px 60px;\n  border: 1px;\n  border-color: $color-original-purple-50pct;\n  border-style: solid;\n  border-radius: 8px;\n  box-shadow: 0px 4px 4px 0px #00000040;\n  text-align: left;\n}\n\nh2 {\n  @include h2();\n\n  &.title {\n    color: $color-dark-gray;\n  }\n}\n\np.regular {\n  @include regular-paragraph();\n  color: $color-dark-gray;\n}\n\na.standard-link {\n  @include standard-link();\n  color: $color-standard-blue;\n}\n\n.info-text-container {\n  background-color: $color-soft-purple;\n  display: flex;\n  justify-content: center;\n  width: 50%;\n  background-image: url('/assets/svg/waves-large.svg');\n  background-position: bottom right;\n  background-repeat: no-repeat;\n  background-size: 50%;\n}\n",
                    "styleUrl": "./thank-you.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "templateData": "<div class=\"thankyou-container\">\n  <div class=\"thankyou-subcontainer\">\n    <div class=\"thankyou-card\">\n      <h2 class=\"title\">Thank You!</h2>\n      <div>\n        <p class=\"regular\">Thank you for creating an account with us!</p>\n        <p class=\"regular\">Please check your email to validate your account.</p>\n      </div>\n    </div>\n  </div>\n  <app-credits-blurb></app-credits-blurb>\n</div>\n<div class=\"info-text-container\">\n  <app-learn-more></app-learn-more>\n</div>\n"
        },
        {
            "name": "TopBarComponent",
            "id": "component-TopBarComponent-54ba6977a4e9ffcf379862bc429b297919a944f714acea066e390928151d06a246b0bd814a55b62ad6f184856483fc84f8677b34ec6a5a1f4becbcf8630cef44",
            "file": "src/app/top-bar/top-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-top-bar",
            "styleUrls": [
                "./top-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "toggleEvent",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "displayName$",
                    "defaultValue": "this.loggedIn$.pipe(\n    switchMap((loggedIn) => this.authService.loggedInUser$),\n    map((user) => {\n      if (user === undefined) {\n        return;\n      }\n\n      if (user) {\n        return user.firstName || user.username;\n      } else {\n        return 'Sign In';\n      }\n    })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "initial$",
                    "defaultValue": "this.displayName$.pipe(\n    map((displayName) => displayName?.substring(0, 1))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "loggedIn$",
                    "defaultValue": "this.authService.isLoggedIn$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { map, switchMap } from 'rxjs';\n\nimport { AuthService } from '@services';\n\n@Component({\n  selector: 'app-top-bar',\n  templateUrl: './top-bar.component.html',\n  styleUrls: ['./top-bar.component.scss'],\n})\nexport class TopBarComponent implements OnInit {\n  @Output()\n  toggleEvent = new EventEmitter<Event>();\n\n  readonly color = 'primary';\n\n  loggedIn$ = this.authService.isLoggedIn$;\n\n  displayName$ = this.loggedIn$.pipe(\n    switchMap((loggedIn) => this.authService.loggedInUser$),\n    map((user) => {\n      if (user === undefined) {\n        return;\n      }\n\n      if (user) {\n        return user.firstName || user.username;\n      } else {\n        return 'Sign In';\n      }\n    })\n  );\n\n  initial$ = this.displayName$.pipe(\n    map((displayName) => displayName?.substring(0, 1))\n  );\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n  }\n\n  logout() {\n    this.authService.logout().subscribe((_) => {\n      this.router.navigate(['/']);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../shared/_variables.scss';\n@import \"../../styles/colors\";\n@import \"../../styles/mixins\";\n\n// Top-bar styling\n.mat-toolbar {\n  background-color: $color-dark-gray;\n  height: $toolbar-height;\n  padding: 0 64px 0 12px;\n  position: relative;\n  z-index: 2;\n\n  .site-link {\n    color: $color-white;\n    font-size: 19px;\n    font-style: normal;\n    font-weight: 400;\n    letter-spacing: 0.5px;\n    text-decoration: none;\n    height: 100%;\n  }\n\n  .logo-center {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    margin-left: 10px;\n    box-sizing: border-box;\n    padding: 10px 0 12px;\n  }\n\n  .logo {\n    height: 100%;\n  }\n\n  .mat-icon {\n    line-height: 22px;\n  }\n\n}\n\n\n// The space between left and right elements on the top-bar\n.spacer {\n  flex: 1 1 auto;\n}\n\n.navbar-item {\n  @include important-paragraph();\n  color: $color-white;\n  text-decoration: none;\n  background: none;\n  border: none;\n  padding: 0;\n}\n\nbutton.navbar-item, a.navbar-item {\n  cursor: pointer;\n\n  &:active, &:hover {\n    color: $color-light-blue;\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n}\n\n.navbar-item[aria-expanded=\"true\"] {\n  color: $color-light-blue;\n  text-decoration: underline;\n  text-underline-position: under;\n}\n\n.help {\n  margin-left: 20px;\n\n  &:active, &:hover {\n    color: $color-light-blue;\n  }\n}\n\n.mat-menu-trigger {\n  height: 100%;\n}\n\n@media print {\n  .navbar-item,\n  .mat-menu-trigger,\n  .help {\n    display: none;\n  }\n  .mat-toolbar {\n    background-color: $color-white;\n  }\n\n  .mat-toolbar .site-link {\n    color: $color-black;\n  }\n\n  .site-link img {\n    filter: invert(1);\n  }\n}\n",
                    "styleUrl": "./top-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar [color]=\"color\" class=\"mat-elevation-z4\">\n  <!-- Title and logo-->\n  <a class=\"site-link logo-center\" routerLink=\"/home\" data-id=\"logo\">\n    <img\n      src=\"assets/svg/planscape-white-logo.svg\"\n      alt=\"Planscape\"\n      class=\"logo\" />\n  </a>\n  <!-- Space between left and right elements -->\n  <span class=\"spacer\"></span>\n\n  <!-- Show this section once we know if the user is logged in or not to avoid -->\n  <!-- flashing guest / default icon and content shifting -->\n  <ng-container *ngIf=\"(displayName$ | async) !== undefined\">\n    <!-- User or sign in with menu if login enabled -->\n    <button\n      [matMenuTriggerFor]=\"dotMenu\"\n      class=\"navbar-item mat-body-2\"\n      data-id=\"menu-trigger\">\n      {{ displayName$ | async }}\n    </button>\n    <mat-menu #dotMenu=\"matMenu\" class=\"dropdown-menu\">\n      <!-- logged out-->\n      <ng-container *ngIf=\"(loggedIn$ | async) === false\">\n        <a mat-menu-item routerLink=\"/login\"> Log In </a>\n        <a mat-menu-item routerLink=\"/signup\"> Create Account</a>\n      </ng-container>\n\n      <!--  Logged in-->\n      <ng-container *ngIf=\"loggedIn$ | async\">\n        <button mat-menu-item routerLink=\"/home\" data-id=\"home\">Plans</button>\n        <button\n          mat-menu-item\n          routerLink=\"/account/information\"\n          data-id=\"account\">\n          Account\n        </button>\n        <button mat-menu-item (click)=\"logout()\" data-id=\"logout\">\n          Sign Out\n        </button>\n      </ng-container>\n    </mat-menu>\n\n    <a\n      class=\"help\"\n      mat-icon-button\n      routerLink=\"/help\"\n      target=\"_blank\"\n      aria-label=\"help button\"\n      rel=\"noopener noreferrer\"\n      data-id=\"help\">\n      <mat-icon class=\"material-symbols-outlined\">help_outline</mat-icon>\n    </a>\n\n    <!--  Feedback-->\n    <a\n      routerLink=\"/feedback\"\n      class=\"navbar-item\"\n      data-id=\"feedback\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\">\n      Feedback\n    </a>\n  </ng-container>\n</mat-toolbar>\n"
        },
        {
            "name": "WelcomeComponent",
            "id": "component-WelcomeComponent-a9d5247d378e98b5c065cf8942fcfa8e013355212a097c2274ca3652880e9bcac81ff00143781a83e3f946758298cb294f9d1a8ac18f5b90c0b86462e5be4c4d",
            "file": "src/app/home/welcome/welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-welcome",
            "styleUrls": [
                "./welcome.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./welcome.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showsNorthCal",
                    "defaultValue": "this.features.isFeatureEnabled('show_north_cal')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FeatureService } from '../../features/feature.service';\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './welcome.component.html',\n  styleUrls: ['./welcome.component.scss'],\n})\nexport class WelcomeComponent {\n  showsNorthCal = this.features.isFeatureEnabled('show_north_cal');\n\n  constructor(private features: FeatureService) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex: 1;\n  overflow: hidden;\n  display: flex;\n}\n\n.welcome {\n  background-color: white;\n  border-radius: 16px;\n  box-shadow: 0px 3px 1px -2px #0000001f;\n  box-shadow: 0px 2px 2px 0px #00000024;\n  box-shadow: 0px 1px 5px 0px #00000033;\n  padding: 40px 60px;\n  display: flex;\n  flex-direction: column;\n  max-width: 70%;\n  box-sizing: border-box;\n  color: #000000a8;\n  margin: 20px auto;\n  overflow: auto;\n}\n\n.link,\n.link:visited {\n  color: #000000a8;\n}\n\nh1 {\n  padding-bottom: 20px;\n  color: black;\n  font-weight: 700;\n}\n\np {\n  margin-bottom: 16px;\n}\n\n.flex {\n  display: flex;\n  align-items: flex-start;\n  gap: 20px;\n  padding-top: 10px;\n  padding-bottom: 15px;\n}\n\n.explore {\n  text-transform: uppercase;\n}\n\n.disclaimer {\n  font-size: 13px;\n}\n",
                    "styleUrl": "./welcome.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "features",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "features",
                        "type": "FeatureService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<section class=\"welcome\">\n  <h1 class=\"mat-h2\">Welcome to Planscape!</h1>\n\n  <b>What is Planscape?</b>\n  <p>\n    Planscape is a new wildfire resilience planning support tool designed to\n    bring the best available state & federal data together with the latest\n    science to enable better land management. Planscape is built to help\n    regional wildland planners prioritize landscape treatments. With Planscape,\n    you can mitigate fire risk, maximize ecological benefits, and help\n    landscapes adapt to climate change.\n  </p>\n  <p>\n    Planscape includes all data from the\n    <a\n      href=\"https://wildfiretaskforce.org/regional-resource-kits-page/\"\n      target=\"_blank\"\n      class=\"link\">\n      Regional Resource Kit\n    </a>\n    layers for the Sierra Nevada, Southern California, Central Coast and\n    Northern California regions.\n  </p>\n\n  <b>What can I do with Planscape?</b>\n  <p>\n    You can view and explore the landscape resilience planning data on a set of\n    maps. You can also visualize this data for the four regions alongside other\n    provided data sets such as county and watershed boundaries.\n  </p>\n  <p>\n    Future Planscape releases aim to give you the ability to create and save\n    planning areas, to create scenarios for various treatments, and to\n    collaborate with other stakeholders.\n  </p>\n  <b>Can Planscape actually help with planning?</b>\n  <p>\n    Yes! A lot more functionality, including the ability to create, edit, save,\n    and share plans is coming. The tool will also include integration with\n    ForSys to allow planners to output projects that are optimized within\n    provided constraints.\n  </p>\n  <b>How do I do more?</b>\n  <p>\n    Click on the Help icon on the top right corner of the tool to read the\n    <a routerLink=\"/help\" target=\"_blank\" class=\"link\">user guide</a>\n    or check out the\n    <a\n      href=\"https://github.com/OurPlanscape/Planscape/wiki/Release-Notes\"\n      target=\"_blank\"\n      class=\"link\">\n      Planscape Release Notes\n    </a>\n    or\n    <a href=\"https://www.planscape.org/faqs\" target=\"_blank\" class=\"link\">\n      FAQ\n    </a>\n    . You can also visit\n    <a href=\"https://www.planscape.org/\" target=\"_blank\" class=\"link\">\n      Planscape.org\n    </a>\n    for more information about the tool. If you would like to receive our\n    newsletter for regular updates, you can\n    <a href=\"https://www.planscape.org/contact\" target=\"_blank\" class=\"link\">\n      sign up here\n    </a>\n    .\n  </p>\n  <b>How can I get started?</b>\n  <p>\n    If you want to use the Regional Resource Kit mapping tool, click Explore.\n  </p>\n\n  <div class=\"flex\">\n    <a mat-raised-button color=\"primary\" class=\"explore\" routerLink=\"/map\">\n      Explore\n    </a>\n  </div>\n\n  <p>\n    Already have an account? Click\n    <a routerLink=\"/login\">here</a>\n    to login or\n    <a routerLink=\"/signup\">create an account.</a>\n  </p>\n\n  <div class=\"disclaimer\">\n    Please read our\n    <a\n      href=\"https://www.planscape.org/conditions-of-use/\"\n      target=\"_blank\"\n      class=\"link\">\n      Conditions of Use\n    </a>\n    for information regarding usage of this tool.\n  </div>\n</section>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-60cf54090331686e5aab9a29756677be68cab8f9d3a8dbf6c8ed6be0b27ef134795c9c6e9b923a285838a02ed02e2f1bd3de1e2c085718815c579f4c24c60e41",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { LayoutModule } from '@angular/cdk/layout';\nimport { CommonModule, CurrencyPipe } from '@angular/common';\nimport {\n  HTTP_INTERCEPTORS,\n  HttpClientModule,\n  HttpClientXsrfModule,\n} from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { RouterModule } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport {\n  NgxGoogleAnalyticsModule,\n  NgxGoogleAnalyticsRouterModule,\n} from 'ngx-google-analytics';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FeaturesModule } from './features/features.module';\nimport { HomeComponent } from './home/home.component';\nimport { PlanTableComponent } from './home/plan-table/plan-table.component';\nimport { LoginComponent } from './login/login.component';\n\nimport { MaterialModule } from './material/material.module';\nimport { NavigationComponent } from './navigation/navigation.component';\nimport { PlanModule } from './plan/plan.module';\n\nimport {\n  AuthGuard,\n  AuthService,\n  MapService,\n  PlanService,\n  PopupService,\n  SessionService,\n} from './services';\nimport { SharedModule } from './shared/shared.module';\nimport { AboutComponent } from './home/about/about.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { TopBarComponent } from './top-bar/top-bar.component';\n\nimport { environment } from 'src/environments/environment';\nimport { WelcomeComponent } from './home/welcome/welcome.component';\nimport { PlanningAreasComponent } from './home/planning-areas/planning-areas.component';\nimport { MatLegacyDialogModule as MatDialogModule } from '@angular/material/legacy-dialog';\nimport { WINDOW_PROVIDERS } from './services/window.service';\nimport { ResetPasswordDialogComponent } from './forget-password/reset-password-dialog/reset_password_dialog.component';\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\nimport { NgChartsModule } from 'ng2-charts';\nimport { RedirectGuard } from './services/redirect.guard';\nimport { PasswordResetComponent } from './password-reset/password-reset.component';\nimport { ConfirmationDialogComponent } from './password-reset/confirmation-dialog/confirmation-dialog.component';\nimport { AccountValidationComponent } from './account-validation/account-validation.component';\nimport { MapModule } from './map/map.module';\nimport { DeleteDialogComponent } from './delete-dialog/delete-dialog.component';\nimport { AccountPageComponent } from './account/account-page/account-page.component';\nimport { DetailsComponent } from './account/details/details.component';\nimport { CredentialsComponent } from './account/credentials/credentials.component';\nimport { DeleteAccountComponent } from './account/delete-account/delete-account.component';\nimport { MenuComponent } from './account/menu/menu.component';\nimport { NgxMaskModule } from 'ngx-mask';\nimport { ThankYouComponent } from './signup/thank-you/thank-you.component';\nimport { LearnMoreComponent } from './home/learn-more/learn-more.component';\nimport { HorizonalCardComponent } from './home/horizonal-card/horizonal-card.component';\nimport { EditUserFieldComponent } from './account/edit-user-field/edit-user-field.component';\nimport { InfoCardComponent } from './signup/info-card/info-card.component';\nimport { ChangePasswordComponent } from './account/change-password/change-password.component';\nimport { DeleteAccountDialogComponent } from './account/delete-account-dialog/delete-account-dialog.component';\nimport { SharePlanDialogComponent } from './home/share-plan-dialog/share-plan-dialog.component';\nimport { ChipInputComponent } from './home/chip-input/chip-input.component';\nimport { JwtInterceptor } from './services/jwt-interceptor.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    SignupComponent,\n    NavigationComponent,\n    TopBarComponent,\n    HomeComponent,\n    PlanTableComponent,\n    DeleteAccountDialogComponent,\n    WelcomeComponent,\n    PlanningAreasComponent,\n    ResetPasswordDialogComponent,\n    ForgetPasswordComponent,\n    AboutComponent,\n    PasswordResetComponent,\n    ConfirmationDialogComponent,\n    AccountValidationComponent,\n    DeleteDialogComponent,\n    AccountPageComponent,\n    DetailsComponent,\n    CredentialsComponent,\n    DeleteAccountComponent,\n    MenuComponent,\n    ThankYouComponent,\n    LearnMoreComponent,\n    HorizonalCardComponent,\n    EditUserFieldComponent,\n    InfoCardComponent,\n    ChangePasswordComponent,\n    SharePlanDialogComponent,\n    ChipInputComponent,\n  ],\n  imports: [\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    BrowserModule,\n    CommonModule,\n    FeaturesModule,\n    FormsModule,\n    HttpClientModule,\n    HttpClientXsrfModule.withOptions({\n      cookieName: 'csrftoken',\n      headerName: 'X-CSRFTOKEN',\n    }),\n    LayoutModule,\n    MaterialModule,\n    NgxGoogleAnalyticsModule.forRoot(environment.google_analytics_id),\n    NgxGoogleAnalyticsRouterModule,\n    PlanModule,\n    RouterModule,\n    SharedModule,\n    ReactiveFormsModule,\n    MatDialogModule,\n    NgChartsModule,\n    MapModule,\n    NgxMaskModule.forRoot(),\n  ],\n  providers: [\n    AuthService,\n    AuthGuard,\n    PopupService,\n    MapService,\n    PlanService,\n    CookieService,\n    SessionService,\n    RedirectGuard,\n    WINDOW_PROVIDERS,\n    CurrencyPipe,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: JwtInterceptor,\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthGuard"
                        },
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "JwtInterceptor"
                        },
                        {
                            "name": "MapService"
                        },
                        {
                            "name": "PlanService"
                        },
                        {
                            "name": "PopupService"
                        },
                        {
                            "name": "RedirectGuard"
                        },
                        {
                            "name": "SessionService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AboutComponent"
                        },
                        {
                            "name": "AccountPageComponent"
                        },
                        {
                            "name": "AccountValidationComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ChangePasswordComponent"
                        },
                        {
                            "name": "ChipInputComponent"
                        },
                        {
                            "name": "ConfirmationDialogComponent"
                        },
                        {
                            "name": "CredentialsComponent"
                        },
                        {
                            "name": "DeleteAccountComponent"
                        },
                        {
                            "name": "DeleteAccountDialogComponent"
                        },
                        {
                            "name": "DeleteDialogComponent"
                        },
                        {
                            "name": "DetailsComponent"
                        },
                        {
                            "name": "EditUserFieldComponent"
                        },
                        {
                            "name": "ForgetPasswordComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "HorizonalCardComponent"
                        },
                        {
                            "name": "InfoCardComponent"
                        },
                        {
                            "name": "LearnMoreComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "PasswordResetComponent"
                        },
                        {
                            "name": "PlanTableComponent"
                        },
                        {
                            "name": "PlanningAreasComponent"
                        },
                        {
                            "name": "ResetPasswordDialogComponent"
                        },
                        {
                            "name": "SharePlanDialogComponent"
                        },
                        {
                            "name": "SignupComponent"
                        },
                        {
                            "name": "ThankYouComponent"
                        },
                        {
                            "name": "TopBarComponent"
                        },
                        {
                            "name": "WelcomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "FeaturesModule"
                        },
                        {
                            "name": "MapModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "PlanModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-30a1bbbc3f91511bcbec154326638c8c4e8aa5d92ea3c3ab447536ee82d1d463f87ab25db00ba4db59f63f62e0751c4067561c31fe7938c5907fdc91eb7107ae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { Injectable, NgModule } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport {\n  RouterModule,\n  RouterStateSnapshot,\n  Routes,\n  TitleStrategy,\n} from '@angular/router';\n\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { MapComponent } from './map/map.component';\nimport { CreateScenariosComponent } from './plan/create-scenarios/create-scenarios.component';\nimport { PlanComponent } from './plan/plan.component';\nimport { PasswordResetComponent } from './password-reset/password-reset.component';\nimport { AuthGuard } from './services';\nimport { passwordResetTokenResolver } from './services/password-reset.resolver';\nimport { SignupComponent } from './signup/signup.component';\nimport { RedirectGuard } from './services/redirect.guard';\nimport { AccountValidationComponent } from './account-validation/account-validation.component';\nimport { ExploreComponent } from './plan/explore/explore/explore.component';\nimport { AccountPageComponent } from './account/account-page/account-page.component';\nimport { DetailsComponent } from './account/details/details.component';\nimport { CredentialsComponent } from './account/credentials/credentials.component';\nimport { DeleteAccountComponent } from './account/delete-account/delete-account.component';\nimport { ThankYouComponent } from './signup/thank-you/thank-you.component';\nimport { redirectResolver } from './services/redirect.resolver';\n\nconst routes: Routes = [\n  {\n    path: '',\n    title: 'Planscape',\n    children: [\n      { path: '', redirectTo: 'home', pathMatch: 'full' },\n      {\n        path: 'login',\n        title: 'Login',\n        component: LoginComponent,\n      },\n      {\n        path: 'reset/:userId/:token',\n        title: 'Password reset',\n        resolve: { passwordResetToken: passwordResetTokenResolver },\n        component: PasswordResetComponent,\n      },\n      {\n        path: 'reset',\n        title: 'Forget password',\n        component: ForgetPasswordComponent,\n      },\n      {\n        path: 'home',\n        title: 'Home',\n        component: HomeComponent,\n      },\n      {\n        path: 'signup',\n        title: 'Signup',\n        component: SignupComponent,\n        resolve: { redirectUrl: redirectResolver },\n      },\n      {\n        path: 'thankyou',\n        title: 'Thank You',\n        component: ThankYouComponent,\n      },\n      {\n        path: 'validate/:token',\n        title: 'Account E-mail Validation',\n        component: AccountValidationComponent,\n      },\n      {\n        path: 'map',\n        title: 'Explore',\n        component: MapComponent,\n      },\n      {\n        path: 'feedback',\n        canActivate: [RedirectGuard],\n        component: RedirectGuard,\n        data: {\n          externalUrl: 'https://share.hsforms.com/1xXehW6VrR0WskbHhqxsrrw3atqe',\n        },\n      },\n      {\n        path: 'help',\n        canActivate: [RedirectGuard],\n        component: RedirectGuard,\n        data: {\n          externalUrl:\n            'https://github.com/OurPlanscape/Planscape/wiki/Planscape-User-Guide',\n        },\n      },\n      {\n        path: 'plan/:id',\n        title: 'Plan Details',\n        component: PlanComponent,\n        canActivate: [AuthGuard],\n        children: [\n          {\n            path: 'config',\n            title: 'Scenario Configuration',\n            component: CreateScenariosComponent,\n          },\n          {\n            path: 'config/:id',\n            title: 'Scenario Configuration',\n            component: CreateScenariosComponent,\n          },\n          {\n            path: 'explore',\n            title: 'Explore',\n            component: ExploreComponent,\n          },\n        ],\n      },\n      {\n        path: 'explore/:id',\n        title: 'Explore Plan',\n        component: ExploreComponent,\n        canActivate: [AuthGuard],\n      },\n      {\n        path: 'account',\n        title: 'Account Details',\n        component: AccountPageComponent,\n        canActivate: [AuthGuard],\n        children: [\n          {\n            path: '',\n            redirectTo: 'information',\n            pathMatch: 'full',\n          },\n          {\n            path: 'information',\n            title: 'Edit Personal information',\n            component: DetailsComponent,\n          },\n          {\n            path: 'credentials',\n            title: 'Edit Credentials',\n            component: CredentialsComponent,\n          },\n          {\n            path: 'delete-account',\n            title: 'Deactivate Account',\n            component: DeleteAccountComponent,\n          },\n        ],\n      },\n    ],\n  },\n];\n\n@Injectable({ providedIn: 'root' })\nexport class PlanscapeTitleStrategy extends TitleStrategy {\n  constructor(private readonly title: Title) {\n    super();\n  }\n\n  override updateTitle(routerState: RouterStateSnapshot) {\n    const title = this.buildTitle(routerState);\n    if (title !== undefined) {\n      this.title.setTitle(`Planscape | ${title}`);\n    }\n  }\n}\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers: [\n    {\n      provide: TitleStrategy,\n      useClass: PlanscapeTitleStrategy,\n    },\n  ],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FeaturesModule",
            "id": "module-FeaturesModule-3097c60cd3e8b55f621912c55436e5a4d4e6e98432208ac10125e3ceb48a78b2981459149718c1b3c4ba7acf876b76caec3695439b786d3ebc162bf48e4967ce",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/features.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FeatureFlagDirective } from './feature-flag.directive';\nimport { FeatureService } from './feature.service';\nimport config from './features.json';\nimport { FEATURES_JSON } from './features-config';\n\n@NgModule({\n  declarations: [FeatureFlagDirective],\n  imports: [CommonModule],\n  providers: [FeatureService, { provide: FEATURES_JSON, useValue: config }],\n  exports: [FeatureFlagDirective],\n})\nexport class FeaturesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FeatureService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FeatureFlagDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FeatureFlagDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MapModule",
            "id": "module-MapModule-26e40cacb881556f6e2da790feb63901a56389c04fb4d8a65dafa878e2b35f6493ae35e5c5adbe7d79ff885bb5ef4f96d0909f9afe83ebcaa526ce4580d0022d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/map/map.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MapComponent } from './map.component';\nimport { LayerInfoCardComponent } from './layer-info-card/layer-info-card.component';\nimport { MapControlPanelComponent } from './map-control-panel/map-control-panel.component';\nimport { MapNameplateComponent } from './map-nameplate/map-nameplate.component';\nimport { PlanCreateDialogComponent } from './plan-create-dialog/plan-create-dialog.component';\nimport { ProjectCardComponent } from './project-card/project-card.component';\nimport { SignInDialogComponent } from './sign-in-dialog/sign-in-dialog.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { MaterialModule } from '../material/material.module';\nimport { StringifyMapConfigPipe } from '../stringify-map-config.pipe';\nimport { RegionDropdownComponent } from './region-dropdown/region-dropdown.component';\nimport { MapConfigSummaryComponent } from './map-config-summary/map-config-summary.component';\nimport { ConditionTreeComponent } from './map-control-panel/condition-tree/condition-tree.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FeaturesModule } from '../features/features.module';\nimport { OutsideRegionDialogComponent } from './outside-region-dialog/outside-region-dialog.component';\nimport { InvalidLinkDialogComponent } from './invalid-link-dialog/invalid-link-dialog.component';\n\n@NgModule({\n  declarations: [\n    MapComponent,\n    LayerInfoCardComponent,\n    MapControlPanelComponent,\n    MapNameplateComponent,\n    PlanCreateDialogComponent,\n    ProjectCardComponent,\n    SignInDialogComponent,\n    StringifyMapConfigPipe,\n    RegionDropdownComponent,\n    MapConfigSummaryComponent,\n    ConditionTreeComponent,\n    OutsideRegionDialogComponent,\n    InvalidLinkDialogComponent,\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FeaturesModule,\n  ],\n  exports: [MapComponent],\n})\nexport class MapModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConditionTreeComponent"
                        },
                        {
                            "name": "InvalidLinkDialogComponent"
                        },
                        {
                            "name": "LayerInfoCardComponent"
                        },
                        {
                            "name": "MapComponent"
                        },
                        {
                            "name": "MapConfigSummaryComponent"
                        },
                        {
                            "name": "MapControlPanelComponent"
                        },
                        {
                            "name": "MapNameplateComponent"
                        },
                        {
                            "name": "OutsideRegionDialogComponent"
                        },
                        {
                            "name": "PlanCreateDialogComponent"
                        },
                        {
                            "name": "ProjectCardComponent"
                        },
                        {
                            "name": "RegionDropdownComponent"
                        },
                        {
                            "name": "SignInDialogComponent"
                        },
                        {
                            "name": "StringifyMapConfigPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FeaturesModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MapComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-31d5c258d372cdd1e2a58d9bdfc231c951ef3f8bf642a399a898c9e4454e010dfc82db36581a52136639112b0cbf820013bac573c498b63aaa471009fe59d2c8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/material/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatLegacyButtonModule as MatButtonModule } from '@angular/material/legacy-button';\nimport { MatLegacyCardModule as MatCardModule } from '@angular/material/legacy-card';\nimport { MatLegacyCheckboxModule as MatCheckboxModule } from '@angular/material/legacy-checkbox';\nimport { MatLegacyChipsModule as MatChipsModule } from '@angular/material/legacy-chips';\nimport { MatLegacyDialogModule as MatDialogModule } from '@angular/material/legacy-dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatLegacyFormFieldModule as MatFormFieldModule } from '@angular/material/legacy-form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatLegacyInputModule as MatInputModule } from '@angular/material/legacy-input';\nimport { MatLegacyListModule as MatListModule } from '@angular/material/legacy-list';\nimport { MatLegacyMenuModule as MatMenuModule } from '@angular/material/legacy-menu';\nimport { MatLegacyPaginatorModule as MatPaginatorModule } from '@angular/material/legacy-paginator';\nimport { MatLegacyProgressSpinnerModule as MatProgressSpinnerModule } from '@angular/material/legacy-progress-spinner';\nimport { MatLegacyRadioModule as MatRadioModule } from '@angular/material/legacy-radio';\nimport { MatLegacySelectModule as MatSelectModule } from '@angular/material/legacy-select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatLegacySliderModule as MatSliderModule } from '@angular/material/legacy-slider';\nimport { MatLegacySlideToggleModule as MatSlideToggleModule } from '@angular/material/legacy-slide-toggle';\nimport { MatLegacySnackBarModule as MatSnackBarModule } from '@angular/material/legacy-snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatLegacyTableModule as MatTableModule } from '@angular/material/legacy-table';\nimport { MatLegacyTabsModule as MatTabsModule } from '@angular/material/legacy-tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatLegacyTooltipModule as MatTooltipModule } from '@angular/material/legacy-tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatPaginatorModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatStepperModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n  ],\n})\nexport class MaterialModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PlanModule",
            "id": "module-PlanModule-b2c4a42db2df0d90497d28354430b07ff37209f9ca596ba65695ebf69c3983fb560d56f7320d7efabac5d3d74783fc2e79f1feae36c90158dfc42f4d4c37af35",
            "description": "<p>Components used in the plan flow.</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/plan/plan.module.ts",
            "methods": [],
            "sourceCode": "import { AreaDetailsComponent } from './area-details/area-details.component';\nimport { AreaNotesComponent } from './area-notes/area-notes.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { ConstraintsPanelComponent } from './create-scenarios/constraints-panel/constraints-panel.component';\nimport { CreateScenariosComponent } from './create-scenarios/create-scenarios.component';\nimport { ExploreComponent } from './explore/explore/explore.component';\nimport { FeaturesModule } from '../features/features.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientXsrfModule } from '@angular/common/http';\nimport { IdentifyProjectAreasComponent } from './create-scenarios/identify-project-areas/identify-project-areas.component';\nimport { MapModule } from '../map/map.module';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MaterialModule } from 'src/app/material/material.module';\nimport { NgChartsModule } from 'ng2-charts';\nimport { NgModule } from '@angular/core';\nimport { NgxMaskModule } from 'ngx-mask';\nimport { PlanComponent } from './plan.component';\nimport { PlanMapComponent } from './plan-map/plan-map.component';\nimport { PlanNavigationBarComponent } from './plan-navigation-bar/plan-navigation-bar.component';\nimport { PlanOverviewComponent } from './plan-summary/plan-overview/plan-overview.component';\nimport { ProjectAreasComponent } from './project-areas/project-areas.component';\nimport { ProjectAreasMetricsComponent } from './project-areas-metrics/project-areas-metrics.component';\nimport { ReportChartComponent } from './report-chart/report-chart.component';\nimport { ResourceUnavailableComponent } from './resource-unavailable/resource-unavailable.component';\nimport { RouterModule } from '@angular/router';\nimport { SavedScenariosComponent } from './plan-summary/saved-scenarios/saved-scenarios.component';\nimport { ScenarioFailureComponent } from './scenario-failure/scenario-failure.component';\nimport { ScenarioNotStartedComponent } from './scenario-not-started/scenario-not-started.component';\nimport { ScenarioPendingComponent } from './scenario-pending/scenario-pending.component';\nimport { ScenarioResultsComponent } from './scenario-results/scenario-results.component';\nimport { ScenarioTooltipComponent } from './create-scenarios/tooltips/scenario-tooltip.component';\nimport { ScenariosTableListComponent } from './plan-summary/scenarios-table-list/scenarios-table-list.component';\nimport { SetPrioritiesComponent } from './create-scenarios/set-priorities/set-priorities.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { SummaryPanelComponent } from './plan-summary/summary-panel/summary-panel.component';\nimport { WINDOW_PROVIDERS } from '@services/window.service';\nimport { GoalOverlayComponent } from './create-scenarios/goal-overlay/goal-overlay.component';\nimport { DeleteNoteDialogComponent } from './delete-note-dialog/delete-note-dialog.component';\n\n/** Components used in the plan flow. */\n@NgModule({\n  declarations: [\n    AreaDetailsComponent,\n    AreaNotesComponent,\n    ConstraintsPanelComponent,\n    CreateScenariosComponent,\n    ExploreComponent,\n    IdentifyProjectAreasComponent,\n    PlanComponent,\n    PlanMapComponent,\n    PlanNavigationBarComponent,\n    PlanOverviewComponent,\n    ProjectAreasComponent,\n    ProjectAreasMetricsComponent,\n    ReportChartComponent,\n    ResourceUnavailableComponent,\n    SavedScenariosComponent,\n    ScenarioFailureComponent,\n    ScenarioNotStartedComponent,\n    ScenarioPendingComponent,\n    ScenarioResultsComponent,\n    ScenarioTooltipComponent,\n    ScenariosTableListComponent,\n    SetPrioritiesComponent,\n    SummaryPanelComponent,\n    GoalOverlayComponent,\n    DeleteNoteDialogComponent,\n  ],\n  providers: [WINDOW_PROVIDERS],\n  imports: [\n    BrowserAnimationsModule,\n    CommonModule,\n    FormsModule,\n    FeaturesModule,\n    HttpClientXsrfModule.withOptions({\n      cookieName: 'csrftoken',\n      headerName: 'X-CSRFToken',\n    }),\n    MapModule,\n    MatButtonToggleModule,\n    MaterialModule,\n    NgChartsModule,\n    NgxMaskModule.forRoot(),\n    ReactiveFormsModule,\n    RouterModule,\n    SharedModule,\n  ],\n})\nexport class PlanModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AreaDetailsComponent"
                        },
                        {
                            "name": "AreaNotesComponent"
                        },
                        {
                            "name": "ConstraintsPanelComponent"
                        },
                        {
                            "name": "CreateScenariosComponent"
                        },
                        {
                            "name": "DeleteNoteDialogComponent"
                        },
                        {
                            "name": "ExploreComponent"
                        },
                        {
                            "name": "GoalOverlayComponent"
                        },
                        {
                            "name": "IdentifyProjectAreasComponent"
                        },
                        {
                            "name": "PlanComponent"
                        },
                        {
                            "name": "PlanMapComponent"
                        },
                        {
                            "name": "PlanNavigationBarComponent"
                        },
                        {
                            "name": "PlanOverviewComponent"
                        },
                        {
                            "name": "ProjectAreasComponent"
                        },
                        {
                            "name": "ProjectAreasMetricsComponent"
                        },
                        {
                            "name": "ReportChartComponent"
                        },
                        {
                            "name": "ResourceUnavailableComponent"
                        },
                        {
                            "name": "SavedScenariosComponent"
                        },
                        {
                            "name": "ScenarioFailureComponent"
                        },
                        {
                            "name": "ScenarioNotStartedComponent"
                        },
                        {
                            "name": "ScenarioPendingComponent"
                        },
                        {
                            "name": "ScenarioResultsComponent"
                        },
                        {
                            "name": "ScenarioTooltipComponent"
                        },
                        {
                            "name": "ScenariosTableListComponent"
                        },
                        {
                            "name": "SetPrioritiesComponent"
                        },
                        {
                            "name": "SummaryPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FeaturesModule"
                        },
                        {
                            "name": "MapModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-13546638a25eeb3f665f21cce8ea227895d1984a95bf62b2826de5f5431b3872d79276814c62118810672eb7a1df7d6bd2dcee6354a059c7f80929a68f50cd10",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from 'src/app/material/material.module';\n\nimport { FileUploaderComponent } from './file-uploader/file-uploader.component';\nimport { OpacitySliderComponent } from './opacity-slider/opacity-slider.component';\nimport { NavBarComponent } from './nav-bar/nav-bar.component';\nimport { FeaturesModule } from '../features/features.module';\nimport { RouterLink } from '@angular/router';\nimport { CurrencyInKPipe } from '../pipes/currency-in-k.pipe';\nimport { TypeSafeMatCellDef } from './type-safe-mat-cell/type-safe-mat-cell-def.directive';\nimport { FieldAlertComponent } from './field-alert/field-alert.component';\nimport { CreditsBlurbComponent } from './credits-blurb/credits-blurb.component';\nimport { FormMessageBoxComponent } from './form-message-box/form-message-box.component';\nimport { ShareExploreDialogComponent } from './share-explore-dialog/share-explore-dialog.component';\nimport { SectionLoaderComponent } from './section-loader/section-loader.component';\n\n@NgModule({\n  declarations: [\n    FileUploaderComponent,\n    OpacitySliderComponent,\n    NavBarComponent,\n    CurrencyInKPipe,\n    TypeSafeMatCellDef,\n    FieldAlertComponent,\n    CreditsBlurbComponent,\n    FormMessageBoxComponent,\n    ShareExploreDialogComponent,\n    SectionLoaderComponent,\n  ],\n  exports: [\n    FileUploaderComponent,\n    OpacitySliderComponent,\n    NavBarComponent,\n    CurrencyInKPipe,\n    TypeSafeMatCellDef,\n    FieldAlertComponent,\n    CreditsBlurbComponent,\n    FormMessageBoxComponent,\n    SectionLoaderComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    ReactiveFormsModule,\n    FeaturesModule,\n    RouterLink,\n  ],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CreditsBlurbComponent"
                        },
                        {
                            "name": "CurrencyInKPipe"
                        },
                        {
                            "name": "FieldAlertComponent"
                        },
                        {
                            "name": "FileUploaderComponent"
                        },
                        {
                            "name": "FormMessageBoxComponent"
                        },
                        {
                            "name": "NavBarComponent"
                        },
                        {
                            "name": "OpacitySliderComponent"
                        },
                        {
                            "name": "SectionLoaderComponent"
                        },
                        {
                            "name": "ShareExploreDialogComponent"
                        },
                        {
                            "name": "TypeSafeMatCellDef"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FeaturesModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "RouterLink"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CreditsBlurbComponent"
                        },
                        {
                            "name": "CurrencyInKPipe"
                        },
                        {
                            "name": "FieldAlertComponent"
                        },
                        {
                            "name": "FileUploaderComponent"
                        },
                        {
                            "name": "FormMessageBoxComponent"
                        },
                        {
                            "name": "NavBarComponent"
                        },
                        {
                            "name": "OpacitySliderComponent"
                        },
                        {
                            "name": "SectionLoaderComponent"
                        },
                        {
                            "name": "TypeSafeMatCellDef"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BackendConstants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/backend-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  END_POINT: environment.backend_endpoint,\n  TILES_END_POINT: environment.tile_endpoint,\n  DOWNLOAD_END_POINT: environment.download_endpoint,\n} as const"
            },
            {
                "name": "BOUNDARY_LAYER_HOVER_STYLES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "L.PathOptions",
                "defaultValue": "{\n  weight: 5,\n  color: '#0000ff',\n  fillOpacity: 0.5,\n  fill: true,\n}"
            },
            {
                "name": "BOUNDARY_LAYER_NORMAL_STYLES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "L.PathOptions",
                "defaultValue": "{\n  weight: 1,\n  color: '#0000ff',\n  fillOpacity: 0,\n  fill: true,\n}"
            },
            {
                "name": "browserWindowProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/window.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ClassProvider",
                "defaultValue": "{\n  provide: WindowRef,\n  useClass: BrowserWindowRef,\n}"
            },
            {
                "name": "colorTransitionTrigger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(params: {\n  triggerName: string;\n  colorA: string;\n  colorB: string;\n  timingA: string;\n  timingB: string;\n}) =>\n  trigger(params.triggerName, [\n    state(\n      'colorA',\n      style({\n        backgroundColor: params.colorA,\n      })\n    ),\n    state(\n      'colorB',\n      style({\n        backgroundColor: params.colorB,\n      })\n    ),\n    transition('colorA => colorB', [animate(params.timingA)]),\n    transition('colorB => colorA', [animate(params.timingB)]),\n  ])"
            },
            {
                "name": "conditionScoreColorMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/plan/plan-summary/summary-panel/summary-panel.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<ConditionName, string>",
                "defaultValue": "{\n  [ConditionName.GOOD]: '#010108',\n  [ConditionName.LEANING_GOOD]: '#4c1761',\n  [ConditionName.NEUTRAL]: '#b1354c',\n  [ConditionName.LEANING_POOR]: '#F4511e',\n  [ConditionName.POOR]: '#fdd853',\n}"
            },
            {
                "name": "createFeatureGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/feature.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanMatchFn | CanActivateFn",
                "defaultValue": "(featureName: string) => () => {\n  const featureService = inject(FeatureService);\n  const router = inject(Router);\n\n  if (featureService.isFeatureEnabled(featureName)) return true;\n\n  // Redirect to the default page.\n  return router.parseUrl('');\n}",
                "rawdescription": "Guard for a route based on whether a feature flag is enabled.",
                "description": "<p>Guard for a route based on whether a feature flag is enabled.</p>\n"
            },
            {
                "name": "CURRENT_CONDITIONS_NORMALIZED_LEGEND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Current Condition (Normalized)'"
            },
            {
                "name": "CURRENT_CONDITIONS_RAW_LEGEND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Current Condition (Raw)'",
                "rawdescription": "Map Legend Display Strings",
                "description": "<p>Map Legend Display Strings</p>\n"
            },
            {
                "name": "customErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/plan/create-scenarios/constraints-panel/constraints-panel.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<\"notEnoughBudget\" | \"budgetOrAreaRequired\", string>",
                "defaultValue": "{\n    notEnoughBudget: 'notEnoughBudget',\n    budgetOrAreaRequired: 'budgetOrAreaRequired',\n  }"
            },
            {
                "name": "DEFAULT_AREA_COLOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'#4965c7'"
            },
            {
                "name": "DEFAULT_COLORMAP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/legend.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'turbo'"
            },
            {
                "name": "DRAWING_STYLES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "L.PathOptions",
                "defaultValue": "{\n  color: '#000',\n  fillColor: '#A5C8D7',\n  fillOpacity: 0.25,\n  weight: 2,\n}"
            },
            {
                "name": "EMAIL_VALIDATION_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[\\w+\\.-]+@[\\w+\\.-]+\\.[a-zA-Z]{2,}$/"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.dev.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  backend_endpoint: 'http://localhost:8000/planscape-backend',\n  google_analytics_id: '', // Replace with actual ID.\n  tile_endpoint: 'https://dev-geo.planscape.org/geoserver/', // Replace with actual URL\n  download_endpoint: '', // Replace with actual URL\n  arcgis_key:\n    'AAPK99ed994ee61d4de9812fec68db9793b5Rk3xwmAsyzkMhbz9f_GD-vCLuPHGDI6Tq08BbqObksxFOATs8HT-wELngE-cnLZy',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  backend_endpoint: 'http://localhost:8000/planscape-backend',\n  google_analytics_id: '', // Replace with actual ID.\n  tile_endpoint: '', // Replace with actual URL\n  download_endpoint: '', // Replace with actual URL\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  backend_endpoint: 'http://localhost:8000/planscape-backend',\n  google_analytics_id: '', // Replace with actual ID.\n  tile_endpoint: '', // Replace with actual URL\n  download_endpoint: '', // Replace with actual URL\n}"
            },
            {
                "name": "EXCLUDED_AREAS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { label: 'National Forests', key: 'NATIONAL_FORESTS' },\n  { label: 'National Parks', key: 'NATIONAL_PARKS' },\n  { label: 'Private Land', key: 'PRIVATE_LANDS' },\n  { label: 'State Parks', key: 'STATE_PARKS' },\n  { label: 'Tribal Lands', key: 'TRIBAL_LANDS' },\n  { label: 'Wilderness Area', key: 'WILDERNESS_AREA' },\n]"
            },
            {
                "name": "expandCollapsePanelTrigger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('expandCollapsePanel', [\n  state(\n    'expanded',\n    style({\n      backgroundColor: 'white',\n      padding: '*',\n      maxWidth: '700px',\n    })\n  ),\n  state(\n    'collapsed',\n    style({\n      backgroundColor: '#ebebeb',\n      width: '36px',\n    })\n  ),\n  transition('expanded => collapsed', [\n    group([\n      query('@expandCollapseButton', animateChild()),\n      query('@expandCollapsePanelContent', animateChild()),\n      animate('300ms 100ms ease-out'),\n    ]),\n  ]),\n  transition('collapsed => expanded', [\n    group([\n      query('@expandCollapseButton', animateChild()),\n      query('@expandCollapsePanelContent', animateChild()),\n      animate('250ms ease-out'),\n    ]),\n  ]),\n])"
            },
            {
                "name": "FEATURES_JSON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/features-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>('features_json')"
            },
            {
                "name": "FrontendConstants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  MAP_INITIAL_ZOOM: 9,\n  MAP_MIN_ZOOM: 7,\n  MAP_MAX_ZOOM: 13,\n  MAP_DATA_LAYER_OPACITY: 0.7,\n} as const"
            },
            {
                "name": "FUTURE_CONDITIONS_LEGEND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Future Climate Stability (Normalized)'"
            },
            {
                "name": "GEOMAN_DRAW_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "L.PM.ToolbarOptions",
                "defaultValue": "{\n  cutPolygon: false,\n  drawCircle: false,\n  drawMarker: false,\n  drawCircleMarker: false,\n  drawPolyline: false,\n  drawRectangle: false,\n  drawText: false,\n  rotateMode: false,\n  position: 'bottomright',\n}"
            },
            {
                "name": "HOVER_STYLES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "L.PathOptions",
                "defaultValue": "{\n  color: '#ff0000',\n  weight: 5,\n  opacity: 0.9,\n}"
            },
            {
                "name": "LEGEND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  labels: [\n    'Highest',\n    'Higher',\n    'High',\n    'Mid-high',\n    'Mid-low',\n    'Low',\n    'Lower',\n    'Lowest',\n  ],\n  colors: [\n    '#f65345',\n    '#e9884f',\n    '#e5ab64',\n    '#e6c67a',\n    '#cccfa7',\n    '#a5c5a6',\n    '#74afa5',\n    '#508295',\n  ],\n}"
            },
            {
                "name": "MAX_AREA_PERCENTAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/validators/scenarios.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0.8"
            },
            {
                "name": "MIN_AREA_PERCENTAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/validators/scenarios.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0.2"
            },
            {
                "name": "MOCK_PLAN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Plan",
                "defaultValue": "{\n  id: 1,\n  name: 'mock plan',\n  user: 2,\n  region_name: Region.SIERRA_NEVADA,\n  geometry: {\n    type: 'FeatureCollection',\n    features: [],\n  },\n  area_acres: 123,\n  area_m2: 345,\n  creator: 'John Plans',\n  created_at: '2024-03-05T18:08:40.503963Z',\n  latest_updated: '2024-03-05T18:08:40.503963Z',\n  permissions: [],\n  scenario_count: 0,\n  role: 'Creator',\n}"
            },
            {
                "name": "MSG_RESET_PASSWORD_ERROR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Unable to reset your password at this time. Please try again later.'"
            },
            {
                "name": "NAMEPLATE_RIGHT_MARGIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map-nameplate/map-nameplate.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "16"
            },
            {
                "name": "NONE_BOUNDARY_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/data.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BoundaryConfig",
                "defaultValue": "{\n  boundary_name: '',\n  display_name: 'None',\n  vector_name: '',\n  shape_name: 'None',\n}"
            },
            {
                "name": "NONE_COLORMAP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/legend.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'none'"
            },
            {
                "name": "NONE_DATA_LAYER_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/data.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DataLayerConfig",
                "defaultValue": "{\n  display_name: 'None',\n  filepath: '',\n  layer: '',\n  colormap: NONE_COLORMAP,\n}"
            },
            {
                "name": "NORMAL_STYLES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "L.PathOptions",
                "defaultValue": "{\n  color: '#000000',\n  weight: 1,\n  opacity: 0.5,\n}"
            },
            {
                "name": "NOTE_SAVE_INTERVAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/plan/plan-helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "5000"
            },
            {
                "name": "opacityTransitionTrigger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(params: {\n  triggerName: string;\n  timingA: string;\n  timingB: string;\n}) =>\n  trigger(params.triggerName, [\n    state(\n      'opaque',\n      style({\n        opacity: 1,\n      })\n    ),\n    state(\n      'transparent',\n      style({\n        opacity: 0,\n      })\n    ),\n    transition('opaque => transparent', [animate(params.timingA)]),\n    transition('transparent => opaque', [animate(params.timingB)]),\n  ])"
            },
            {
                "name": "passwordResetTokenResolver",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/password-reset.resolver.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ResolveFn<PasswordResetToken | null>",
                "defaultValue": "(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n  const userId = route.paramMap.get('userId');\n  const token = route.paramMap.get('token');\n  if (!userId || !token) {\n    inject(Router).navigate(['reset']);\n  }\n  const passwordResetToken = {\n    userId: userId || '',\n    token: token || '',\n  };\n  return inject(AuthService)\n    .validatePasswordResetToken(passwordResetToken)\n    .pipe(\n      map((_) => {\n        return passwordResetToken;\n      }),\n      catchError((error: Error) => {\n        return of(null);\n      })\n    );\n}",
                "rawdescription": "Resolver to validate the password reset token.",
                "description": "<p>Resolver to validate the password reset token.</p>\n"
            },
            {
                "name": "POLLING_INTERVAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/plan/plan-helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "3000"
            },
            {
                "name": "PROJECT_AREA_COLORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  '#FAD648',\n  '#FF9E58',\n  '#BCC3FF',\n  '#27C5F5',\n  '#FFC2C2',\n  '#FEDEBE',\n  '#B9D4FF',\n  '#FDE3FF',\n  '#7BC7B9',\n  '#7F95FF',\n]"
            },
            {
                "name": "redirectResolver",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/redirect.resolver.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ResolveFn<string | boolean>",
                "defaultValue": "(\n  route: ActivatedRouteSnapshot\n) => {\n  const redirect = route.queryParams['redirect'] as string;\n  if (redirect) {\n    inject(RedirectService).setRedirect(redirect);\n    return redirect;\n  }\n  return false;\n}"
            },
            {
                "name": "regions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/region.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Region[]",
                "defaultValue": "[\n  Region.SIERRA_NEVADA,\n  Region.SOUTHERN_CALIFORNIA,\n  Region.CENTRAL_COAST,\n  Region.NORTHERN_CALIFORNIA,\n]"
            },
            {
                "name": "regionToGeojsonMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/map.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<Region, Record<string, string>>",
                "defaultValue": "{\n  [Region.SIERRA_NEVADA]: {\n    boundary: 'assets/geojson/sierra_nevada_region.geojson',\n  },\n  [Region.CENTRAL_COAST]: {\n    boundary: 'assets/geojson/central_coast_region.geojson',\n  },\n  [Region.NORTHERN_CALIFORNIA]: {\n    boundary: 'assets/geojson/northern_california_region.geojson',\n  },\n  [Region.SOUTHERN_CALIFORNIA]: {\n    boundary: 'assets/geojson/southern_california_region.geojson',\n  },\n}",
                "rawdescription": "A map of Region to static assets for that region.",
                "description": "<p>A map of Region to static assets for that region.</p>\n"
            },
            {
                "name": "Roles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/share-plan-dialog/share-plan-dialog.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<INVITE_ROLE, INVITE_ROLE>",
                "defaultValue": "{\n  Viewer: 'Viewer',\n  Collaborator: 'Collaborator',\n  Owner: 'Owner',\n}"
            },
            {
                "name": "SESSION_SAVE_INTERVAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/session.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "600",
                "rawdescription": "How often the user's session should be saved to local storage (in ms).",
                "description": "<p>How often the user&#39;s session should be saved to local storage (in ms).</p>\n"
            },
            {
                "name": "SNACK_BOTTOM_NOTICE_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MatSnackBarConfig<any>",
                "defaultValue": "{\n  duration: 4000,\n  panelClass: ['snackbar-notice'],\n  verticalPosition: 'bottom',\n}"
            },
            {
                "name": "SNACK_ERROR_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MatSnackBarConfig<any>",
                "defaultValue": "{\n  duration: 10000,\n  panelClass: ['snackbar-error'],\n  verticalPosition: 'top',\n}"
            },
            {
                "name": "SNACK_NOTICE_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MatSnackBarConfig<any>",
                "defaultValue": "{\n  duration: 4000,\n  panelClass: ['snackbar-notice'],\n  verticalPosition: 'top',\n}"
            },
            {
                "name": "SQUARE_METERS_PER_ACRE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/plan/plan-helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0.0002471054"
            },
            {
                "name": "STAND_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/plan/plan-helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['SMALL', 'MEDIUM', 'LARGE']"
            },
            {
                "name": "WINDOW",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/window.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Window>('WindowToken')",
                "rawdescription": "Window service\nThis service provides a way of getting the window object via a dependency injection\nThis allows to mock and provide the window object as well as applying best practices.\n\nHow it works?\nThe main idea is to provide a token when using window instead of referencing window object directly.\n\nAvoid this:\n\n```\nexport class YourComponent {\n\n  getAgent() {\n    window.navigator.userAgent;\n  }\n}\n```\n\nUse this instead:\n\n```\nexport class YourComponent {\n\n constructor(@Inject(WINDOW) private window: Window)\n\n  getAgent() {\n    this.window.navigator.userAgent;\n  }\n}\n```\n\n\nThere are several ways of implementing this idea, this one is taken from\nhttps://brianflove.com/2018-01-11/angular-window-provider/\n\n\nTesting\n\nYou can provide a mock of the window object when declaring your test module\n\nawait TestBed.configureTestingModule({\n      declarations: [YourComponent],\n      providers: [\n        {\n          provide: WINDOW,\n          useValue: { YourWindowMock },\n        },\n      ],\n    }).compileComponents();\n\n\nAnd then get the window reference on your tests\n\n```\nconst window = TestBed.inject(WINDOW);\n```",
                "description": "<p>Window service\nThis service provides a way of getting the window object via a dependency injection\nThis allows to mock and provide the window object as well as applying best practices.</p>\n<p>How it works?\nThe main idea is to provide a token when using window instead of referencing window object directly.</p>\n<p>Avoid this:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">export class YourComponent {\n\n  getAgent() {\n    window.navigator.userAgent;\n  }\n}</code></pre></div><p>Use this instead:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">export class YourComponent {\n\n constructor(&#64;Inject(WINDOW) private window: Window)\n\n  getAgent() {\n    this.window.navigator.userAgent;\n  }\n}</code></pre></div><p>There are several ways of implementing this idea, this one is taken from\n<a href=\"https://brianflove.com/2018-01-11/angular-window-provider/\">https://brianflove.com/2018-01-11/angular-window-provider/</a></p>\n<p>Testing</p>\n<p>You can provide a mock of the window object when declaring your test module</p>\n<p>await TestBed.configureTestingModule({\n      declarations: [YourComponent],\n      providers: [\n        {\n          provide: WINDOW,\n          useValue: { YourWindowMock },\n        },\n      ],\n    }).compileComponents();</p>\n<p>And then get the window reference on your tests</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">const window = TestBed.inject(WINDOW);</code></pre></div>"
            },
            {
                "name": "WINDOW_PROVIDERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/window.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[browserWindowProvider, windowProvider]"
            },
            {
                "name": "windowProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/window.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FactoryProvider",
                "defaultValue": "{\n  provide: WINDOW,\n  useFactory: windowFactory,\n  deps: [WindowRef, PLATFORM_ID],\n}"
            }
        ],
        "functions": [
            {
                "name": "addClonedLayerToMap",
                "file": "src/app/map/map.layers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "layer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "addGeoJSONToMap",
                "file": "src/app/map/map.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "lGeoJson",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mapInstance",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "lGeoJson",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapInstance",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "addRegionLayer",
                "file": "src/app/map/map.layers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boundary",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boundary",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "areaOverlaps",
                "file": "src/app/map/map.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "editedLayer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "existingPolygon",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "editedLayer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "existingPolygon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calculateAcres",
                "file": "src/app/plan/plan-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": true,
                "deprecationMessage": "do not use",
                "description": "",
                "args": [
                    {
                        "name": "planningArea",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 613,
                            "end": 625,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "planningArea"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 607,
                            "end": 612,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            {
                "name": "calculateMaxArea",
                "file": "src/app/validators/scenarios.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "planningArea",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "planningArea",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calculateMinArea",
                "file": "src/app/validators/scenarios.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "planningArea",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "planningArea",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calculateMinBudget",
                "file": "src/app/validators/scenarios.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "planningAreaAcres",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "estCostPerAcre",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "planningAreaAcres",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "estCostPerAcre",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "canAddScenario",
                "file": "src/app/plan/permissions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "plan",
                        "type": "Plan",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "plan",
                        "type": "Plan",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "canDeletePlanningArea",
                "file": "src/app/plan/permissions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "plan",
                        "type": "Plan",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "user",
                        "type": "User",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "plan",
                        "type": "Plan",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "user",
                        "type": "User",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "canViewCollaborators",
                "file": "src/app/plan/permissions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "plan",
                        "type": "Plan",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "plan",
                        "type": "Plan",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "changeMapBaseStyle",
                "file": "src/app/map/map.tiles.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "checkIfAreaInBoundaries",
                "file": "src/app/map/map.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "area",
                        "type": "FeatureCollection",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boundaries",
                        "type": "Feature",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "area",
                        "type": "FeatureCollection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boundaries",
                        "type": "Feature",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "checkIfMultipolygonOverlaps",
                "file": "src/app/map/map.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "feature",
                        "type": "Feature",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boundaries",
                        "type": "Feature",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "feature",
                        "type": "Feature",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boundaries",
                        "type": "Feature",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "colormapConfigToLegend",
                "file": "src/app/types/legend.types.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Convert a colormap to a legend object.</p>\n",
                "args": [
                    {
                        "name": "colormap",
                        "type": "ColormapConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "minMaxValues",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Legend | undefined",
                "jsdoctags": [
                    {
                        "name": "colormap",
                        "type": "ColormapConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "minMaxValues",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "conditionsConfigToPriorityData",
                "file": "src/app/plan/plan-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ConditionsConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "PriorityRow[]",
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ConditionsConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createAndAddLegend",
                "file": "src/app/map/map.legends.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "colormap",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataUnit",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "colormap",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataUnit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createDrawingLayer",
                "file": "src/app/map/map.layers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "planningAreaData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "planningAreaData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createLegendHtmlElement",
                "file": "src/app/map/map.legends.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "colormap",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataUnit",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "colormap",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataUnit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createMultiPolygonFeatureCollection",
                "file": "src/app/map/map.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "featureCollection",
                        "type": "FeatureCollection",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "featureCollection",
                        "type": "FeatureCollection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createRegionLayer",
                "file": "src/app/map/map.layers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "boundaries",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "boundaries",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "defaultMapConfig",
                "file": "src/app/map/map.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "MapConfig"
            },
            {
                "name": "defaultMapConfigsDictionary",
                "file": "src/app/map/map.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Record<Region, MapConfig[]>"
            },
            {
                "name": "defaultMapViewOptions",
                "file": "src/app/map/map.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "MapViewOptions"
            },
            {
                "name": "findQuestionOnTreatmentGoalsConfig",
                "file": "src/app/plan/plan-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "treatmentGoalConfigs",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treatmentQuestion",
                        "type": "TreatmentQuestionConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "treatmentGoalConfigs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treatmentQuestion",
                        "type": "TreatmentQuestionConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getColorForProjectPosition",
                "file": "src/app/plan/plan-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "position",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1640,
                            "end": 1648,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "position"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1634,
                            "end": 1639,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>rank position (1 based index) of scenario projection</p>\n"
                    }
                ]
            },
            {
                "name": "getMapNameplateWidth",
                "file": "src/app/map/map.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number | null",
                "jsdoctags": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getPlanPath",
                "file": "src/app/plan/plan-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "planId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "planId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hasEnoughBudget",
                "file": "src/app/validators/scenarios.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "planningAreaAcres",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "estCostPerAcre",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maxCost",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "planningAreaAcres",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "estCostPerAcre",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "maxCost",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hideRegionLayer",
                "file": "src/app/map/map.layers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "parseResultsToProjectAreas",
                "file": "src/app/plan/plan-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "results",
                        "type": "ScenarioResult",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ProjectAreaReport[]",
                "jsdoctags": [
                    {
                        "name": "results",
                        "type": "ScenarioResult",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "parseResultsToTotals",
                "file": "src/app/plan/plan-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "areaReports",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ProjectTotalReport",
                "jsdoctags": [
                    {
                        "name": "areaReports",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "passwordMustBeNewValidator",
                "file": "src/app/validators/passwords.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Validates that the current password is not the same as the new one</p>\n",
                "args": [
                    {
                        "name": "currentPasswordFieldName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "passwordFieldName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 306,
                            "end": 330,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "currentPasswordFieldName"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 300,
                            "end": 305,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>the name of the current password formControl element on the form</p>\n"
                    },
                    {
                        "name": {
                            "pos": 406,
                            "end": 423,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "passwordFieldName"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 400,
                            "end": 405,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>the name of the new password formControl element on the form</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 489,
                            "end": 495,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "return"
                        },
                        "comment": "<p>if error returns <code>newPasswordMustBeNew: true</code>. Will additionally mark with the error the field with passwordFieldName</p>\n"
                    }
                ]
            },
            {
                "name": "passwordsMustMatchValidator",
                "file": "src/app/validators/passwords.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Validates the format of the password and that it matches the password confirmation</p>\n",
                "args": [
                    {
                        "name": "passwordFieldName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "passwordConfirmFieldName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1433,
                            "end": 1450,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "passwordFieldName"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1427,
                            "end": 1432,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>the name of the new password formControl element on the form</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1522,
                            "end": 1546,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "passwordConfirmFieldName"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1516,
                            "end": 1521,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>the name of the new password confirmation formControl element on the form</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 1625,
                            "end": 1631,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "return"
                        },
                        "comment": "<p>if error returns <code>newPasswordsMustMatch: true</code></p>\n"
                    }
                ]
            },
            {
                "name": "regionMapCenters",
                "file": "src/app/map/map.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "region",
                        "type": "Region",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "L.LatLngTuple",
                "jsdoctags": [
                    {
                        "name": "region",
                        "type": "Region",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "regionToString",
                "file": "src/app/types/region.types.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "region",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "region",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "removeClonedLayer",
                "file": "src/app/map/map.layers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "layer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deleteOriginal",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deleteOriginal",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "satelliteTiles",
                "file": "src/app/map/map.tiles.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a basemap layer using the Esri.WorldImagery tiles.</p>\n",
                "args": []
            },
            {
                "name": "scenarioNameMustBeNew",
                "file": "src/app/plan/create-scenarios/create-scenarios.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "nameControl",
                        "type": "AbstractControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "existingNames",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type | null",
                "jsdoctags": [
                    {
                        "name": "nameControl",
                        "type": "AbstractControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "existingNames",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "showRegionLayer",
                "file": "src/app/map/map.layers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "stadiaAlidadeTiles",
                "file": "src/app/map/map.tiles.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a basemap layer using the Stadia.AlidadeSmooth tiles.</p>\n",
                "args": []
            },
            {
                "name": "terrainTiles",
                "file": "src/app/map/map.tiles.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a basemap layer using the Esri.WorldTerrain tiles.</p>\n",
                "args": []
            },
            {
                "name": "transformCoordToLayer",
                "file": "src/app/map/map.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "coord",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "coord",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "updateLegendWithColorMap",
                "file": "src/app/map/map.legends.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colormap",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "minMaxValues",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colormap",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "minMaxValues",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "windowFactory",
                "file": "src/app/services/window.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "browserWindowRef",
                        "type": "BrowserWindowRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Window | Object",
                "jsdoctags": [
                    {
                        "name": "browserWindowRef",
                        "type": "BrowserWindowRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AvailableUserFields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/account/edit-user-field/edit-user-field.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 198
            },
            {
                "name": "ButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"ghost\" | \"text\" | \"negative\" | \"positive\"",
                "file": "src/stories/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "INVITE_ROLE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Viewer\" | \"Collaborator\" | \"Owner\"",
                "file": "src/app/types/invite.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "PreviewPlan",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<Plan | \"geometry\" | \"area_m2\">",
                "file": "src/app/types/plan.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "SCENARIO_STATUS",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"ACTIVE\" | \"ARCHIVED\"",
                "file": "src/app/types/scenario.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ScenarioResultStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"LOADING\" | \"NOT_STARTED\" | \"PENDING\" | \"RUNNING\" | \"SUCCESS\" | \"FAILURE\" | \"PANIC\" | \"TIMED_OUT\"",
                "file": "src/app/types/scenario.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "State",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"view\" | \"editing\" | \"saving\"",
                "file": "src/app/account/change-password/change-password.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "State",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"view\" | \"editing\" | \"saving\" | \"error\"",
                "file": "src/app/account/edit-user-field/edit-user-field.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "AreaCreationAction",
                "childs": [
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "DRAW",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "UPLOAD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/map/map.constants.ts"
            },
            {
                "name": "BaseLayerType",
                "childs": [
                    {
                        "name": "Road",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Terrain",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Satellite",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/types/layer.types.ts"
            },
            {
                "name": "ConditionName",
                "childs": [
                    {
                        "name": "GOOD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Good"
                    },
                    {
                        "name": "LEANING_GOOD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Leaning good"
                    },
                    {
                        "name": "NEUTRAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Neutral"
                    },
                    {
                        "name": "LEANING_POOR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Leaning poor"
                    },
                    {
                        "name": "POOR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Poor"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/plan/plan-summary/summary-panel/summary-panel.component.ts"
            },
            {
                "name": "ConditionTreeType",
                "childs": [
                    {
                        "name": "RAW",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Raw"
                    },
                    {
                        "name": "TRANSLATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Translated"
                    },
                    {
                        "name": "FUTURE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Future"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/types/data.types.ts"
            },
            {
                "name": "FormMessageType",
                "childs": [
                    {
                        "name": "SUCCESS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ERROR",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ALERT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/types/data.types.ts"
            },
            {
                "name": "Region",
                "childs": [
                    {
                        "name": "SIERRA_NEVADA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Sierra Nevada"
                    },
                    {
                        "name": "SOUTHERN_CALIFORNIA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Southern California"
                    },
                    {
                        "name": "CENTRAL_COAST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Central Coast"
                    },
                    {
                        "name": "NORTHERN_CALIFORNIA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Northern California"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/types/region.types.ts"
            },
            {
                "name": "ScenarioTabs",
                "childs": [
                    {
                        "name": "CONFIG",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RESULTS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/plan/create-scenarios/create-scenarios.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/backend-constants.ts": [
                {
                    "name": "BackendConstants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/backend-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  END_POINT: environment.backend_endpoint,\n  TILES_END_POINT: environment.tile_endpoint,\n  DOWNLOAD_END_POINT: environment.download_endpoint,\n} as const"
                }
            ],
            "src/app/map/map.constants.ts": [
                {
                    "name": "BOUNDARY_LAYER_HOVER_STYLES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.PathOptions",
                    "defaultValue": "{\n  weight: 5,\n  color: '#0000ff',\n  fillOpacity: 0.5,\n  fill: true,\n}"
                },
                {
                    "name": "BOUNDARY_LAYER_NORMAL_STYLES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.PathOptions",
                    "defaultValue": "{\n  weight: 1,\n  color: '#0000ff',\n  fillOpacity: 0,\n  fill: true,\n}"
                },
                {
                    "name": "DRAWING_STYLES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.PathOptions",
                    "defaultValue": "{\n  color: '#000',\n  fillColor: '#A5C8D7',\n  fillOpacity: 0.25,\n  weight: 2,\n}"
                },
                {
                    "name": "FrontendConstants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  MAP_INITIAL_ZOOM: 9,\n  MAP_MIN_ZOOM: 7,\n  MAP_MAX_ZOOM: 13,\n  MAP_DATA_LAYER_OPACITY: 0.7,\n} as const"
                },
                {
                    "name": "GEOMAN_DRAW_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.PM.ToolbarOptions",
                    "defaultValue": "{\n  cutPolygon: false,\n  drawCircle: false,\n  drawMarker: false,\n  drawCircleMarker: false,\n  drawPolyline: false,\n  drawRectangle: false,\n  drawText: false,\n  rotateMode: false,\n  position: 'bottomright',\n}"
                },
                {
                    "name": "HOVER_STYLES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.PathOptions",
                    "defaultValue": "{\n  color: '#ff0000',\n  weight: 5,\n  opacity: 0.9,\n}"
                },
                {
                    "name": "LEGEND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  labels: [\n    'Highest',\n    'Higher',\n    'High',\n    'Mid-high',\n    'Mid-low',\n    'Low',\n    'Lower',\n    'Lowest',\n  ],\n  colors: [\n    '#f65345',\n    '#e9884f',\n    '#e5ab64',\n    '#e6c67a',\n    '#cccfa7',\n    '#a5c5a6',\n    '#74afa5',\n    '#508295',\n  ],\n}"
                },
                {
                    "name": "NORMAL_STYLES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "L.PathOptions",
                    "defaultValue": "{\n  color: '#000000',\n  weight: 1,\n  opacity: 0.5,\n}"
                }
            ],
            "src/app/services/window.service.ts": [
                {
                    "name": "browserWindowProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/window.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassProvider",
                    "defaultValue": "{\n  provide: WindowRef,\n  useClass: BrowserWindowRef,\n}"
                },
                {
                    "name": "WINDOW",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/window.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Window>('WindowToken')",
                    "rawdescription": "Window service\nThis service provides a way of getting the window object via a dependency injection\nThis allows to mock and provide the window object as well as applying best practices.\n\nHow it works?\nThe main idea is to provide a token when using window instead of referencing window object directly.\n\nAvoid this:\n\n```\nexport class YourComponent {\n\n  getAgent() {\n    window.navigator.userAgent;\n  }\n}\n```\n\nUse this instead:\n\n```\nexport class YourComponent {\n\n constructor(@Inject(WINDOW) private window: Window)\n\n  getAgent() {\n    this.window.navigator.userAgent;\n  }\n}\n```\n\n\nThere are several ways of implementing this idea, this one is taken from\nhttps://brianflove.com/2018-01-11/angular-window-provider/\n\n\nTesting\n\nYou can provide a mock of the window object when declaring your test module\n\nawait TestBed.configureTestingModule({\n      declarations: [YourComponent],\n      providers: [\n        {\n          provide: WINDOW,\n          useValue: { YourWindowMock },\n        },\n      ],\n    }).compileComponents();\n\n\nAnd then get the window reference on your tests\n\n```\nconst window = TestBed.inject(WINDOW);\n```",
                    "description": "<p>Window service\nThis service provides a way of getting the window object via a dependency injection\nThis allows to mock and provide the window object as well as applying best practices.</p>\n<p>How it works?\nThe main idea is to provide a token when using window instead of referencing window object directly.</p>\n<p>Avoid this:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">export class YourComponent {\n\n  getAgent() {\n    window.navigator.userAgent;\n  }\n}</code></pre></div><p>Use this instead:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">export class YourComponent {\n\n constructor(&#64;Inject(WINDOW) private window: Window)\n\n  getAgent() {\n    this.window.navigator.userAgent;\n  }\n}</code></pre></div><p>There are several ways of implementing this idea, this one is taken from\n<a href=\"https://brianflove.com/2018-01-11/angular-window-provider/\">https://brianflove.com/2018-01-11/angular-window-provider/</a></p>\n<p>Testing</p>\n<p>You can provide a mock of the window object when declaring your test module</p>\n<p>await TestBed.configureTestingModule({\n      declarations: [YourComponent],\n      providers: [\n        {\n          provide: WINDOW,\n          useValue: { YourWindowMock },\n        },\n      ],\n    }).compileComponents();</p>\n<p>And then get the window reference on your tests</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">const window = TestBed.inject(WINDOW);</code></pre></div>"
                },
                {
                    "name": "WINDOW_PROVIDERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/window.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[browserWindowProvider, windowProvider]"
                },
                {
                    "name": "windowProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/window.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FactoryProvider",
                    "defaultValue": "{\n  provide: WINDOW,\n  useFactory: windowFactory,\n  deps: [WindowRef, PLATFORM_ID],\n}"
                }
            ],
            "src/app/shared/animations.ts": [
                {
                    "name": "colorTransitionTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(params: {\n  triggerName: string;\n  colorA: string;\n  colorB: string;\n  timingA: string;\n  timingB: string;\n}) =>\n  trigger(params.triggerName, [\n    state(\n      'colorA',\n      style({\n        backgroundColor: params.colorA,\n      })\n    ),\n    state(\n      'colorB',\n      style({\n        backgroundColor: params.colorB,\n      })\n    ),\n    transition('colorA => colorB', [animate(params.timingA)]),\n    transition('colorB => colorA', [animate(params.timingB)]),\n  ])"
                },
                {
                    "name": "expandCollapsePanelTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('expandCollapsePanel', [\n  state(\n    'expanded',\n    style({\n      backgroundColor: 'white',\n      padding: '*',\n      maxWidth: '700px',\n    })\n  ),\n  state(\n    'collapsed',\n    style({\n      backgroundColor: '#ebebeb',\n      width: '36px',\n    })\n  ),\n  transition('expanded => collapsed', [\n    group([\n      query('@expandCollapseButton', animateChild()),\n      query('@expandCollapsePanelContent', animateChild()),\n      animate('300ms 100ms ease-out'),\n    ]),\n  ]),\n  transition('collapsed => expanded', [\n    group([\n      query('@expandCollapseButton', animateChild()),\n      query('@expandCollapsePanelContent', animateChild()),\n      animate('250ms ease-out'),\n    ]),\n  ]),\n])"
                },
                {
                    "name": "opacityTransitionTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(params: {\n  triggerName: string;\n  timingA: string;\n  timingB: string;\n}) =>\n  trigger(params.triggerName, [\n    state(\n      'opaque',\n      style({\n        opacity: 1,\n      })\n    ),\n    state(\n      'transparent',\n      style({\n        opacity: 0,\n      })\n    ),\n    transition('opaque => transparent', [animate(params.timingA)]),\n    transition('transparent => opaque', [animate(params.timingB)]),\n  ])"
                }
            ],
            "src/app/plan/plan-summary/summary-panel/summary-panel.component.ts": [
                {
                    "name": "conditionScoreColorMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/plan/plan-summary/summary-panel/summary-panel.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<ConditionName, string>",
                    "defaultValue": "{\n  [ConditionName.GOOD]: '#010108',\n  [ConditionName.LEANING_GOOD]: '#4c1761',\n  [ConditionName.NEUTRAL]: '#b1354c',\n  [ConditionName.LEANING_POOR]: '#F4511e',\n  [ConditionName.POOR]: '#fdd853',\n}"
                }
            ],
            "src/app/features/feature.guard.ts": [
                {
                    "name": "createFeatureGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/feature.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanMatchFn | CanActivateFn",
                    "defaultValue": "(featureName: string) => () => {\n  const featureService = inject(FeatureService);\n  const router = inject(Router);\n\n  if (featureService.isFeatureEnabled(featureName)) return true;\n\n  // Redirect to the default page.\n  return router.parseUrl('');\n}",
                    "rawdescription": "Guard for a route based on whether a feature flag is enabled.",
                    "description": "<p>Guard for a route based on whether a feature flag is enabled.</p>\n"
                }
            ],
            "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts": [
                {
                    "name": "CURRENT_CONDITIONS_NORMALIZED_LEGEND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Current Condition (Normalized)'"
                },
                {
                    "name": "CURRENT_CONDITIONS_RAW_LEGEND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Current Condition (Raw)'",
                    "rawdescription": "Map Legend Display Strings",
                    "description": "<p>Map Legend Display Strings</p>\n"
                },
                {
                    "name": "FUTURE_CONDITIONS_LEGEND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Future Climate Stability (Normalized)'"
                }
            ],
            "src/app/plan/create-scenarios/constraints-panel/constraints-panel.component.ts": [
                {
                    "name": "customErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/plan/create-scenarios/constraints-panel/constraints-panel.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<\"notEnoughBudget\" | \"budgetOrAreaRequired\", string>",
                    "defaultValue": "{\n    notEnoughBudget: 'notEnoughBudget',\n    budgetOrAreaRequired: 'budgetOrAreaRequired',\n  }"
                }
            ],
            "src/app/shared/constants.ts": [
                {
                    "name": "DEFAULT_AREA_COLOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'#4965c7'"
                },
                {
                    "name": "EMAIL_VALIDATION_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[\\w+\\.-]+@[\\w+\\.-]+\\.[a-zA-Z]{2,}$/"
                },
                {
                    "name": "EXCLUDED_AREAS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { label: 'National Forests', key: 'NATIONAL_FORESTS' },\n  { label: 'National Parks', key: 'NATIONAL_PARKS' },\n  { label: 'Private Land', key: 'PRIVATE_LANDS' },\n  { label: 'State Parks', key: 'STATE_PARKS' },\n  { label: 'Tribal Lands', key: 'TRIBAL_LANDS' },\n  { label: 'Wilderness Area', key: 'WILDERNESS_AREA' },\n]"
                },
                {
                    "name": "MSG_RESET_PASSWORD_ERROR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Unable to reset your password at this time. Please try again later.'"
                },
                {
                    "name": "PROJECT_AREA_COLORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  '#FAD648',\n  '#FF9E58',\n  '#BCC3FF',\n  '#27C5F5',\n  '#FFC2C2',\n  '#FEDEBE',\n  '#B9D4FF',\n  '#FDE3FF',\n  '#7BC7B9',\n  '#7F95FF',\n]"
                },
                {
                    "name": "SNACK_BOTTOM_NOTICE_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarConfig<any>",
                    "defaultValue": "{\n  duration: 4000,\n  panelClass: ['snackbar-notice'],\n  verticalPosition: 'bottom',\n}"
                },
                {
                    "name": "SNACK_ERROR_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarConfig<any>",
                    "defaultValue": "{\n  duration: 10000,\n  panelClass: ['snackbar-error'],\n  verticalPosition: 'top',\n}"
                },
                {
                    "name": "SNACK_NOTICE_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarConfig<any>",
                    "defaultValue": "{\n  duration: 4000,\n  panelClass: ['snackbar-notice'],\n  verticalPosition: 'top',\n}"
                }
            ],
            "src/app/types/legend.types.ts": [
                {
                    "name": "DEFAULT_COLORMAP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/legend.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'turbo'"
                },
                {
                    "name": "NONE_COLORMAP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/legend.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'none'"
                }
            ],
            "src/environments/environment.dev.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.dev.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  backend_endpoint: 'http://localhost:8000/planscape-backend',\n  google_analytics_id: '', // Replace with actual ID.\n  tile_endpoint: 'https://dev-geo.planscape.org/geoserver/', // Replace with actual URL\n  download_endpoint: '', // Replace with actual URL\n  arcgis_key:\n    'AAPK99ed994ee61d4de9812fec68db9793b5Rk3xwmAsyzkMhbz9f_GD-vCLuPHGDI6Tq08BbqObksxFOATs8HT-wELngE-cnLZy',\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  backend_endpoint: 'http://localhost:8000/planscape-backend',\n  google_analytics_id: '', // Replace with actual ID.\n  tile_endpoint: '', // Replace with actual URL\n  download_endpoint: '', // Replace with actual URL\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  backend_endpoint: 'http://localhost:8000/planscape-backend',\n  google_analytics_id: '', // Replace with actual ID.\n  tile_endpoint: '', // Replace with actual URL\n  download_endpoint: '', // Replace with actual URL\n}"
                }
            ],
            "src/app/features/features-config.ts": [
                {
                    "name": "FEATURES_JSON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/features-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('features_json')"
                }
            ],
            "src/app/validators/scenarios.ts": [
                {
                    "name": "MAX_AREA_PERCENTAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/validators/scenarios.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0.8"
                },
                {
                    "name": "MIN_AREA_PERCENTAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/validators/scenarios.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0.2"
                }
            ],
            "src/app/services/mocks.ts": [
                {
                    "name": "MOCK_PLAN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Plan",
                    "defaultValue": "{\n  id: 1,\n  name: 'mock plan',\n  user: 2,\n  region_name: Region.SIERRA_NEVADA,\n  geometry: {\n    type: 'FeatureCollection',\n    features: [],\n  },\n  area_acres: 123,\n  area_m2: 345,\n  creator: 'John Plans',\n  created_at: '2024-03-05T18:08:40.503963Z',\n  latest_updated: '2024-03-05T18:08:40.503963Z',\n  permissions: [],\n  scenario_count: 0,\n  role: 'Creator',\n}"
                }
            ],
            "src/app/map/map-nameplate/map-nameplate.component.ts": [
                {
                    "name": "NAMEPLATE_RIGHT_MARGIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/map/map-nameplate/map-nameplate.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "16"
                }
            ],
            "src/app/types/data.types.ts": [
                {
                    "name": "NONE_BOUNDARY_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/data.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoundaryConfig",
                    "defaultValue": "{\n  boundary_name: '',\n  display_name: 'None',\n  vector_name: '',\n  shape_name: 'None',\n}"
                },
                {
                    "name": "NONE_DATA_LAYER_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/data.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataLayerConfig",
                    "defaultValue": "{\n  display_name: 'None',\n  filepath: '',\n  layer: '',\n  colormap: NONE_COLORMAP,\n}"
                }
            ],
            "src/app/plan/plan-helpers.ts": [
                {
                    "name": "NOTE_SAVE_INTERVAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/plan/plan-helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "5000"
                },
                {
                    "name": "POLLING_INTERVAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/plan/plan-helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "3000"
                },
                {
                    "name": "SQUARE_METERS_PER_ACRE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/plan/plan-helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0.0002471054"
                },
                {
                    "name": "STAND_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/plan/plan-helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['SMALL', 'MEDIUM', 'LARGE']"
                }
            ],
            "src/app/services/password-reset.resolver.ts": [
                {
                    "name": "passwordResetTokenResolver",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/password-reset.resolver.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResolveFn<PasswordResetToken | null>",
                    "defaultValue": "(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n  const userId = route.paramMap.get('userId');\n  const token = route.paramMap.get('token');\n  if (!userId || !token) {\n    inject(Router).navigate(['reset']);\n  }\n  const passwordResetToken = {\n    userId: userId || '',\n    token: token || '',\n  };\n  return inject(AuthService)\n    .validatePasswordResetToken(passwordResetToken)\n    .pipe(\n      map((_) => {\n        return passwordResetToken;\n      }),\n      catchError((error: Error) => {\n        return of(null);\n      })\n    );\n}",
                    "rawdescription": "Resolver to validate the password reset token.",
                    "description": "<p>Resolver to validate the password reset token.</p>\n"
                }
            ],
            "src/app/services/redirect.resolver.ts": [
                {
                    "name": "redirectResolver",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/redirect.resolver.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResolveFn<string | boolean>",
                    "defaultValue": "(\n  route: ActivatedRouteSnapshot\n) => {\n  const redirect = route.queryParams['redirect'] as string;\n  if (redirect) {\n    inject(RedirectService).setRedirect(redirect);\n    return redirect;\n  }\n  return false;\n}"
                }
            ],
            "src/app/types/region.types.ts": [
                {
                    "name": "regions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/region.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Region[]",
                    "defaultValue": "[\n  Region.SIERRA_NEVADA,\n  Region.SOUTHERN_CALIFORNIA,\n  Region.CENTRAL_COAST,\n  Region.NORTHERN_CALIFORNIA,\n]"
                }
            ],
            "src/app/services/map.service.ts": [
                {
                    "name": "regionToGeojsonMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/map.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<Region, Record<string, string>>",
                    "defaultValue": "{\n  [Region.SIERRA_NEVADA]: {\n    boundary: 'assets/geojson/sierra_nevada_region.geojson',\n  },\n  [Region.CENTRAL_COAST]: {\n    boundary: 'assets/geojson/central_coast_region.geojson',\n  },\n  [Region.NORTHERN_CALIFORNIA]: {\n    boundary: 'assets/geojson/northern_california_region.geojson',\n  },\n  [Region.SOUTHERN_CALIFORNIA]: {\n    boundary: 'assets/geojson/southern_california_region.geojson',\n  },\n}",
                    "rawdescription": "A map of Region to static assets for that region.",
                    "description": "<p>A map of Region to static assets for that region.</p>\n"
                }
            ],
            "src/app/home/share-plan-dialog/share-plan-dialog.component.ts": [
                {
                    "name": "Roles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/share-plan-dialog/share-plan-dialog.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<INVITE_ROLE, INVITE_ROLE>",
                    "defaultValue": "{\n  Viewer: 'Viewer',\n  Collaborator: 'Collaborator',\n  Owner: 'Owner',\n}"
                }
            ],
            "src/app/services/session.service.ts": [
                {
                    "name": "SESSION_SAVE_INTERVAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/session.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "600",
                    "rawdescription": "How often the user's session should be saved to local storage (in ms).",
                    "description": "<p>How often the user&#39;s session should be saved to local storage (in ms).</p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/map/map.layers.ts": [
                {
                    "name": "addClonedLayerToMap",
                    "file": "src/app/map/map.layers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "layer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "layer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addRegionLayer",
                    "file": "src/app/map/map.layers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "boundary",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "boundary",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDrawingLayer",
                    "file": "src/app/map/map.layers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "planningAreaData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "planningAreaData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opacity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createRegionLayer",
                    "file": "src/app/map/map.layers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "boundaries",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "boundaries",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideRegionLayer",
                    "file": "src/app/map/map.layers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeClonedLayer",
                    "file": "src/app/map/map.layers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "layer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "deleteOriginal",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "layer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deleteOriginal",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showRegionLayer",
                    "file": "src/app/map/map.layers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/map/map.helper.ts": [
                {
                    "name": "addGeoJSONToMap",
                    "file": "src/app/map/map.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "lGeoJson",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mapInstance",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "lGeoJson",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mapInstance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "areaOverlaps",
                    "file": "src/app/map/map.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "editedLayer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "existingPolygon",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "editedLayer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "existingPolygon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkIfAreaInBoundaries",
                    "file": "src/app/map/map.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "area",
                            "type": "FeatureCollection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "boundaries",
                            "type": "Feature",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "area",
                            "type": "FeatureCollection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "boundaries",
                            "type": "Feature",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkIfMultipolygonOverlaps",
                    "file": "src/app/map/map.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "feature",
                            "type": "Feature",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "boundaries",
                            "type": "Feature",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "feature",
                            "type": "Feature",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "boundaries",
                            "type": "Feature",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMultiPolygonFeatureCollection",
                    "file": "src/app/map/map.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "featureCollection",
                            "type": "FeatureCollection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "featureCollection",
                            "type": "FeatureCollection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "defaultMapConfig",
                    "file": "src/app/map/map.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "MapConfig"
                },
                {
                    "name": "defaultMapConfigsDictionary",
                    "file": "src/app/map/map.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Record<Region, MapConfig[]>"
                },
                {
                    "name": "defaultMapViewOptions",
                    "file": "src/app/map/map.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "MapViewOptions"
                },
                {
                    "name": "getMapNameplateWidth",
                    "file": "src/app/map/map.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number | null",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "regionMapCenters",
                    "file": "src/app/map/map.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "L.LatLngTuple",
                    "jsdoctags": [
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformCoordToLayer",
                    "file": "src/app/map/map.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "coord",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "coord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/plan/plan-helpers.ts": [
                {
                    "name": "calculateAcres",
                    "file": "src/app/plan/plan-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": true,
                    "deprecationMessage": "do not use",
                    "description": "",
                    "args": [
                        {
                            "name": "planningArea",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 613,
                                "end": 625,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "planningArea"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 607,
                                "end": 612,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "conditionsConfigToPriorityData",
                    "file": "src/app/plan/plan-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "config",
                            "type": "ConditionsConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "PriorityRow[]",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ConditionsConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findQuestionOnTreatmentGoalsConfig",
                    "file": "src/app/plan/plan-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "treatmentGoalConfigs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "treatmentQuestion",
                            "type": "TreatmentQuestionConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "treatmentGoalConfigs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "treatmentQuestion",
                            "type": "TreatmentQuestionConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColorForProjectPosition",
                    "file": "src/app/plan/plan-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "position",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1640,
                                "end": 1648,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "position"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1634,
                                "end": 1639,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>rank position (1 based index) of scenario projection</p>\n"
                        }
                    ]
                },
                {
                    "name": "getPlanPath",
                    "file": "src/app/plan/plan-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "planId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "planId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseResultsToProjectAreas",
                    "file": "src/app/plan/plan-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "results",
                            "type": "ScenarioResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ProjectAreaReport[]",
                    "jsdoctags": [
                        {
                            "name": "results",
                            "type": "ScenarioResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseResultsToTotals",
                    "file": "src/app/plan/plan-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "areaReports",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ProjectTotalReport",
                    "jsdoctags": [
                        {
                            "name": "areaReports",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/validators/scenarios.ts": [
                {
                    "name": "calculateMaxArea",
                    "file": "src/app/validators/scenarios.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "planningArea",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "planningArea",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateMinArea",
                    "file": "src/app/validators/scenarios.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "planningArea",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "planningArea",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateMinBudget",
                    "file": "src/app/validators/scenarios.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "planningAreaAcres",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "estCostPerAcre",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "planningAreaAcres",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "estCostPerAcre",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasEnoughBudget",
                    "file": "src/app/validators/scenarios.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "planningAreaAcres",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "estCostPerAcre",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxCost",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "planningAreaAcres",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "estCostPerAcre",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxCost",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/plan/permissions.ts": [
                {
                    "name": "canAddScenario",
                    "file": "src/app/plan/permissions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canDeletePlanningArea",
                    "file": "src/app/plan/permissions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canViewCollaborators",
                    "file": "src/app/plan/permissions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "plan",
                            "type": "Plan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/map/map.tiles.ts": [
                {
                    "name": "changeMapBaseStyle",
                    "file": "src/app/map/map.tiles.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "satelliteTiles",
                    "file": "src/app/map/map.tiles.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a basemap layer using the Esri.WorldImagery tiles.</p>\n",
                    "args": []
                },
                {
                    "name": "stadiaAlidadeTiles",
                    "file": "src/app/map/map.tiles.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a basemap layer using the Stadia.AlidadeSmooth tiles.</p>\n",
                    "args": []
                },
                {
                    "name": "terrainTiles",
                    "file": "src/app/map/map.tiles.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a basemap layer using the Esri.WorldTerrain tiles.</p>\n",
                    "args": []
                }
            ],
            "src/app/types/legend.types.ts": [
                {
                    "name": "colormapConfigToLegend",
                    "file": "src/app/types/legend.types.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Convert a colormap to a legend object.</p>\n",
                    "args": [
                        {
                            "name": "colormap",
                            "type": "ColormapConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minMaxValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Legend | undefined",
                    "jsdoctags": [
                        {
                            "name": "colormap",
                            "type": "ColormapConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minMaxValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/map/map.legends.ts": [
                {
                    "name": "createAndAddLegend",
                    "file": "src/app/map/map.legends.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "colormap",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataUnit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "colormap",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataUnit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLegendHtmlElement",
                    "file": "src/app/map/map.legends.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "colormap",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataUnit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "colormap",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataUnit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLegendWithColorMap",
                    "file": "src/app/map/map.legends.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colormap",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "minMaxValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colormap",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minMaxValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/validators/passwords.ts": [
                {
                    "name": "passwordMustBeNewValidator",
                    "file": "src/app/validators/passwords.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Validates that the current password is not the same as the new one</p>\n",
                    "args": [
                        {
                            "name": "currentPasswordFieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "passwordFieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 306,
                                "end": 330,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "currentPasswordFieldName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 300,
                                "end": 305,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the name of the current password formControl element on the form</p>\n"
                        },
                        {
                            "name": {
                                "pos": 406,
                                "end": 423,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "passwordFieldName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 400,
                                "end": 405,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the name of the new password formControl element on the form</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 489,
                                "end": 495,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "return"
                            },
                            "comment": "<p>if error returns <code>newPasswordMustBeNew: true</code>. Will additionally mark with the error the field with passwordFieldName</p>\n"
                        }
                    ]
                },
                {
                    "name": "passwordsMustMatchValidator",
                    "file": "src/app/validators/passwords.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Validates the format of the password and that it matches the password confirmation</p>\n",
                    "args": [
                        {
                            "name": "passwordFieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "passwordConfirmFieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1433,
                                "end": 1450,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "passwordFieldName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1427,
                                "end": 1432,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the name of the new password formControl element on the form</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1522,
                                "end": 1546,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "passwordConfirmFieldName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1516,
                                "end": 1521,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the name of the new password confirmation formControl element on the form</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1625,
                                "end": 1631,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "return"
                            },
                            "comment": "<p>if error returns <code>newPasswordsMustMatch: true</code></p>\n"
                        }
                    ]
                }
            ],
            "src/app/types/region.types.ts": [
                {
                    "name": "regionToString",
                    "file": "src/app/types/region.types.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "region",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/plan/create-scenarios/create-scenarios.component.ts": [
                {
                    "name": "scenarioNameMustBeNew",
                    "file": "src/app/plan/create-scenarios/create-scenarios.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "nameControl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "existingNames",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type | null",
                    "jsdoctags": [
                        {
                            "name": "nameControl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "existingNames",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/services/window.service.ts": [
                {
                    "name": "windowFactory",
                    "file": "src/app/services/window.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "browserWindowRef",
                            "type": "BrowserWindowRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "platformId",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Window | Object",
                    "jsdoctags": [
                        {
                            "name": "browserWindowRef",
                            "type": "BrowserWindowRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "platformId",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/map/map.constants.ts": [
                {
                    "name": "AreaCreationAction",
                    "childs": [
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "DRAW",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "UPLOAD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/map/map.constants.ts"
                }
            ],
            "src/app/types/layer.types.ts": [
                {
                    "name": "BaseLayerType",
                    "childs": [
                        {
                            "name": "Road",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Terrain",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Satellite",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/types/layer.types.ts"
                }
            ],
            "src/app/plan/plan-summary/summary-panel/summary-panel.component.ts": [
                {
                    "name": "ConditionName",
                    "childs": [
                        {
                            "name": "GOOD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Good"
                        },
                        {
                            "name": "LEANING_GOOD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Leaning good"
                        },
                        {
                            "name": "NEUTRAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Neutral"
                        },
                        {
                            "name": "LEANING_POOR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Leaning poor"
                        },
                        {
                            "name": "POOR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Poor"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/plan/plan-summary/summary-panel/summary-panel.component.ts"
                }
            ],
            "src/app/types/data.types.ts": [
                {
                    "name": "ConditionTreeType",
                    "childs": [
                        {
                            "name": "RAW",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Raw"
                        },
                        {
                            "name": "TRANSLATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Translated"
                        },
                        {
                            "name": "FUTURE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Future"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/types/data.types.ts"
                },
                {
                    "name": "FormMessageType",
                    "childs": [
                        {
                            "name": "SUCCESS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ERROR",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ALERT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/types/data.types.ts"
                }
            ],
            "src/app/types/region.types.ts": [
                {
                    "name": "Region",
                    "childs": [
                        {
                            "name": "SIERRA_NEVADA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Sierra Nevada"
                        },
                        {
                            "name": "SOUTHERN_CALIFORNIA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Southern California"
                        },
                        {
                            "name": "CENTRAL_COAST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Central Coast"
                        },
                        {
                            "name": "NORTHERN_CALIFORNIA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Northern California"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/types/region.types.ts"
                }
            ],
            "src/app/plan/create-scenarios/create-scenarios.component.ts": [
                {
                    "name": "ScenarioTabs",
                    "childs": [
                        {
                            "name": "CONFIG",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "RESULTS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/plan/create-scenarios/create-scenarios.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/account/edit-user-field/edit-user-field.component.ts": [
                {
                    "name": "AvailableUserFields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/account/edit-user-field/edit-user-field.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 198
                },
                {
                    "name": "State",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"view\" | \"editing\" | \"saving\" | \"error\"",
                    "file": "src/app/account/edit-user-field/edit-user-field.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/stories/button/button.component.ts": [
                {
                    "name": "ButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"ghost\" | \"text\" | \"negative\" | \"positive\"",
                    "file": "src/stories/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/types/invite.types.ts": [
                {
                    "name": "INVITE_ROLE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Viewer\" | \"Collaborator\" | \"Owner\"",
                    "file": "src/app/types/invite.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/types/plan.types.ts": [
                {
                    "name": "PreviewPlan",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<Plan | \"geometry\" | \"area_m2\">",
                    "file": "src/app/types/plan.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/types/scenario.types.ts": [
                {
                    "name": "SCENARIO_STATUS",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"ACTIVE\" | \"ARCHIVED\"",
                    "file": "src/app/types/scenario.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ScenarioResultStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"LOADING\" | \"NOT_STARTED\" | \"PENDING\" | \"RUNNING\" | \"SUCCESS\" | \"FAILURE\" | \"PANIC\" | \"TIMED_OUT\"",
                    "file": "src/app/types/scenario.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/account/change-password/change-password.component.ts": [
                {
                    "name": "State",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"view\" | \"editing\" | \"saving\"",
                    "file": "src/app/account/change-password/change-password.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "title": "Planscape",
                        "children": [
                            {
                                "path": "",
                                "redirectTo": "home",
                                "pathMatch": "full"
                            },
                            {
                                "path": "login",
                                "title": "Login",
                                "component": "LoginComponent"
                            },
                            {
                                "path": "reset/:userId/:token",
                                "title": "Passwordreset",
                                "resolve": {
                                    "passwordResetToken": "passwordResetTokenResolver"
                                },
                                "component": "PasswordResetComponent"
                            },
                            {
                                "path": "reset",
                                "title": "Forgetpassword",
                                "component": "ForgetPasswordComponent"
                            },
                            {
                                "path": "home",
                                "title": "Home",
                                "component": "HomeComponent"
                            },
                            {
                                "path": "signup",
                                "title": "Signup",
                                "component": "SignupComponent",
                                "resolve": {
                                    "redirectUrl": "redirectResolver"
                                }
                            },
                            {
                                "path": "thankyou",
                                "title": "ThankYou",
                                "component": "ThankYouComponent"
                            },
                            {
                                "path": "validate/:token",
                                "title": "AccountE-mailValidation",
                                "component": "AccountValidationComponent"
                            },
                            {
                                "path": "map",
                                "title": "Explore",
                                "component": "MapComponent"
                            },
                            {
                                "path": "feedback",
                                "canActivate": [
                                    "RedirectGuard"
                                ],
                                "component": "RedirectGuard",
                                "data": {
                                    "externalUrl": "https://share.hsforms.com/1xXehW6VrR0WskbHhqxsrrw3atqe"
                                }
                            },
                            {
                                "path": "help",
                                "canActivate": [
                                    "RedirectGuard"
                                ],
                                "component": "RedirectGuard",
                                "data": {
                                    "externalUrl": "https://github.com/OurPlanscape/Planscape/wiki/Planscape-User-Guide"
                                }
                            },
                            {
                                "path": "plan/:id",
                                "title": "PlanDetails",
                                "component": "PlanComponent",
                                "canActivate": [
                                    "AuthGuard"
                                ],
                                "children": [
                                    {
                                        "path": "config",
                                        "title": "ScenarioConfiguration",
                                        "component": "CreateScenariosComponent"
                                    },
                                    {
                                        "path": "config/:id",
                                        "title": "ScenarioConfiguration",
                                        "component": "CreateScenariosComponent"
                                    },
                                    {
                                        "path": "explore",
                                        "title": "Explore",
                                        "component": "ExploreComponent"
                                    }
                                ]
                            },
                            {
                                "path": "explore/:id",
                                "title": "ExplorePlan",
                                "component": "ExploreComponent",
                                "canActivate": [
                                    "AuthGuard"
                                ]
                            },
                            {
                                "path": "account",
                                "title": "AccountDetails",
                                "component": "AccountPageComponent",
                                "canActivate": [
                                    "AuthGuard"
                                ],
                                "children": [
                                    {
                                        "path": "",
                                        "redirectTo": "information",
                                        "pathMatch": "full"
                                    },
                                    {
                                        "path": "information",
                                        "title": "EditPersonalinformation",
                                        "component": "DetailsComponent"
                                    },
                                    {
                                        "path": "credentials",
                                        "title": "EditCredentials",
                                        "component": "CredentialsComponent"
                                    },
                                    {
                                        "path": "delete-account",
                                        "title": "DeactivateAccount",
                                        "component": "DeleteAccountComponent"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 7,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/account-validation/account-validation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountValidationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/account/account-page/account-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/account/change-password/change-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChangePasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/account/credentials/credentials.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CredentialsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account/delete-account-dialog/delete-account-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteAccountDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/account/delete-account/delete-account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteAccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/account/details/details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/account/edit-user-field/edit-user-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditUserFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/account/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/app-routing.module.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlanscapeTitleStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/backend-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BackendConstants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/delete-dialog/delete-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feature-flag.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FeatureFlagDirective",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feature.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createFeatureGuard",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/features/feature.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FeatureService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/features-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FeaturesConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/features-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FEATURES_JSON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forget-password/forget-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgetPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/forget-password/reset-password-dialog/reset_password_dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordDialogComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/home/about/about.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/home/chip-input/chip-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/horizonal-card/horizonal-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HorizonalCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/home/learn-more/learn-more.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LearnMoreComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/home/plan-table/plan-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/home/planning-areas/planning-areas.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanningAreasComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/share-plan-dialog/share-plan-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SharePlanDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/home/share-plan-dialog/share-plan-dialog.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Roles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/welcome/welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/map/invalid-link-dialog/invalid-link-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvalidLinkDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/map/layer-info-card/layer-info-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayerInfoCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map-config-summary/map-config-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapConfigSummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConditionTreeComponent",
                "coveragePercent": 40,
                "coverageCount": "9/22",
                "status": "medium"
            },
            {
                "filePath": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConditionFlatNode",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConditionsNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CURRENT_CONDITIONS_NORMALIZED_LEGEND",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CURRENT_CONDITIONS_RAW_LEGEND",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/map/map-control-panel/condition-tree/condition-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FUTURE_CONDITIONS_LEGEND",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map-control-panel/map-control-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapControlPanelComponent",
                "coveragePercent": 3,
                "coverageCount": "1/33",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map-manager.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MapManager",
                "coveragePercent": 55,
                "coverageCount": "19/34",
                "status": "good"
            },
            {
                "filePath": "src/app/map/map-nameplate/map-nameplate.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapNameplateComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map-nameplate/map-nameplate.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAMEPLATE_RIGHT_MARGIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapComponent",
                "coveragePercent": 24,
                "coverageCount": "14/57",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BOUNDARY_LAYER_HOVER_STYLES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BOUNDARY_LAYER_NORMAL_STYLES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DRAWING_STYLES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FrontendConstants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GEOMAN_DRAW_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOVER_STYLES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LEGEND",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NORMAL_STYLES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addGeoJSONToMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "areaOverlaps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "checkIfAreaInBoundaries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "checkIfMultipolygonOverlaps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createMultiPolygonFeatureCollection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "defaultMapConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "defaultMapConfigsDictionary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "defaultMapViewOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getMapNameplateWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "regionMapCenters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "transformCoordToLayer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.layers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addClonedLayerToMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.layers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addRegionLayer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.layers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createDrawingLayer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.layers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createRegionLayer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.layers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "hideRegionLayer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.layers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "removeClonedLayer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.layers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "showRegionLayer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.legends.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createAndAddLegend",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.legends.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createLegendHtmlElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.legends.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "updateLegendWithColorMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.tiles.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "changeMapBaseStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.tiles.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "satelliteTiles",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/map/map.tiles.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "stadiaAlidadeTiles",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/map/map.tiles.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "terrainTiles",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/map/outside-region-dialog/outside-region-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OutsideRegionDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/map/plan-create-dialog/plan-create-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanCreateDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/map/plan-create-dialog/plan-create-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlanCreateDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/map/project-card/project-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/map/project-card/project-card.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Project",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/map/project-card/project-card.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Treatment",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/map/region-dropdown/region-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegionDropdownComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/map/sign-in-dialog/sign-in-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/password-reset/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/password-reset/password-reset.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordResetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/currency-in-k.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CurrencyInKPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/plan/area-details/area-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AreaDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/area-notes/area-notes.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AreaNotesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/create-scenarios/constraints-panel/constraints-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConstraintsPanelComponent",
                "coveragePercent": 13,
                "coverageCount": "2/15",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/create-scenarios/constraints-panel/constraints-panel.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotEnoughBudgetStateMatcher",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/create-scenarios/constraints-panel/constraints-panel.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/create-scenarios/create-scenarios.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateScenariosComponent",
                "coveragePercent": 9,
                "coverageCount": "3/32",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/create-scenarios/create-scenarios.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "scenarioNameMustBeNew",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/create-scenarios/goal-overlay/goal-overlay.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GoalOverlayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/create-scenarios/goal-overlay/goal-overlay.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GoalOverlayService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/create-scenarios/identify-project-areas/identify-project-areas.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IdentifyProjectAreasComponent",
                "coveragePercent": 20,
                "coverageCount": "2/10",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/create-scenarios/set-priorities/set-priorities.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SetPrioritiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/create-scenarios/tooltips/scenario-tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioTooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/delete-note-dialog/delete-note-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteNoteDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/explore/explore/explore.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExploreComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/permissions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "canAddScenario",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/permissions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "canDeletePlanningArea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/permissions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "canViewCollaborators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calculateAcres",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "conditionsConfigToPriorityData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "findQuestionOnTreatmentGoalsConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getColorForProjectPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getPlanPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "parseResultsToProjectAreas",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "parseResultsToTotals",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NOTE_SAVE_INTERVAL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "POLLING_INTERVAL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SQUARE_METERS_PER_ACRE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STAND_SIZES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-map/plan-map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanMapComponent",
                "coveragePercent": 16,
                "coverageCount": "4/24",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-map/plan-map.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MapRef",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-navigation-bar/plan-navigation-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanNavigationBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-summary/plan-overview/plan-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-summary/saved-scenarios/saved-scenarios.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SavedScenariosComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-summary/saved-scenarios/saved-scenarios.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScenarioRow",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-summary/scenarios-table-list/scenarios-table-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenariosTableListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-summary/summary-panel/summary-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SummaryPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-summary/summary-panel/summary-panel.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryInput",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan-summary/summary-panel/summary-panel.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "conditionScoreColorMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/plan.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/project-areas-metrics/chart-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChartData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/project-areas-metrics/project-areas-metrics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectAreasMetricsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/project-areas/project-areas.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectAreasComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/project-areas/project-areas.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectAreaReport",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/project-areas/project-areas.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectTotalReport",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/report-chart/report-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReportChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/resource-unavailable/resource-unavailable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResourceUnavailableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/scenario-failure/scenario-failure.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioFailureComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/scenario-not-started/scenario-not-started.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioNotStartedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/scenario-pending/scenario-pending.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioPendingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/plan/scenario-results/scenario-results.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioResultsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthGuard",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 17,
                "coverageCount": "4/23",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LogoutResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswordResetToken",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/errors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateScenarioError",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/file-saver.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FileSaverService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/invites.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InvitesService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/jwt-interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/map.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MapService",
                "coveragePercent": 25,
                "coverageCount": "3/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/map.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "regionToGeojsonMap",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/services/mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_PLAN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/password-reset.resolver.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passwordResetTokenResolver",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/services/plan-notes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlanNotesService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/plan-notes.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Note",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/plan-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlanStateService",
                "coveragePercent": 5,
                "coverageCount": "1/20",
                "status": "low"
            },
            {
                "filePath": "src/app/services/plan-state.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlanState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/plan.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlanService",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/app/services/popup.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PopupService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/redirect.guard.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RedirectGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/redirect.resolver.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "redirectResolver",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/redirect.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RedirectService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/redirect.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RedirectData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/region.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegionService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/scenario.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScenarioService",
                "coveragePercent": 46,
                "coverageCount": "6/13",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionService",
                "coveragePercent": 58,
                "coverageCount": "7/12",
                "status": "good"
            },
            {
                "filePath": "src/app/services/session.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SESSION_SAVE_INTERVAL",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/services/share-map.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShareMapService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/share-map.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreatedLink",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/share-map.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/treatment-goals.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TreatmentGoalsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/window.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BrowserWindowRef",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/window.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WindowRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/window.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "windowFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/window.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "browserWindowProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/window.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WINDOW",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/services/window.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WINDOW_PROVIDERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/window.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "windowProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "colorTransitionTrigger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "expandCollapsePanelTrigger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "opacityTransitionTrigger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_AREA_COLOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMAIL_VALIDATION_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXCLUDED_AREAS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MSG_RESET_PASSWORD_ERROR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROJECT_AREA_COLORS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SNACK_BOTTOM_NOTICE_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SNACK_ERROR_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SNACK_NOTICE_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/credits-blurb/credits-blurb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreditsBlurbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/field-alert/field-alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldAlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/file-uploader/file-uploader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploaderComponent",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/form-message-box/form-message-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormMessageBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/nav-bar/nav-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/nav-bar/nav-bar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Breadcrumb",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/opacity-slider/opacity-slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OpacitySliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/section-loader/section-loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/share-explore-dialog/share-explore-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShareExploreDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/type-safe-mat-cell/type-safe-mat-cell-def.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TypeSafeMatCellDef",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/signup/info-card/info-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/signup/signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/signup/thank-you/thank-you.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThankYouComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/stringify-map-config.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "StringifyMapConfigPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/top-bar/top-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoundaryConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConditionsConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConditionsMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataLayerConfig",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ElementConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetricConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PillarConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data.types.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NONE_BOUNDARY_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data.types.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NONE_DATA_LAYER_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/invite.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Invite",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/types/legend.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColormapConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/legend.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColormapValue",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/legend.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Legend",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/types/legend.types.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "colormapConfigToLegend",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/types/legend.types.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_COLORMAP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/legend.types.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NONE_COLORMAP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/map.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Map",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/types/map.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MapConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/types/map.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MapViewOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/types/plan.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BackendProjectArea",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/plan.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreatePlanPayload",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/plan.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Plan",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/types/region.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegionOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/region.types.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "regionToString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/region.types.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "regions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/scenario.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FeatureCollection",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/scenario.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PriorityRow",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/types/scenario.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectArea",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/types/scenario.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Scenario",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/types/scenario.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScenarioConfig",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "src/app/types/scenario.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScenarioResult",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/scenario.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreatmentGoalConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/scenario.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreatmentQuestionConfig",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/types/user.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/error-matchers.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AfterTouchedOrSubmitErrorStateMatcher",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/validators/error-matchers.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PasswordStateMatcher",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/passwords.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswordFieldsErrors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/passwords.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "passwordMustBeNewValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/validators/passwords.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "passwordsMustMatchValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/validators/scenarios.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calculateMaxArea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/scenarios.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calculateMinArea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/scenarios.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calculateMinBudget",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/scenarios.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "hasEnoughBudget",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/scenarios.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_AREA_PERCENTAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/scenarios.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MIN_AREA_PERCENTAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.dev.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            }
        ]
    }
}